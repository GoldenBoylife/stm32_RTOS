
210929_stm32_RTOS_to_MFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007848  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bbc  08007bbc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc4  08007bc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c28  20000074  08007c40  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c9c  08007c40  00024c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba21  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003690  00000000  00000000  0003bac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  0003f158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001470  00000000  00000000  00040760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003c33  00000000  00000000  00041bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012087  00000000  00000000  00045803  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed30d  00000000  00000000  0005788a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144b97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f14  00000000  00000000  00144c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080079e0 	.word	0x080079e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080079e0 	.word	0x080079e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_UART_RxCpltCallback>:

char uart_buf[100];

int i;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <HAL_UART_RxCpltCallback+0x24>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d104      	bne.n	80005ac <HAL_UART_RxCpltCallback+0x1c>
	{

		HAL_UART_Receive_IT(&huart3, &uart_buf, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <HAL_UART_RxCpltCallback+0x28>)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <HAL_UART_RxCpltCallback+0x2c>)
 80005a8:	f002 ff50 	bl	800344c <HAL_UART_Receive_IT>


	}
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40004800 	.word	0x40004800
 80005b8:	20004a80 	.word	0x20004a80
 80005bc:	200049a8 	.word	0x200049a8

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fdf2 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f870 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fa48 	bl	8000a60 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d0:	f000 fa1c 	bl	8000a0c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8fe 	bl	80007d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005d8:	f000 f94e 	bl	8000878 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005dc:	f000 f99e 	bl	800091c <MX_ADC3_Init>
  MX_RTC_Init();
 80005e0:	f000 f9ee 	bl	80009c0 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005e4:	f000 f8ea 	bl	80007bc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,&uart_buf,1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	491c      	ldr	r1, [pc, #112]	; (800065c <main+0x9c>)
 80005ec:	481c      	ldr	r0, [pc, #112]	; (8000660 <main+0xa0>)
 80005ee:	f002 ff2d 	bl	800344c <HAL_UART_Receive_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f2:	f003 fd3b 	bl	800406c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f6:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <main+0xa4>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	481b      	ldr	r0, [pc, #108]	; (8000668 <main+0xa8>)
 80005fc:	f003 fda0 	bl	8004140 <osThreadNew>
 8000600:	4602      	mov	r2, r0
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <main+0xac>)
 8000604:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  //uart_mutex_id = osMutexCreate(osMutex(uart_mutex));



  LED1TaskHandle = osThreadNew(LED1Task, NULL, &LED1Task_attributes);
 8000606:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <main+0xb0>)
 8000608:	2100      	movs	r1, #0
 800060a:	481a      	ldr	r0, [pc, #104]	; (8000674 <main+0xb4>)
 800060c:	f003 fd98 	bl	8004140 <osThreadNew>
 8000610:	4602      	mov	r2, r0
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <main+0xb8>)
 8000614:	601a      	str	r2, [r3, #0]
  LED2TaskHandle = osThreadNew(LED2Task, NULL, &LED2Task_attributes);
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <main+0xbc>)
 8000618:	2100      	movs	r1, #0
 800061a:	4819      	ldr	r0, [pc, #100]	; (8000680 <main+0xc0>)
 800061c:	f003 fd90 	bl	8004140 <osThreadNew>
 8000620:	4602      	mov	r2, r0
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <main+0xc4>)
 8000624:	601a      	str	r2, [r3, #0]

  RotationTaskHandle = osThreadNew(RotationTask, NULL, &RotationTask_attributes);
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <main+0xc8>)
 8000628:	2100      	movs	r1, #0
 800062a:	4818      	ldr	r0, [pc, #96]	; (800068c <main+0xcc>)
 800062c:	f003 fd88 	bl	8004140 <osThreadNew>
 8000630:	4602      	mov	r2, r0
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <main+0xd0>)
 8000634:	601a      	str	r2, [r3, #0]
  SoundTaskHandle = osThreadNew(SoundTask, NULL, &SoundTask_attributes);
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <main+0xd4>)
 8000638:	2100      	movs	r1, #0
 800063a:	4817      	ldr	r0, [pc, #92]	; (8000698 <main+0xd8>)
 800063c:	f003 fd80 	bl	8004140 <osThreadNew>
 8000640:	4602      	mov	r2, r0
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <main+0xdc>)
 8000644:	601a      	str	r2, [r3, #0]
  TouchTaskHandle = osThreadNew(TouchTask, NULL, &TouchTask_attributes);
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <main+0xe0>)
 8000648:	2100      	movs	r1, #0
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <main+0xe4>)
 800064c:	f003 fd78 	bl	8004140 <osThreadNew>
 8000650:	4602      	mov	r2, r0
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <main+0xe8>)
 8000654:	601a      	str	r2, [r3, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000656:	f003 fd3d 	bl	80040d4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800065a:	e7fe      	b.n	800065a <main+0x9a>
 800065c:	20004a80 	.word	0x20004a80
 8000660:	200049a8 	.word	0x200049a8
 8000664:	08007a98 	.word	0x08007a98
 8000668:	08000d21 	.word	0x08000d21
 800066c:	200049a4 	.word	0x200049a4
 8000670:	08007abc 	.word	0x08007abc
 8000674:	08000b4d 	.word	0x08000b4d
 8000678:	20004bec 	.word	0x20004bec
 800067c:	08007ae0 	.word	0x08007ae0
 8000680:	08000b6d 	.word	0x08000b6d
 8000684:	20004b30 	.word	0x20004b30
 8000688:	08007b04 	.word	0x08007b04
 800068c:	08000b8d 	.word	0x08000b8d
 8000690:	20004b80 	.word	0x20004b80
 8000694:	08007b28 	.word	0x08007b28
 8000698:	08000c15 	.word	0x08000c15
 800069c:	20004bf0 	.word	0x20004bf0
 80006a0:	08007b4c 	.word	0x08007b4c
 80006a4:	08000c99 	.word	0x08000c99
 80006a8:	20004ae4 	.word	0x20004ae4

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0a0      	sub	sp, #128	; 0x80
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fd8b 	bl	80071d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2230      	movs	r2, #48	; 0x30
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 fd7c 	bl	80071d6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <SystemClock_Config+0x108>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a33      	ldr	r2, [pc, #204]	; (80007b4 <SystemClock_Config+0x108>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <SystemClock_Config+0x108>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <SystemClock_Config+0x10c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a2d      	ldr	r2, [pc, #180]	; (80007b8 <SystemClock_Config+0x10c>)
 8000704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <SystemClock_Config+0x10c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000716:	2306      	movs	r3, #6
 8000718:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071e:	2301      	movs	r3, #1
 8000720:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2310      	movs	r3, #16
 8000724:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072a:	2300      	movs	r3, #0
 800072c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072e:	2308      	movs	r3, #8
 8000730:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000732:	23b4      	movs	r3, #180	; 0xb4
 8000734:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800073a:	2304      	movs	r3, #4
 800073c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fca2 	bl	800208c <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800074e:	f000 fb01 	bl	8000d54 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000752:	f001 fc4b 	bl	8001fec <HAL_PWREx_EnableOverDrive>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800075c:	f000 fafa 	bl	8000d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000778:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800077c:	2105      	movs	r1, #5
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fef4 	bl	800256c <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800078a:	f000 fae3 	bl	8000d54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800078e:	2320      	movs	r3, #32
 8000790:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4618      	mov	r0, r3
 800079e:	f002 f8e3 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x100>
  {
    Error_Handler();
 80007a8:	f000 fad4 	bl	8000d54 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3780      	adds	r7, #128	; 0x80
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2105      	movs	r1, #5
 80007c4:	2027      	movs	r0, #39	; 0x27
 80007c6:	f001 f9e7 	bl	8001b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007ca:	2027      	movs	r0, #39	; 0x27
 80007cc:	f001 fa00 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_ADC1_Init+0x98>)
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <MX_ADC1_Init+0x9c>)
 80007ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_ADC1_Init+0x98>)
 80007ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_ADC1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_ADC1_Init+0x98>)
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <MX_ADC1_Init+0xa0>)
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_ADC1_Init+0x98>)
 8000822:	2201      	movs	r2, #1
 8000824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_ADC1_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_ADC1_Init+0x98>)
 8000830:	2201      	movs	r2, #1
 8000832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_ADC1_Init+0x98>)
 8000836:	f000 fcfb 	bl	8001230 <HAL_ADC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 fa88 	bl	8000d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000844:	2303      	movs	r3, #3
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_ADC1_Init+0x98>)
 8000856:	f000 feb9 	bl	80015cc <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000860:	f000 fa78 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20004ae8 	.word	0x20004ae8
 8000870:	40012000 	.word	0x40012000
 8000874:	0f000001 	.word	0x0f000001

08000878 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_ADC2_Init+0x98>)
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <MX_ADC2_Init+0x9c>)
 800088e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_ADC2_Init+0x98>)
 8000892:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000896:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_ADC2_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_ADC2_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_ADC2_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_ADC2_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_ADC2_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_ADC2_Init+0x98>)
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <MX_ADC2_Init+0xa0>)
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_ADC2_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_ADC2_Init+0x98>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_ADC2_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_ADC2_Init+0x98>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_ADC2_Init+0x98>)
 80008da:	f000 fca9 	bl	8001230 <HAL_ADC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008e4:	f000 fa36 	bl	8000d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008e8:	230a      	movs	r3, #10
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_ADC2_Init+0x98>)
 80008fa:	f000 fe67 	bl	80015cc <HAL_ADC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000904:	f000 fa26 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200049e8 	.word	0x200049e8
 8000914:	40012100 	.word	0x40012100
 8000918:	0f000001 	.word	0x0f000001

0800091c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_ADC3_Init+0x98>)
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <MX_ADC3_Init+0x9c>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_ADC3_Init+0x98>)
 8000936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800093a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_ADC3_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_ADC3_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_ADC3_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_ADC3_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_ADC3_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_ADC3_Init+0x98>)
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <MX_ADC3_Init+0xa0>)
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_ADC3_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_ADC3_Init+0x98>)
 800096a:	2201      	movs	r2, #1
 800096c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_ADC3_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_ADC3_Init+0x98>)
 8000978:	2201      	movs	r2, #1
 800097a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_ADC3_Init+0x98>)
 800097e:	f000 fc57 	bl	8001230 <HAL_ADC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000988:	f000 f9e4 	bl	8000d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800098c:	230d      	movs	r3, #13
 800098e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_ADC3_Init+0x98>)
 800099e:	f000 fe15 	bl	80015cc <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009a8:	f000 f9d4 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20004b34 	.word	0x20004b34
 80009b8:	40012200 	.word	0x40012200
 80009bc:	0f000001 	.word	0x0f000001

080009c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_RTC_Init+0x44>)
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <MX_RTC_Init+0x48>)
 80009c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_RTC_Init+0x44>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_RTC_Init+0x44>)
 80009d2:	227f      	movs	r2, #127	; 0x7f
 80009d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_RTC_Init+0x44>)
 80009d8:	22ff      	movs	r2, #255	; 0xff
 80009da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_RTC_Init+0x44>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_RTC_Init+0x44>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_RTC_Init+0x44>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_RTC_Init+0x44>)
 80009f0:	f002 f978 	bl	8002ce4 <HAL_RTC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80009fa:	f000 f9ab 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20004ba8 	.word	0x20004ba8
 8000a08:	40002800 	.word	0x40002800

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART3_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a44:	f002 fc70 	bl	8003328 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f981 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200049a8 	.word	0x200049a8
 8000a5c:	40004800 	.word	0x40004800

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a30      	ldr	r2, [pc, #192]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000aec:	4815      	ldr	r0, [pc, #84]	; (8000b44 <MX_GPIO_Init+0xe4>)
 8000aee:	f001 fa49 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <MX_GPIO_Init+0xe8>)
 8000af8:	f001 fa44 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000afc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <MX_GPIO_Init+0xe4>)
 8000b16:	f001 f88b 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_GPIO_Init+0xe8>)
 8000b32:	f001 f87d 	bl	8001c30 <HAL_GPIO_Init>

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40020400 	.word	0x40020400

08000b4c <LED1Task>:

/* USER CODE BEGIN 4 */
void LED1Task(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <LED1Task+0x1c>)
 8000b58:	f001 fa2d 	bl	8001fb6 <HAL_GPIO_TogglePin>
	  osDelay(1500);
 8000b5c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b60:	f003 fb94 	bl	800428c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000b64:	e7f6      	b.n	8000b54 <LED1Task+0x8>
 8000b66:	bf00      	nop
 8000b68:	40020400 	.word	0x40020400

08000b6c <LED2Task>:
  }
}

void LED2Task(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <LED2Task+0x1c>)
 8000b7a:	f001 fa1c 	bl	8001fb6 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000b7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b82:	f003 fb83 	bl	800428c <osDelay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000b86:	e7f5      	b.n	8000b74 <LED2Task+0x8>
 8000b88:	40020c00 	.word	0x40020c00

08000b8c <RotationTask>:
  }
}

void RotationTask(void *argument)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000b94:	4819      	ldr	r0, [pc, #100]	; (8000bfc <RotationTask+0x70>)
 8000b96:	f000 fb8f 	bl	80012b8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,500);
 8000b9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b9e:	4817      	ldr	r0, [pc, #92]	; (8000bfc <RotationTask+0x70>)
 8000ba0:	f000 fc83 	bl	80014aa <HAL_ADC_PollForConversion>
	  adc_value1 = HAL_ADC_GetValue(&hadc1);
 8000ba4:	4815      	ldr	r0, [pc, #84]	; (8000bfc <RotationTask+0x70>)
 8000ba6:	f000 fd04 	bl	80015b2 <HAL_ADC_GetValue>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <RotationTask+0x74>)
 8000bae:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <RotationTask+0x70>)
 8000bb2:	f000 fc47 	bl	8001444 <HAL_ADC_Stop>
	  osMutexWait(uart_mutex_id, osWaitForever);
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <RotationTask+0x78>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fb92 	bl	80042e8 <osMutexAcquire>
	  memset(uart_buf1,0,sizeof(uart_buf1));
 8000bc4:	221e      	movs	r2, #30
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	480f      	ldr	r0, [pc, #60]	; (8000c08 <RotationTask+0x7c>)
 8000bca:	f006 fb04 	bl	80071d6 <memset>
	  sprintf(uart_buf1,"     Rotation =%d \r\n", adc_value1);
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <RotationTask+0x74>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	490d      	ldr	r1, [pc, #52]	; (8000c0c <RotationTask+0x80>)
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <RotationTask+0x7c>)
 8000bd8:	f006 fb06 	bl	80071e8 <siprintf>
	  HAL_UART_Transmit_IT(&huart3,uart_buf1,sizeof(uart_buf1));
 8000bdc:	221e      	movs	r2, #30
 8000bde:	490a      	ldr	r1, [pc, #40]	; (8000c08 <RotationTask+0x7c>)
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <RotationTask+0x84>)
 8000be2:	f002 fbee 	bl	80033c2 <HAL_UART_Transmit_IT>
	  osDelay(1500);
 8000be6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000bea:	f003 fb4f 	bl	800428c <osDelay>
	  osMutexRelease(uart_mutex_id);
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <RotationTask+0x78>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fbd6 	bl	80043a4 <osMutexRelease>
  {
 8000bf8:	e7cc      	b.n	8000b94 <RotationTask+0x8>
 8000bfa:	bf00      	nop
 8000bfc:	20004ae8 	.word	0x20004ae8
 8000c00:	20004a58 	.word	0x20004a58
 8000c04:	20004a54 	.word	0x20004a54
 8000c08:	20004a34 	.word	0x20004a34
 8000c0c:	08007a44 	.word	0x08007a44
 8000c10:	200049a8 	.word	0x200049a8

08000c14 <SoundTask>:
  }
}

void SoundTask(void *argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc2);
 8000c1c:	4818      	ldr	r0, [pc, #96]	; (8000c80 <SoundTask+0x6c>)
 8000c1e:	f000 fb4b 	bl	80012b8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2,500);
 8000c22:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c26:	4816      	ldr	r0, [pc, #88]	; (8000c80 <SoundTask+0x6c>)
 8000c28:	f000 fc3f 	bl	80014aa <HAL_ADC_PollForConversion>
	  adc_value2 = HAL_ADC_GetValue(&hadc2);
 8000c2c:	4814      	ldr	r0, [pc, #80]	; (8000c80 <SoundTask+0x6c>)
 8000c2e:	f000 fcc0 	bl	80015b2 <HAL_ADC_GetValue>
 8000c32:	4602      	mov	r2, r0
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <SoundTask+0x70>)
 8000c36:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc2);
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <SoundTask+0x6c>)
 8000c3a:	f000 fc03 	bl	8001444 <HAL_ADC_Stop>
	  osMutexWait(uart_mutex_id, osWaitForever);
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <SoundTask+0x74>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f04f 31ff 	mov.w	r1, #4294967295
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fb4e 	bl	80042e8 <osMutexAcquire>
	  memset(uart_buf2,0,sizeof(uart_buf2));
 8000c4c:	221e      	movs	r2, #30
 8000c4e:	2100      	movs	r1, #0
 8000c50:	480e      	ldr	r0, [pc, #56]	; (8000c8c <SoundTask+0x78>)
 8000c52:	f006 fac0 	bl	80071d6 <memset>
	  sprintf(uart_buf2,"            Sound =%d\r\n", adc_value2);
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <SoundTask+0x70>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <SoundTask+0x7c>)
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <SoundTask+0x78>)
 8000c60:	f006 fac2 	bl	80071e8 <siprintf>
	  HAL_UART_Transmit_IT(&huart3,uart_buf2,sizeof(uart_buf2));
 8000c64:	221e      	movs	r2, #30
 8000c66:	4909      	ldr	r1, [pc, #36]	; (8000c8c <SoundTask+0x78>)
 8000c68:	480a      	ldr	r0, [pc, #40]	; (8000c94 <SoundTask+0x80>)
 8000c6a:	f002 fbaa 	bl	80033c2 <HAL_UART_Transmit_IT>
	  osDelay(100);
 8000c6e:	2064      	movs	r0, #100	; 0x64
 8000c70:	f003 fb0c 	bl	800428c <osDelay>
	  osMutexRelease(uart_mutex_id);
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SoundTask+0x74>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fb93 	bl	80043a4 <osMutexRelease>
  {
 8000c7e:	e7cd      	b.n	8000c1c <SoundTask+0x8>
 8000c80:	200049e8 	.word	0x200049e8
 8000c84:	20004b84 	.word	0x20004b84
 8000c88:	20004a54 	.word	0x20004a54
 8000c8c:	20004a5c 	.word	0x20004a5c
 8000c90:	08007a5c 	.word	0x08007a5c
 8000c94:	200049a8 	.word	0x200049a8

08000c98 <TouchTask>:
  }
}
void TouchTask(void *argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc3);
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <TouchTask+0x70>)
 8000ca2:	f000 fb09 	bl	80012b8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3,500);
 8000ca6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000caa:	4817      	ldr	r0, [pc, #92]	; (8000d08 <TouchTask+0x70>)
 8000cac:	f000 fbfd 	bl	80014aa <HAL_ADC_PollForConversion>
	  adc_value3 = HAL_ADC_GetValue(&hadc3);
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <TouchTask+0x70>)
 8000cb2:	f000 fc7e 	bl	80015b2 <HAL_ADC_GetValue>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <TouchTask+0x74>)
 8000cba:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc3);
 8000cbc:	4812      	ldr	r0, [pc, #72]	; (8000d08 <TouchTask+0x70>)
 8000cbe:	f000 fbc1 	bl	8001444 <HAL_ADC_Stop>
	  osMutexWait(uart_mutex_id, osWaitForever);
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <TouchTask+0x78>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fb0c 	bl	80042e8 <osMutexAcquire>
	  memset(uart_buf3,0,sizeof(uart_buf3));
 8000cd0:	221e      	movs	r2, #30
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	480f      	ldr	r0, [pc, #60]	; (8000d14 <TouchTask+0x7c>)
 8000cd6:	f006 fa7e 	bl	80071d6 <memset>
	  sprintf(uart_buf3,"Touch =%d\r\n", adc_value3);
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <TouchTask+0x74>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	490d      	ldr	r1, [pc, #52]	; (8000d18 <TouchTask+0x80>)
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <TouchTask+0x7c>)
 8000ce4:	f006 fa80 	bl	80071e8 <siprintf>
	  HAL_UART_Transmit_IT(&huart3,uart_buf3,sizeof(uart_buf3));
 8000ce8:	221e      	movs	r2, #30
 8000cea:	490a      	ldr	r1, [pc, #40]	; (8000d14 <TouchTask+0x7c>)
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <TouchTask+0x84>)
 8000cee:	f002 fb68 	bl	80033c2 <HAL_UART_Transmit_IT>
	  osDelay(500);
 8000cf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf6:	f003 fac9 	bl	800428c <osDelay>
	  osMutexRelease(uart_mutex_id);
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <TouchTask+0x78>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fb50 	bl	80043a4 <osMutexRelease>
  {
 8000d04:	e7cc      	b.n	8000ca0 <TouchTask+0x8>
 8000d06:	bf00      	nop
 8000d08:	20004b34 	.word	0x20004b34
 8000d0c:	20004a30 	.word	0x20004a30
 8000d10:	20004a54 	.word	0x20004a54
 8000d14:	20004b88 	.word	0x20004b88
 8000d18:	08007a74 	.word	0x08007a74
 8000d1c:	200049a8 	.word	0x200049a8

08000d20 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f003 faaf 	bl	800428c <osDelay>
 8000d2e:	e7fb      	b.n	8000d28 <StartDefaultTask+0x8>

08000d30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d42:	f000 fa55 	bl	80011f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40000800 	.word	0x40000800

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_MspInit+0x54>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_MspInit+0x54>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x54>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_MspInit+0x54>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_MspInit+0x54>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_MspInit+0x54>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	f06f 0001 	mvn.w	r0, #1
 8000daa:	f000 fef5 	bl	8001b98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	; 0x38
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a45      	ldr	r2, [pc, #276]	; (8000ef0 <HAL_ADC_MspInit+0x134>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d128      	bne.n	8000e30 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
 8000de2:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a43      	ldr	r2, [pc, #268]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	623b      	str	r3, [r7, #32]
 8000df8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a3c      	ldr	r2, [pc, #240]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e16:	2308      	movs	r3, #8
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4833      	ldr	r0, [pc, #204]	; (8000ef8 <HAL_ADC_MspInit+0x13c>)
 8000e2a:	f000 ff01 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e2e:	e05a      	b.n	8000ee6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a31      	ldr	r2, [pc, #196]	; (8000efc <HAL_ADC_MspInit+0x140>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d128      	bne.n	8000e8c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a25      	ldr	r2, [pc, #148]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e72:	2301      	movs	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	481e      	ldr	r0, [pc, #120]	; (8000f00 <HAL_ADC_MspInit+0x144>)
 8000e86:	f000 fed3 	bl	8001c30 <HAL_GPIO_Init>
}
 8000e8a:	e02c      	b.n	8000ee6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <HAL_ADC_MspInit+0x148>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d127      	bne.n	8000ee6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_ADC_MspInit+0x138>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <HAL_ADC_MspInit+0x144>)
 8000ee2:	f000 fea5 	bl	8001c30 <HAL_GPIO_Init>
}
 8000ee6:	bf00      	nop
 8000ee8:	3738      	adds	r7, #56	; 0x38
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40012100 	.word	0x40012100
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40012200 	.word	0x40012200

08000f08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <HAL_RTC_MspInit+0x24>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d102      	bne.n	8000f20 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_RTC_MspInit+0x28>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40002800 	.word	0x40002800
 8000f30:	42470e3c 	.word	0x42470e3c

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <HAL_UART_MspInit+0x84>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12c      	bne.n	8000fb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000fac:	f000 fe40 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	201e      	movs	r0, #30
 8000fda:	f000 fddd 	bl	8001b98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000fde:	201e      	movs	r0, #30
 8000fe0:	f000 fdf6 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <HAL_InitTick+0xa4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_InitTick+0xa4>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_InitTick+0xa4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001000:	f107 0210 	add.w	r2, r7, #16
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fc7a 	bl	8002904 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001010:	f001 fc50 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8001014:	4603      	mov	r3, r0
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_InitTick+0xa8>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9b      	lsrs	r3, r3, #18
 8001024:	3b01      	subs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_InitTick+0xac>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_InitTick+0xb0>)
 800102c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_InitTick+0xac>)
 8001030:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001034:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_InitTick+0xac>)
 8001038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_InitTick+0xac>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_InitTick+0xac>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <HAL_InitTick+0xac>)
 800104a:	f001 ff30 	bl	8002eae <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001054:	4806      	ldr	r0, [pc, #24]	; (8001070 <HAL_InitTick+0xac>)
 8001056:	f001 ff5f 	bl	8002f18 <HAL_TIM_Base_Start_IT>
 800105a:	4603      	mov	r3, r0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	431bde83 	.word	0x431bde83
 8001070:	20004c14 	.word	0x20004c14
 8001074:	40000800 	.word	0x40000800

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM4_IRQHandler+0x10>)
 80010b2:	f001 ff55 	bl	8002f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20004c14 	.word	0x20004c14

080010c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <USART3_IRQHandler+0x10>)
 80010c6:	f002 fa17 	bl	80034f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200049a8 	.word	0x200049a8

080010d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x50>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x16>
		heap_end = &end;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <_sbrk+0x50>)
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <_sbrk+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <_sbrk+0x50>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <_sbrk+0x50>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	466a      	mov	r2, sp
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d907      	bls.n	800110e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010fe:	f006 f835 	bl	800716c <__errno>
 8001102:	4602      	mov	r2, r0
 8001104:	230c      	movs	r3, #12
 8001106:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	e006      	b.n	800111c <_sbrk+0x48>
	}

	heap_end += incr;
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <_sbrk+0x50>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a03      	ldr	r2, [pc, #12]	; (8001124 <_sbrk+0x50>)
 8001118:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000090 	.word	0x20000090
 8001128:	20004ca0 	.word	0x20004ca0

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <SystemInit+0x28>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <SystemInit+0x28>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SystemInit+0x28>)
 8001142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001146:	609a      	str	r2, [r3, #8]
#endif
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
ldr   sp, =_estack       /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800115c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800115e:	e003      	b.n	8001168 <LoopCopyDataInit>

08001160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001166:	3104      	adds	r1, #4

08001168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800116c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001170:	d3f6      	bcc.n	8001160 <CopyDataInit>
  ldr  r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001174:	e002      	b.n	800117c <LoopFillZerobss>

08001176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001178:	f842 3b04 	str.w	r3, [r2], #4

0800117c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800117e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001180:	d3f9      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001182:	f7ff ffd3 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f005 fff7 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fa19 	bl	80005c0 <main>
  bx  lr    
 800118e:	4770      	bx	lr
ldr   sp, =_estack       /* set stack pointer */
 8001190:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001194:	08007bcc 	.word	0x08007bcc
  ldr  r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800119c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80011a0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80011a4:	20004c9c 	.word	0x20004c9c

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 fcd4 	bl	8001b82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fef2 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fdc0 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	20004c54 	.word	0x20004c54

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20004c54 	.word	0x20004c54

08001230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e033      	b.n	80012ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fdb4 	bl	8000dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001276:	f023 0302 	bic.w	r3, r3, #2
 800127a:	f043 0202 	orr.w	r2, r3, #2
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fad4 	bl	8001830 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
 800129e:	e001      	b.n	80012a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_ADC_Start+0x1a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e0a5      	b.n	800141e <HAL_ADC_Start+0x166>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d018      	beq.n	800131a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b4c      	ldr	r3, [pc, #304]	; (800142c <HAL_ADC_Start+0x174>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_ADC_Start+0x178>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800130c:	e002      	b.n	8001314 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b01      	cmp	r3, #1
 8001326:	d179      	bne.n	800141c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001352:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001366:	d106      	bne.n	8001376 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	f023 0206 	bic.w	r2, r3, #6
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
 8001374:	e002      	b.n	800137c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_ADC_Start+0x17c>)
 8001386:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001390:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	2b00      	cmp	r3, #0
 800139c:	d12a      	bne.n	80013f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a25      	ldr	r2, [pc, #148]	; (8001438 <HAL_ADC_Start+0x180>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d015      	beq.n	80013d4 <HAL_ADC_Start+0x11c>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_ADC_Start+0x184>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d105      	bne.n	80013be <HAL_ADC_Start+0x106>
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <HAL_ADC_Start+0x17c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00a      	beq.n	80013d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <HAL_ADC_Start+0x188>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d129      	bne.n	800141c <HAL_ADC_Start+0x164>
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_ADC_Start+0x17c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d823      	bhi.n	800141c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d11c      	bne.n	800141c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	e013      	b.n	800141c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_ADC_Start+0x180>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10e      	bne.n	800141c <HAL_ADC_Start+0x164>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800141a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83
 8001434:	40012300 	.word	0x40012300
 8001438:	40012000 	.word	0x40012000
 800143c:	40012100 	.word	0x40012100
 8001440:	40012200 	.word	0x40012200

08001444 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_ADC_Stop+0x16>
 8001456:	2302      	movs	r3, #2
 8001458:	e021      	b.n	800149e <HAL_ADC_Stop+0x5a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c6:	d113      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d6:	d10b      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f043 0220 	orr.w	r2, r3, #32
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e05c      	b.n	80015aa <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014f0:	f7ff fe92 	bl	8001218 <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014f6:	e01a      	b.n	800152e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fe:	d016      	beq.n	800152e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_ADC_PollForConversion+0x6c>
 8001506:	f7ff fe87 	bl	8001218 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d20b      	bcs.n	800152e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f043 0204 	orr.w	r2, r3, #4
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e03d      	b.n	80015aa <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b02      	cmp	r3, #2
 800153a:	d1dd      	bne.n	80014f8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f06f 0212 	mvn.w	r2, #18
 8001544:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d123      	bne.n	80015a8 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11f      	bne.n	80015a8 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e113      	b.n	8001810 <HAL_ADC_ConfigChannel+0x244>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d925      	bls.n	8001644 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	3b1e      	subs	r3, #30
 800160e:	2207      	movs	r2, #7
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43da      	mvns	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	400a      	ands	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68d9      	ldr	r1, [r3, #12]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	4603      	mov	r3, r0
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4403      	add	r3, r0
 8001636:	3b1e      	subs	r3, #30
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	e022      	b.n	800168a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6919      	ldr	r1, [r3, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	2207      	movs	r2, #7
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	400a      	ands	r2, r1
 8001666:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6919      	ldr	r1, [r3, #16]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	4603      	mov	r3, r0
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4403      	add	r3, r0
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b06      	cmp	r3, #6
 8001690:	d824      	bhi.n	80016dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b05      	subs	r3, #5
 80016a4:	221f      	movs	r2, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b05      	subs	r3, #5
 80016ce:	fa00 f203 	lsl.w	r2, r0, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
 80016da:	e04c      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d824      	bhi.n	800172e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b23      	subs	r3, #35	; 0x23
 80016f6:	221f      	movs	r2, #31
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43da      	mvns	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	400a      	ands	r2, r1
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b23      	subs	r3, #35	; 0x23
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
 800172c:	e023      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b41      	subs	r3, #65	; 0x41
 8001740:	221f      	movs	r2, #31
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	400a      	ands	r2, r1
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b41      	subs	r3, #65	; 0x41
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_ADC_ConfigChannel+0x250>)
 8001778:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <HAL_ADC_ConfigChannel+0x254>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d10f      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1d8>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b12      	cmp	r3, #18
 800178a:	d10b      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_ADC_ConfigChannel+0x254>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d12b      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x23a>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d003      	beq.n	80017c0 <HAL_ADC_ConfigChannel+0x1f4>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b11      	cmp	r3, #17
 80017be:	d122      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_ADC_ConfigChannel+0x258>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d111      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_ADC_ConfigChannel+0x25c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_ADC_ConfigChannel+0x260>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40012300 	.word	0x40012300
 8001820:	40012000 	.word	0x40012000
 8001824:	10000012 	.word	0x10000012
 8001828:	20000000 	.word	0x20000000
 800182c:	431bde83 	.word	0x431bde83

08001830 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001838:	4b79      	ldr	r3, [pc, #484]	; (8001a20 <ADC_Init+0x1f0>)
 800183a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	021a      	lsls	r2, r3, #8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6899      	ldr	r1, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <ADC_Init+0x1f4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d022      	beq.n	800190e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	e00f      	b.n	800192e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800192c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0202 	bic.w	r2, r2, #2
 800193c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7e1b      	ldrb	r3, [r3, #24]
 8001948:	005a      	lsls	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01b      	beq.n	8001994 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800196a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800197a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6859      	ldr	r1, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	3b01      	subs	r3, #1
 8001988:	035a      	lsls	r2, r3, #13
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	e007      	b.n	80019a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	3b01      	subs	r3, #1
 80019c0:	051a      	lsls	r2, r3, #20
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e6:	025a      	lsls	r2, r3, #9
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6899      	ldr	r1, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	029a      	lsls	r2, r3, #10
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40012300 	.word	0x40012300
 8001a24:	0f000001 	.word	0x0f000001

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ff4c 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001baa:	f7ff ff61 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	6978      	ldr	r0, [r7, #20]
 8001bb6:	f7ff ffb1 	bl	8001b1c <NVIC_EncodePriority>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff80 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff54 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d004      	beq.n	8001c0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00c      	b.n	8001c24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e177      	b.n	8001f3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f040 8166 	bne.w	8001f36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d00b      	beq.n	8001c8a <HAL_GPIO_Init+0x5a>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7e:	2b11      	cmp	r3, #17
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	d130      	bne.n	8001cec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0201 	and.w	r2, r3, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0xfc>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b12      	cmp	r3, #18
 8001d2a:	d123      	bne.n	8001d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0203 	and.w	r2, r3, #3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80c0 	beq.w	8001f36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <HAL_GPIO_Init+0x320>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a64      	ldr	r2, [pc, #400]	; (8001f50 <HAL_GPIO_Init+0x320>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_GPIO_Init+0x320>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd2:	4a60      	ldr	r2, [pc, #384]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <HAL_GPIO_Init+0x328>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d037      	beq.n	8001e6e <HAL_GPIO_Init+0x23e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a56      	ldr	r2, [pc, #344]	; (8001f5c <HAL_GPIO_Init+0x32c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d031      	beq.n	8001e6a <HAL_GPIO_Init+0x23a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a55      	ldr	r2, [pc, #340]	; (8001f60 <HAL_GPIO_Init+0x330>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d02b      	beq.n	8001e66 <HAL_GPIO_Init+0x236>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a54      	ldr	r2, [pc, #336]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d025      	beq.n	8001e62 <HAL_GPIO_Init+0x232>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a53      	ldr	r2, [pc, #332]	; (8001f68 <HAL_GPIO_Init+0x338>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01f      	beq.n	8001e5e <HAL_GPIO_Init+0x22e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_GPIO_Init+0x33c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d019      	beq.n	8001e5a <HAL_GPIO_Init+0x22a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <HAL_GPIO_Init+0x340>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0x226>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a50      	ldr	r2, [pc, #320]	; (8001f74 <HAL_GPIO_Init+0x344>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00d      	beq.n	8001e52 <HAL_GPIO_Init+0x222>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4f      	ldr	r2, [pc, #316]	; (8001f78 <HAL_GPIO_Init+0x348>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d007      	beq.n	8001e4e <HAL_GPIO_Init+0x21e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4e      	ldr	r2, [pc, #312]	; (8001f7c <HAL_GPIO_Init+0x34c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_GPIO_Init+0x21a>
 8001e46:	2309      	movs	r3, #9
 8001e48:	e012      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	e010      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e4e:	2308      	movs	r3, #8
 8001e50:	e00e      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e52:	2307      	movs	r3, #7
 8001e54:	e00c      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e56:	2306      	movs	r3, #6
 8001e58:	e00a      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	e008      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e62:	2303      	movs	r3, #3
 8001e64:	e004      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e002      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x240>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	f002 0203 	and.w	r2, r2, #3
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	4093      	lsls	r3, r2
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e80:	4934      	ldr	r1, [pc, #208]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8e:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <HAL_GPIO_Init+0x350>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb2:	4a33      	ldr	r2, [pc, #204]	; (8001f80 <HAL_GPIO_Init+0x350>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_GPIO_Init+0x350>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001edc:	4a28      	ldr	r2, [pc, #160]	; (8001f80 <HAL_GPIO_Init+0x350>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_GPIO_Init+0x350>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f06:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <HAL_GPIO_Init+0x350>)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_GPIO_Init+0x350>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <HAL_GPIO_Init+0x350>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	f67f ae84 	bls.w	8001c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f44:	bf00      	nop
 8001f46:	3724      	adds	r7, #36	; 0x24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40021400 	.word	0x40021400
 8001f70:	40021800 	.word	0x40021800
 8001f74:	40021c00 	.word	0x40021c00
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40022400 	.word	0x40022400
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	401a      	ands	r2, r3
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d104      	bne.n	8001fda <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	041a      	lsls	r2, r3, #16
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_PWREx_EnableOverDrive+0x90>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_PWREx_EnableOverDrive+0x90>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_PWREx_EnableOverDrive+0x90>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_PWREx_EnableOverDrive+0x94>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002018:	f7ff f8fe 	bl	8001218 <HAL_GetTick>
 800201c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800201e:	e009      	b.n	8002034 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002020:	f7ff f8fa 	bl	8001218 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800202e:	d901      	bls.n	8002034 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e01f      	b.n	8002074 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_PWREx_EnableOverDrive+0x98>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d1ee      	bne.n	8002020 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002048:	f7ff f8e6 	bl	8001218 <HAL_GetTick>
 800204c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800204e:	e009      	b.n	8002064 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002050:	f7ff f8e2 	bl	8001218 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800205e:	d901      	bls.n	8002064 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e007      	b.n	8002074 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_PWREx_EnableOverDrive+0x98>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002070:	d1ee      	bne.n	8002050 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	420e0040 	.word	0x420e0040
 8002084:	40007000 	.word	0x40007000
 8002088:	420e0044 	.word	0x420e0044

0800208c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e25b      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d075      	beq.n	8002196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020aa:	4ba3      	ldr	r3, [pc, #652]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d00c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4ba0      	ldr	r3, [pc, #640]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d112      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b9d      	ldr	r3, [pc, #628]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	4b99      	ldr	r3, [pc, #612]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d05b      	beq.n	8002194 <HAL_RCC_OscConfig+0x108>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d157      	bne.n	8002194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e236      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x74>
 80020f2:	4b91      	ldr	r3, [pc, #580]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a90      	ldr	r2, [pc, #576]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b8b      	ldr	r3, [pc, #556]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a8a      	ldr	r2, [pc, #552]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b88      	ldr	r3, [pc, #544]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a87      	ldr	r2, [pc, #540]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002124:	4b84      	ldr	r3, [pc, #528]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a83      	ldr	r2, [pc, #524]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b81      	ldr	r3, [pc, #516]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a80      	ldr	r2, [pc, #512]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff f868 	bl	8001218 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff f864 	bl	8001218 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1fb      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xc0>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff f854 	bl	8001218 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f850 	bl	8001218 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1e7      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b6c      	ldr	r3, [pc, #432]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0xe8>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a2:	4b65      	ldr	r3, [pc, #404]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b62      	ldr	r3, [pc, #392]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b5f      	ldr	r3, [pc, #380]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b5c      	ldr	r3, [pc, #368]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1bb      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b56      	ldr	r3, [pc, #344]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4952      	ldr	r1, [pc, #328]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b4f      	ldr	r3, [pc, #316]	; (800233c <HAL_RCC_OscConfig+0x2b0>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff f809 	bl	8001218 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff f805 	bl	8001218 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e19c      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b43      	ldr	r3, [pc, #268]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4940      	ldr	r1, [pc, #256]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b3f      	ldr	r3, [pc, #252]	; (800233c <HAL_RCC_OscConfig+0x2b0>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe ffe8 	bl	8001218 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe ffe4 	bl	8001218 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e17b      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d030      	beq.n	80022d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_RCC_OscConfig+0x2b4>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe ffc8 	bl	8001218 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7fe ffc4 	bl	8001218 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e15b      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x200>
 80022aa:	e015      	b.n	80022d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ac:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_RCC_OscConfig+0x2b4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7fe ffb1 	bl	8001218 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ba:	f7fe ffad 	bl	8001218 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e144      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a0 	beq.w	8002426 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x2b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d121      	bne.n	8002366 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_RCC_OscConfig+0x2b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_RCC_OscConfig+0x2b8>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7fe ff73 	bl	8001218 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e011      	b.n	800235a <HAL_RCC_OscConfig+0x2ce>
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	42470000 	.word	0x42470000
 8002340:	42470e80 	.word	0x42470e80
 8002344:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe ff66 	bl	8001218 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0fd      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b81      	ldr	r3, [pc, #516]	; (8002560 <HAL_RCC_OscConfig+0x4d4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d106      	bne.n	800237c <HAL_RCC_OscConfig+0x2f0>
 800236e:	4b7d      	ldr	r3, [pc, #500]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	4a7c      	ldr	r2, [pc, #496]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6713      	str	r3, [r2, #112]	; 0x70
 800237a:	e01c      	b.n	80023b6 <HAL_RCC_OscConfig+0x32a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0x312>
 8002384:	4b77      	ldr	r3, [pc, #476]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a76      	ldr	r2, [pc, #472]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	4b74      	ldr	r3, [pc, #464]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a73      	ldr	r2, [pc, #460]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_OscConfig+0x32a>
 800239e:	4b71      	ldr	r3, [pc, #452]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a70      	ldr	r2, [pc, #448]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
 80023aa:	4b6e      	ldr	r3, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a6d      	ldr	r2, [pc, #436]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 80023b0:	f023 0304 	bic.w	r3, r3, #4
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d015      	beq.n	80023ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023be:	f7fe ff2b 	bl	8001218 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7fe ff27 	bl	8001218 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0bc      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	4b61      	ldr	r3, [pc, #388]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ee      	beq.n	80023c6 <HAL_RCC_OscConfig+0x33a>
 80023e8:	e014      	b.n	8002414 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7fe ff15 	bl	8001218 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe ff11 	bl	8001218 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0a6      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	4b56      	ldr	r3, [pc, #344]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ee      	bne.n	80023f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241a:	4b52      	ldr	r3, [pc, #328]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a51      	ldr	r2, [pc, #324]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8092 	beq.w	8002554 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002430:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d05c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d141      	bne.n	80024c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <HAL_RCC_OscConfig+0x4dc>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fee5 	bl	8001218 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fee1 	bl	8001218 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e078      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002464:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	019b      	lsls	r3, r3, #6
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	3b01      	subs	r3, #1
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	4933      	ldr	r1, [pc, #204]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249a:	4b33      	ldr	r3, [pc, #204]	; (8002568 <HAL_RCC_OscConfig+0x4dc>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe feba 	bl	8001218 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe feb6 	bl	8001218 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e04d      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x41c>
 80024c6:	e045      	b.n	8002554 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_OscConfig+0x4dc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fea3 	bl	8001218 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fe9f 	bl	8001218 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e036      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x44a>
 80024f4:	e02e      	b.n	8002554 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e029      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_RCC_OscConfig+0x4d8>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	429a      	cmp	r2, r3
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d115      	bne.n	8002550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800252a:	4013      	ands	r3, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002530:	4293      	cmp	r3, r2
 8002532:	d10d      	bne.n	8002550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40007000 	.word	0x40007000
 8002564:	40023800 	.word	0x40023800
 8002568:	42470060 	.word	0x42470060

0800256c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0cc      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d90c      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b65      	ldr	r3, [pc, #404]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0b8      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c0:	4b59      	ldr	r3, [pc, #356]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a58      	ldr	r2, [pc, #352]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	494d      	ldr	r1, [pc, #308]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d044      	beq.n	800268c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d119      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e07f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d003      	beq.n	800262a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002626:	2b03      	cmp	r3, #3
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e067      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b37      	ldr	r3, [pc, #220]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4934      	ldr	r1, [pc, #208]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7fe fddc 	bl	8001218 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7fe fdd8 	bl	8001218 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e04f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d20c      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e032      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4916      	ldr	r1, [pc, #88]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	490e      	ldr	r1, [pc, #56]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026f2:	f000 f821 	bl	8002738 <HAL_RCC_GetSysClockFreq>
 80026f6:	4601      	mov	r1, r0
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	fa21 f303 	lsr.w	r3, r1, r3
 800270a:	4a09      	ldr	r2, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fc56 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023c00 	.word	0x40023c00
 8002728:	40023800 	.word	0x40023800
 800272c:	08007b70 	.word	0x08007b70
 8002730:	20000000 	.word	0x20000000
 8002734:	20000004 	.word	0x20000004

08002738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274e:	4b50      	ldr	r3, [pc, #320]	; (8002890 <HAL_RCC_GetSysClockFreq+0x158>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d007      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x32>
 800275a:	2b08      	cmp	r3, #8
 800275c:	d008      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x38>
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 808d 	bne.w	800287e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b4b      	ldr	r3, [pc, #300]	; (8002894 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002766:	60bb      	str	r3, [r7, #8]
       break;
 8002768:	e08c      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCC_GetSysClockFreq+0x160>)
 800276c:	60bb      	str	r3, [r7, #8]
      break;
 800276e:	e089      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCC_GetSysClockFreq+0x158>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002778:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800277a:	4b45      	ldr	r3, [pc, #276]	; (8002890 <HAL_RCC_GetSysClockFreq+0x158>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d023      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCC_GetSysClockFreq+0x158>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	f04f 0400 	mov.w	r4, #0
 8002790:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	ea03 0501 	and.w	r5, r3, r1
 800279c:	ea04 0602 	and.w	r6, r4, r2
 80027a0:	4a3d      	ldr	r2, [pc, #244]	; (8002898 <HAL_RCC_GetSysClockFreq+0x160>)
 80027a2:	fb02 f106 	mul.w	r1, r2, r6
 80027a6:	2200      	movs	r2, #0
 80027a8:	fb02 f205 	mul.w	r2, r2, r5
 80027ac:	440a      	add	r2, r1
 80027ae:	493a      	ldr	r1, [pc, #232]	; (8002898 <HAL_RCC_GetSysClockFreq+0x160>)
 80027b0:	fba5 0101 	umull	r0, r1, r5, r1
 80027b4:	1853      	adds	r3, r2, r1
 80027b6:	4619      	mov	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f04f 0400 	mov.w	r4, #0
 80027be:	461a      	mov	r2, r3
 80027c0:	4623      	mov	r3, r4
 80027c2:	f7fd fd65 	bl	8000290 <__aeabi_uldivmod>
 80027c6:	4603      	mov	r3, r0
 80027c8:	460c      	mov	r4, r1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e049      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCC_GetSysClockFreq+0x158>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	f04f 0400 	mov.w	r4, #0
 80027d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	ea03 0501 	and.w	r5, r3, r1
 80027e4:	ea04 0602 	and.w	r6, r4, r2
 80027e8:	4629      	mov	r1, r5
 80027ea:	4632      	mov	r2, r6
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	f04f 0400 	mov.w	r4, #0
 80027f4:	0154      	lsls	r4, r2, #5
 80027f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027fa:	014b      	lsls	r3, r1, #5
 80027fc:	4619      	mov	r1, r3
 80027fe:	4622      	mov	r2, r4
 8002800:	1b49      	subs	r1, r1, r5
 8002802:	eb62 0206 	sbc.w	r2, r2, r6
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	f04f 0400 	mov.w	r4, #0
 800280e:	0194      	lsls	r4, r2, #6
 8002810:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002814:	018b      	lsls	r3, r1, #6
 8002816:	1a5b      	subs	r3, r3, r1
 8002818:	eb64 0402 	sbc.w	r4, r4, r2
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	00e2      	lsls	r2, r4, #3
 8002826:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800282a:	00d9      	lsls	r1, r3, #3
 800282c:	460b      	mov	r3, r1
 800282e:	4614      	mov	r4, r2
 8002830:	195b      	adds	r3, r3, r5
 8002832:	eb44 0406 	adc.w	r4, r4, r6
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	02a2      	lsls	r2, r4, #10
 8002840:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002844:	0299      	lsls	r1, r3, #10
 8002846:	460b      	mov	r3, r1
 8002848:	4614      	mov	r4, r2
 800284a:	4618      	mov	r0, r3
 800284c:	4621      	mov	r1, r4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 0400 	mov.w	r4, #0
 8002854:	461a      	mov	r2, r3
 8002856:	4623      	mov	r3, r4
 8002858:	f7fd fd1a 	bl	8000290 <__aeabi_uldivmod>
 800285c:	4603      	mov	r3, r0
 800285e:	460c      	mov	r4, r1
 8002860:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_GetSysClockFreq+0x158>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	3301      	adds	r3, #1
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	60bb      	str	r3, [r7, #8]
      break;
 800287c:	e002      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002880:	60bb      	str	r3, [r7, #8]
      break;
 8002882:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002884:	68bb      	ldr	r3, [r7, #8]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	00f42400 	.word	0x00f42400
 8002898:	017d7840 	.word	0x017d7840

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4601      	mov	r1, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	08007b80 	.word	0x08007b80

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffdc 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e4:	4601      	mov	r1, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4a03      	ldr	r2, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	08007b80 	.word	0x08007b80

08002904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	220f      	movs	r2, #15
 8002912:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_GetClockConfig+0x5c>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_RCC_GetClockConfig+0x5c>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCC_GetClockConfig+0x5c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_GetClockConfig+0x5c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_RCC_GetClockConfig+0x60>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 020f 	and.w	r2, r3, #15
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	601a      	str	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d075      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800299c:	4bad      	ldr	r3, [pc, #692]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a2:	f7fe fc39 	bl	8001218 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029aa:	f7fe fc35 	bl	8001218 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e18b      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029bc:	4ba6      	ldr	r3, [pc, #664]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	019a      	lsls	r2, r3, #6
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	071b      	lsls	r3, r3, #28
 80029e0:	499d      	ldr	r1, [pc, #628]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01f      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029f4:	4b98      	ldr	r3, [pc, #608]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fa:	0f1b      	lsrs	r3, r3, #28
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	019a      	lsls	r2, r3, #6
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	071b      	lsls	r3, r3, #28
 8002a14:	4990      	ldr	r1, [pc, #576]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a1c:	4b8e      	ldr	r3, [pc, #568]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a22:	f023 021f 	bic.w	r2, r3, #31
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	498a      	ldr	r1, [pc, #552]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00d      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	019a      	lsls	r2, r3, #6
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	061b      	lsls	r3, r3, #24
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	071b      	lsls	r3, r3, #28
 8002a54:	4980      	ldr	r1, [pc, #512]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a5c:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a62:	f7fe fbd9 	bl	8001218 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a6a:	f7fe fbd5 	bl	8001218 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e12b      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a7c:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d079      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002aa0:	4b6e      	ldr	r3, [pc, #440]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe fbb7 	bl	8001218 <HAL_GetTick>
 8002aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002aae:	f7fe fbb3 	bl	8001218 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e109      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ac0:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d0ef      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d020      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ada:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	0f1b      	lsrs	r3, r3, #28
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	019a      	lsls	r2, r3, #6
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	431a      	orrs	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	071b      	lsls	r3, r3, #28
 8002afa:	4957      	ldr	r1, [pc, #348]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b02:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	4950      	ldr	r1, [pc, #320]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01e      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b28:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	0e1b      	lsrs	r3, r3, #24
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	019a      	lsls	r2, r3, #6
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	071b      	lsls	r3, r3, #28
 8002b48:	4943      	ldr	r1, [pc, #268]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	493e      	ldr	r1, [pc, #248]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fb54 	bl	8001218 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b74:	f7fe fb50 	bl	8001218 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0a6      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b92:	d1ef      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 808d 	beq.w	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bca:	f7fe fb25 	bl	8001218 <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bd2:	f7fe fb21 	bl	8001218 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e077      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d039      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d032      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c24:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d11e      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe faef 	bl	8001218 <HAL_GetTick>
 8002c3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e014      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe faeb 	bl	8001218 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d90b      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e03f      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002c54:	42470068 	.word	0x42470068
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	42470070 	.word	0x42470070
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c68:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0e4      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c80:	d10d      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c96:	4911      	ldr	r1, [pc, #68]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
 8002c9c:	e005      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ca4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ca8:	6093      	str	r3, [r2, #8]
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb6:	4909      	ldr	r1, [pc, #36]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	424711e0 	.word	0x424711e0

08002ce4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e083      	b.n	8002dfe <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7f5b      	ldrb	r3, [r3, #29]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe f8fe 	bl	8000f08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22ca      	movs	r2, #202	; 0xca
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2253      	movs	r2, #83	; 0x53
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f897 	bl	8002e56 <RTC_EnterInitMode>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	22ff      	movs	r2, #255	; 0xff
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e05e      	b.n	8002dfe <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d52:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68d2      	ldr	r2, [r2, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6919      	ldr	r1, [r3, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	041a      	lsls	r2, r3, #16
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10e      	bne.n	8002dcc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f829 	bl	8002e06 <HAL_RTC_WaitForSynchro>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	22ff      	movs	r2, #255	; 0xff
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e018      	b.n	8002dfe <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	22ff      	movs	r2, #255	; 0xff
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e22:	f7fe f9f9 	bl	8001218 <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e28:	e009      	b.n	8002e3e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e2a:	f7fe f9f5 	bl	8001218 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e38:	d901      	bls.n	8002e3e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e007      	b.n	8002e4e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ee      	beq.n	8002e2a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d119      	bne.n	8002ea4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e7a:	f7fe f9cd 	bl	8001218 <HAL_GetTick>
 8002e7e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e80:	e009      	b.n	8002e96 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e82:	f7fe f9c9 	bl	8001218 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e90:	d901      	bls.n	8002e96 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e007      	b.n	8002ea6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ee      	beq.n	8002e82 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e01d      	b.n	8002efc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f815 	bl	8002f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f000 f967 	bl	80031c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d007      	beq.n	8002f52 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0202 	mvn.w	r2, #2
 8002f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8ee 	bl	8003184 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f8e0 	bl	8003170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f8f1 	bl	8003198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0204 	mvn.w	r2, #4
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f8c4 	bl	8003184 <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8b6 	bl	8003170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f8c7 	bl	8003198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b08      	cmp	r3, #8
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b08      	cmp	r3, #8
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0208 	mvn.w	r2, #8
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f89a 	bl	8003184 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f88c 	bl	8003170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f89d 	bl	8003198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b10      	cmp	r3, #16
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b10      	cmp	r3, #16
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0210 	mvn.w	r2, #16
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2208      	movs	r2, #8
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f870 	bl	8003184 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f862 	bl	8003170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f873 	bl	8003198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0201 	mvn.w	r2, #1
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fe26 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f902 	bl	8003314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f838 	bl	80031ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b20      	cmp	r3, #32
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b20      	cmp	r3, #32
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0220 	mvn.w	r2, #32
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8cc 	bl	8003300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d00f      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a3d      	ldr	r2, [pc, #244]	; (80032d8 <TIM_Base_SetConfig+0x118>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00b      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3c      	ldr	r2, [pc, #240]	; (80032dc <TIM_Base_SetConfig+0x11c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3b      	ldr	r2, [pc, #236]	; (80032e0 <TIM_Base_SetConfig+0x120>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3a      	ldr	r2, [pc, #232]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d108      	bne.n	8003212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2f      	ldr	r2, [pc, #188]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d027      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <TIM_Base_SetConfig+0x118>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d023      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <TIM_Base_SetConfig+0x11c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01f      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <TIM_Base_SetConfig+0x120>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d017      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <TIM_Base_SetConfig+0x128>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <TIM_Base_SetConfig+0x12c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00f      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <TIM_Base_SetConfig+0x130>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <TIM_Base_SetConfig+0x134>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <TIM_Base_SetConfig+0x138>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <TIM_Base_SetConfig+0x13c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0xf8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d103      	bne.n	80032c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	615a      	str	r2, [r3, #20]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40000c00 	.word	0x40000c00
 80032e4:	40010400 	.word	0x40010400
 80032e8:	40014000 	.word	0x40014000
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800
 80032f4:	40001800 	.word	0x40001800
 80032f8:	40001c00 	.word	0x40001c00
 80032fc:	40002000 	.word	0x40002000

08003300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e03f      	b.n	80033ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fdf0 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	; 0x24
 8003358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 faf9 	bl	8003964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d130      	bne.n	800343e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Transmit_IT+0x26>
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e029      	b.n	8003440 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Transmit_IT+0x38>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e022      	b.n	8003440 <HAL_UART_Transmit_IT+0x7e>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2221      	movs	r2, #33	; 0x21
 800341e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003438:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b20      	cmp	r3, #32
 8003464:	d140      	bne.n	80034e8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_UART_Receive_IT+0x26>
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e039      	b.n	80034ea <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_UART_Receive_IT+0x38>
 8003480:	2302      	movs	r3, #2
 8003482:	e032      	b.n	80034ea <HAL_UART_Receive_IT+0x9e>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	88fa      	ldrh	r2, [r7, #6]
 8003496:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2222      	movs	r2, #34	; 0x22
 80034a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_UART_IRQHandler+0x52>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f98c 	bl	8003860 <UART_Receive_IT>
      return;
 8003548:	e0d1      	b.n	80036ee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80b0 	beq.w	80036b2 <HAL_UART_IRQHandler+0x1ba>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <HAL_UART_IRQHandler+0x70>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a5 	beq.w	80036b2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_UART_IRQHandler+0x90>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_UART_IRQHandler+0xb0>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	f043 0202 	orr.w	r2, r3, #2
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_UART_IRQHandler+0xd0>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00f      	beq.n	80035f2 <HAL_UART_IRQHandler+0xfa>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_UART_IRQHandler+0xee>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	f043 0208 	orr.w	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d078      	beq.n	80036ec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_UART_IRQHandler+0x11c>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f926 	bl	8003860 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_UART_IRQHandler+0x144>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d031      	beq.n	80036a0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f86f 	bl	8003720 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d123      	bne.n	8003698 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800365e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_UART_IRQHandler+0x1fc>)
 800366e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fab9 	bl	8001bec <HAL_DMA_Abort_IT>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d016      	beq.n	80036ae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800368a:	4610      	mov	r0, r2
 800368c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368e:	e00e      	b.n	80036ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f83b 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003696:	e00a      	b.n	80036ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f837 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369e:	e006      	b.n	80036ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f833 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80036ac:	e01e      	b.n	80036ec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ae:	bf00      	nop
    return;
 80036b0:	e01c      	b.n	80036ec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_UART_IRQHandler+0x1d6>
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f85c 	bl	8003784 <UART_Transmit_IT>
    return;
 80036cc:	e00f      	b.n	80036ee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_UART_IRQHandler+0x1f6>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8a4 	bl	8003830 <UART_EndTransmit_IT>
    return;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_UART_IRQHandler+0x1f6>
    return;
 80036ec:	bf00      	nop
  }
}
 80036ee:	3720      	adds	r7, #32
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	0800375d 	.word	0x0800375d

080036f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003736:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff ffc8 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b21      	cmp	r3, #33	; 0x21
 8003796:	d144      	bne.n	8003822 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a0:	d11a      	bne.n	80037d8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	1c9a      	adds	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	621a      	str	r2, [r3, #32]
 80037ca:	e00e      	b.n	80037ea <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]
 80037d6:	e008      	b.n	80037ea <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	1c59      	adds	r1, r3, #1
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6211      	str	r1, [r2, #32]
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4619      	mov	r1, r3
 80037f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800380c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800381c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003846:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff51 	bl	80036f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b22      	cmp	r3, #34	; 0x22
 8003872:	d171      	bne.n	8003958 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d123      	bne.n	80038c6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10e      	bne.n	80038aa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b29b      	uxth	r3, r3
 8003894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	1c9a      	adds	r2, r3, #2
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
 80038a8:	e029      	b.n	80038fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
 80038c4:	e01b      	b.n	80038fe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6858      	ldr	r0, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	1c59      	adds	r1, r3, #1
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6291      	str	r1, [r2, #40]	; 0x28
 80038de:	b2c2      	uxtb	r2, r0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e00c      	b.n	80038fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	1c58      	adds	r0, r3, #1
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	6288      	str	r0, [r1, #40]	; 0x28
 80038f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29b      	uxth	r3, r3
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4619      	mov	r1, r3
 800390c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800390e:	2b00      	cmp	r3, #0
 8003910:	d120      	bne.n	8003954 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0220 	bic.w	r2, r2, #32
 8003920:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003930:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fc fe20 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e002      	b.n	800395a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039a6:	f023 030c 	bic.w	r3, r3, #12
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	68f9      	ldr	r1, [r7, #12]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d2:	f040 818b 	bne.w	8003cec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4ac1      	ldr	r2, [pc, #772]	; (8003ce0 <UART_SetConfig+0x37c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d005      	beq.n	80039ec <UART_SetConfig+0x88>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4abf      	ldr	r2, [pc, #764]	; (8003ce4 <UART_SetConfig+0x380>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	f040 80bd 	bne.w	8003b66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ec:	f7fe ff76 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80039f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	461d      	mov	r5, r3
 80039f6:	f04f 0600 	mov.w	r6, #0
 80039fa:	46a8      	mov	r8, r5
 80039fc:	46b1      	mov	r9, r6
 80039fe:	eb18 0308 	adds.w	r3, r8, r8
 8003a02:	eb49 0409 	adc.w	r4, r9, r9
 8003a06:	4698      	mov	r8, r3
 8003a08:	46a1      	mov	r9, r4
 8003a0a:	eb18 0805 	adds.w	r8, r8, r5
 8003a0e:	eb49 0906 	adc.w	r9, r9, r6
 8003a12:	f04f 0100 	mov.w	r1, #0
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a26:	4688      	mov	r8, r1
 8003a28:	4691      	mov	r9, r2
 8003a2a:	eb18 0005 	adds.w	r0, r8, r5
 8003a2e:	eb49 0106 	adc.w	r1, r9, r6
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	461d      	mov	r5, r3
 8003a38:	f04f 0600 	mov.w	r6, #0
 8003a3c:	196b      	adds	r3, r5, r5
 8003a3e:	eb46 0406 	adc.w	r4, r6, r6
 8003a42:	461a      	mov	r2, r3
 8003a44:	4623      	mov	r3, r4
 8003a46:	f7fc fc23 	bl	8000290 <__aeabi_uldivmod>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4ba5      	ldr	r3, [pc, #660]	; (8003ce8 <UART_SetConfig+0x384>)
 8003a52:	fba3 2302 	umull	r2, r3, r3, r2
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	461d      	mov	r5, r3
 8003a60:	f04f 0600 	mov.w	r6, #0
 8003a64:	46a9      	mov	r9, r5
 8003a66:	46b2      	mov	sl, r6
 8003a68:	eb19 0309 	adds.w	r3, r9, r9
 8003a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a70:	4699      	mov	r9, r3
 8003a72:	46a2      	mov	sl, r4
 8003a74:	eb19 0905 	adds.w	r9, r9, r5
 8003a78:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a90:	4689      	mov	r9, r1
 8003a92:	4692      	mov	sl, r2
 8003a94:	eb19 0005 	adds.w	r0, r9, r5
 8003a98:	eb4a 0106 	adc.w	r1, sl, r6
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	461d      	mov	r5, r3
 8003aa2:	f04f 0600 	mov.w	r6, #0
 8003aa6:	196b      	adds	r3, r5, r5
 8003aa8:	eb46 0406 	adc.w	r4, r6, r6
 8003aac:	461a      	mov	r2, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	f7fc fbee 	bl	8000290 <__aeabi_uldivmod>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b8b      	ldr	r3, [pc, #556]	; (8003ce8 <UART_SetConfig+0x384>)
 8003abc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	2164      	movs	r1, #100	; 0x64
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	3332      	adds	r3, #50	; 0x32
 8003ace:	4a86      	ldr	r2, [pc, #536]	; (8003ce8 <UART_SetConfig+0x384>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003adc:	4498      	add	r8, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	461d      	mov	r5, r3
 8003ae2:	f04f 0600 	mov.w	r6, #0
 8003ae6:	46a9      	mov	r9, r5
 8003ae8:	46b2      	mov	sl, r6
 8003aea:	eb19 0309 	adds.w	r3, r9, r9
 8003aee:	eb4a 040a 	adc.w	r4, sl, sl
 8003af2:	4699      	mov	r9, r3
 8003af4:	46a2      	mov	sl, r4
 8003af6:	eb19 0905 	adds.w	r9, r9, r5
 8003afa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003afe:	f04f 0100 	mov.w	r1, #0
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b12:	4689      	mov	r9, r1
 8003b14:	4692      	mov	sl, r2
 8003b16:	eb19 0005 	adds.w	r0, r9, r5
 8003b1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	461d      	mov	r5, r3
 8003b24:	f04f 0600 	mov.w	r6, #0
 8003b28:	196b      	adds	r3, r5, r5
 8003b2a:	eb46 0406 	adc.w	r4, r6, r6
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4623      	mov	r3, r4
 8003b32:	f7fc fbad 	bl	8000290 <__aeabi_uldivmod>
 8003b36:	4603      	mov	r3, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <UART_SetConfig+0x384>)
 8003b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2164      	movs	r1, #100	; 0x64
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a65      	ldr	r2, [pc, #404]	; (8003ce8 <UART_SetConfig+0x384>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 0207 	and.w	r2, r3, #7
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4442      	add	r2, r8
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	e26f      	b.n	8004046 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b66:	f7fe fea5 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003b6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	461d      	mov	r5, r3
 8003b70:	f04f 0600 	mov.w	r6, #0
 8003b74:	46a8      	mov	r8, r5
 8003b76:	46b1      	mov	r9, r6
 8003b78:	eb18 0308 	adds.w	r3, r8, r8
 8003b7c:	eb49 0409 	adc.w	r4, r9, r9
 8003b80:	4698      	mov	r8, r3
 8003b82:	46a1      	mov	r9, r4
 8003b84:	eb18 0805 	adds.w	r8, r8, r5
 8003b88:	eb49 0906 	adc.w	r9, r9, r6
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ba0:	4688      	mov	r8, r1
 8003ba2:	4691      	mov	r9, r2
 8003ba4:	eb18 0005 	adds.w	r0, r8, r5
 8003ba8:	eb49 0106 	adc.w	r1, r9, r6
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	f04f 0600 	mov.w	r6, #0
 8003bb6:	196b      	adds	r3, r5, r5
 8003bb8:	eb46 0406 	adc.w	r4, r6, r6
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	f7fc fb66 	bl	8000290 <__aeabi_uldivmod>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <UART_SetConfig+0x384>)
 8003bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	461d      	mov	r5, r3
 8003bda:	f04f 0600 	mov.w	r6, #0
 8003bde:	46a9      	mov	r9, r5
 8003be0:	46b2      	mov	sl, r6
 8003be2:	eb19 0309 	adds.w	r3, r9, r9
 8003be6:	eb4a 040a 	adc.w	r4, sl, sl
 8003bea:	4699      	mov	r9, r3
 8003bec:	46a2      	mov	sl, r4
 8003bee:	eb19 0905 	adds.w	r9, r9, r5
 8003bf2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c0a:	4689      	mov	r9, r1
 8003c0c:	4692      	mov	sl, r2
 8003c0e:	eb19 0005 	adds.w	r0, r9, r5
 8003c12:	eb4a 0106 	adc.w	r1, sl, r6
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	f04f 0600 	mov.w	r6, #0
 8003c20:	196b      	adds	r3, r5, r5
 8003c22:	eb46 0406 	adc.w	r4, r6, r6
 8003c26:	461a      	mov	r2, r3
 8003c28:	4623      	mov	r3, r4
 8003c2a:	f7fc fb31 	bl	8000290 <__aeabi_uldivmod>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	460c      	mov	r4, r1
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <UART_SetConfig+0x384>)
 8003c36:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2164      	movs	r1, #100	; 0x64
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	3332      	adds	r3, #50	; 0x32
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <UART_SetConfig+0x384>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c56:	4498      	add	r8, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	f04f 0600 	mov.w	r6, #0
 8003c60:	46a9      	mov	r9, r5
 8003c62:	46b2      	mov	sl, r6
 8003c64:	eb19 0309 	adds.w	r3, r9, r9
 8003c68:	eb4a 040a 	adc.w	r4, sl, sl
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	46a2      	mov	sl, r4
 8003c70:	eb19 0905 	adds.w	r9, r9, r5
 8003c74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c8c:	4689      	mov	r9, r1
 8003c8e:	4692      	mov	sl, r2
 8003c90:	eb19 0005 	adds.w	r0, r9, r5
 8003c94:	eb4a 0106 	adc.w	r1, sl, r6
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	461d      	mov	r5, r3
 8003c9e:	f04f 0600 	mov.w	r6, #0
 8003ca2:	196b      	adds	r3, r5, r5
 8003ca4:	eb46 0406 	adc.w	r4, r6, r6
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	f7fc faf0 	bl	8000290 <__aeabi_uldivmod>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <UART_SetConfig+0x384>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	2164      	movs	r1, #100	; 0x64
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	3332      	adds	r3, #50	; 0x32
 8003cca:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <UART_SetConfig+0x384>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f003 0207 	and.w	r2, r3, #7
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4442      	add	r2, r8
 8003cdc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cde:	e1b2      	b.n	8004046 <UART_SetConfig+0x6e2>
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40011400 	.word	0x40011400
 8003ce8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4ad7      	ldr	r2, [pc, #860]	; (8004050 <UART_SetConfig+0x6ec>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d005      	beq.n	8003d02 <UART_SetConfig+0x39e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4ad6      	ldr	r2, [pc, #856]	; (8004054 <UART_SetConfig+0x6f0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	f040 80d1 	bne.w	8003ea4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d02:	f7fe fdeb 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003d06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	469a      	mov	sl, r3
 8003d0c:	f04f 0b00 	mov.w	fp, #0
 8003d10:	46d0      	mov	r8, sl
 8003d12:	46d9      	mov	r9, fp
 8003d14:	eb18 0308 	adds.w	r3, r8, r8
 8003d18:	eb49 0409 	adc.w	r4, r9, r9
 8003d1c:	4698      	mov	r8, r3
 8003d1e:	46a1      	mov	r9, r4
 8003d20:	eb18 080a 	adds.w	r8, r8, sl
 8003d24:	eb49 090b 	adc.w	r9, r9, fp
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d3c:	4688      	mov	r8, r1
 8003d3e:	4691      	mov	r9, r2
 8003d40:	eb1a 0508 	adds.w	r5, sl, r8
 8003d44:	eb4b 0609 	adc.w	r6, fp, r9
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	f04f 0400 	mov.w	r4, #0
 8003d5a:	0094      	lsls	r4, r2, #2
 8003d5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	461a      	mov	r2, r3
 8003d64:	4623      	mov	r3, r4
 8003d66:	4628      	mov	r0, r5
 8003d68:	4631      	mov	r1, r6
 8003d6a:	f7fc fa91 	bl	8000290 <__aeabi_uldivmod>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	461a      	mov	r2, r3
 8003d74:	4bb8      	ldr	r3, [pc, #736]	; (8004058 <UART_SetConfig+0x6f4>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	469b      	mov	fp, r3
 8003d84:	f04f 0c00 	mov.w	ip, #0
 8003d88:	46d9      	mov	r9, fp
 8003d8a:	46e2      	mov	sl, ip
 8003d8c:	eb19 0309 	adds.w	r3, r9, r9
 8003d90:	eb4a 040a 	adc.w	r4, sl, sl
 8003d94:	4699      	mov	r9, r3
 8003d96:	46a2      	mov	sl, r4
 8003d98:	eb19 090b 	adds.w	r9, r9, fp
 8003d9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003db4:	4689      	mov	r9, r1
 8003db6:	4692      	mov	sl, r2
 8003db8:	eb1b 0509 	adds.w	r5, fp, r9
 8003dbc:	eb4c 060a 	adc.w	r6, ip, sl
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	f04f 0400 	mov.w	r4, #0
 8003dd2:	0094      	lsls	r4, r2, #2
 8003dd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dd8:	008b      	lsls	r3, r1, #2
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	4631      	mov	r1, r6
 8003de2:	f7fc fa55 	bl	8000290 <__aeabi_uldivmod>
 8003de6:	4603      	mov	r3, r0
 8003de8:	460c      	mov	r4, r1
 8003dea:	461a      	mov	r2, r3
 8003dec:	4b9a      	ldr	r3, [pc, #616]	; (8004058 <UART_SetConfig+0x6f4>)
 8003dee:	fba3 1302 	umull	r1, r3, r3, r2
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2164      	movs	r1, #100	; 0x64
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	3332      	adds	r3, #50	; 0x32
 8003e00:	4a95      	ldr	r2, [pc, #596]	; (8004058 <UART_SetConfig+0x6f4>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0c:	4498      	add	r8, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	469b      	mov	fp, r3
 8003e12:	f04f 0c00 	mov.w	ip, #0
 8003e16:	46d9      	mov	r9, fp
 8003e18:	46e2      	mov	sl, ip
 8003e1a:	eb19 0309 	adds.w	r3, r9, r9
 8003e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e22:	4699      	mov	r9, r3
 8003e24:	46a2      	mov	sl, r4
 8003e26:	eb19 090b 	adds.w	r9, r9, fp
 8003e2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e42:	4689      	mov	r9, r1
 8003e44:	4692      	mov	sl, r2
 8003e46:	eb1b 0509 	adds.w	r5, fp, r9
 8003e4a:	eb4c 060a 	adc.w	r6, ip, sl
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4619      	mov	r1, r3
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	f04f 0400 	mov.w	r4, #0
 8003e60:	0094      	lsls	r4, r2, #2
 8003e62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e66:	008b      	lsls	r3, r1, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	4631      	mov	r1, r6
 8003e70:	f7fc fa0e 	bl	8000290 <__aeabi_uldivmod>
 8003e74:	4603      	mov	r3, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b77      	ldr	r3, [pc, #476]	; (8004058 <UART_SetConfig+0x6f4>)
 8003e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	2164      	movs	r1, #100	; 0x64
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	3332      	adds	r3, #50	; 0x32
 8003e8e:	4a72      	ldr	r2, [pc, #456]	; (8004058 <UART_SetConfig+0x6f4>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4442      	add	r2, r8
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	e0d0      	b.n	8004046 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7fe fd06 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	469a      	mov	sl, r3
 8003eae:	f04f 0b00 	mov.w	fp, #0
 8003eb2:	46d0      	mov	r8, sl
 8003eb4:	46d9      	mov	r9, fp
 8003eb6:	eb18 0308 	adds.w	r3, r8, r8
 8003eba:	eb49 0409 	adc.w	r4, r9, r9
 8003ebe:	4698      	mov	r8, r3
 8003ec0:	46a1      	mov	r9, r4
 8003ec2:	eb18 080a 	adds.w	r8, r8, sl
 8003ec6:	eb49 090b 	adc.w	r9, r9, fp
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ed6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ede:	4688      	mov	r8, r1
 8003ee0:	4691      	mov	r9, r2
 8003ee2:	eb1a 0508 	adds.w	r5, sl, r8
 8003ee6:	eb4b 0609 	adc.w	r6, fp, r9
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	f04f 0400 	mov.w	r4, #0
 8003efc:	0094      	lsls	r4, r2, #2
 8003efe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f02:	008b      	lsls	r3, r1, #2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4623      	mov	r3, r4
 8003f08:	4628      	mov	r0, r5
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	f7fc f9c0 	bl	8000290 <__aeabi_uldivmod>
 8003f10:	4603      	mov	r3, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b50      	ldr	r3, [pc, #320]	; (8004058 <UART_SetConfig+0x6f4>)
 8003f18:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	469b      	mov	fp, r3
 8003f26:	f04f 0c00 	mov.w	ip, #0
 8003f2a:	46d9      	mov	r9, fp
 8003f2c:	46e2      	mov	sl, ip
 8003f2e:	eb19 0309 	adds.w	r3, r9, r9
 8003f32:	eb4a 040a 	adc.w	r4, sl, sl
 8003f36:	4699      	mov	r9, r3
 8003f38:	46a2      	mov	sl, r4
 8003f3a:	eb19 090b 	adds.w	r9, r9, fp
 8003f3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f56:	4689      	mov	r9, r1
 8003f58:	4692      	mov	sl, r2
 8003f5a:	eb1b 0509 	adds.w	r5, fp, r9
 8003f5e:	eb4c 060a 	adc.w	r6, ip, sl
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4619      	mov	r1, r3
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	f04f 0400 	mov.w	r4, #0
 8003f74:	0094      	lsls	r4, r2, #2
 8003f76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f7a:	008b      	lsls	r3, r1, #2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	4628      	mov	r0, r5
 8003f82:	4631      	mov	r1, r6
 8003f84:	f7fc f984 	bl	8000290 <__aeabi_uldivmod>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4b32      	ldr	r3, [pc, #200]	; (8004058 <UART_SetConfig+0x6f4>)
 8003f90:	fba3 1302 	umull	r1, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2164      	movs	r1, #100	; 0x64
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <UART_SetConfig+0x6f4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fae:	4498      	add	r8, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	469b      	mov	fp, r3
 8003fb4:	f04f 0c00 	mov.w	ip, #0
 8003fb8:	46d9      	mov	r9, fp
 8003fba:	46e2      	mov	sl, ip
 8003fbc:	eb19 0309 	adds.w	r3, r9, r9
 8003fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	46a2      	mov	sl, r4
 8003fc8:	eb19 090b 	adds.w	r9, r9, fp
 8003fcc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe4:	4689      	mov	r9, r1
 8003fe6:	4692      	mov	sl, r2
 8003fe8:	eb1b 0509 	adds.w	r5, fp, r9
 8003fec:	eb4c 060a 	adc.w	r6, ip, sl
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	f04f 0400 	mov.w	r4, #0
 8004002:	0094      	lsls	r4, r2, #2
 8004004:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004008:	008b      	lsls	r3, r1, #2
 800400a:	461a      	mov	r2, r3
 800400c:	4623      	mov	r3, r4
 800400e:	4628      	mov	r0, r5
 8004010:	4631      	mov	r1, r6
 8004012:	f7fc f93d 	bl	8000290 <__aeabi_uldivmod>
 8004016:	4603      	mov	r3, r0
 8004018:	460c      	mov	r4, r1
 800401a:	461a      	mov	r2, r3
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <UART_SetConfig+0x6f4>)
 800401e:	fba3 1302 	umull	r1, r3, r3, r2
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	2164      	movs	r1, #100	; 0x64
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	3332      	adds	r3, #50	; 0x32
 8004030:	4a09      	ldr	r2, [pc, #36]	; (8004058 <UART_SetConfig+0x6f4>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4442      	add	r2, r8
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	e7ff      	b.n	8004046 <UART_SetConfig+0x6e2>
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004050:	40011000 	.word	0x40011000
 8004054:	40011400 	.word	0x40011400
 8004058:	51eb851f 	.word	0x51eb851f

0800405c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004072:	f3ef 8305 	mrs	r3, IPSR
 8004076:	60bb      	str	r3, [r7, #8]
  return(result);
 8004078:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407e:	f3ef 8310 	mrs	r3, PRIMASK
 8004082:	607b      	str	r3, [r7, #4]
  return(result);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d105      	bne.n	8004096 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800408a:	f3ef 8311 	mrs	r3, BASEPRI
 800408e:	603b      	str	r3, [r7, #0]
  return(result);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <osKernelInitialize+0x3a>
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <osKernelInitialize+0x64>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d103      	bne.n	80040a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800409e:	f06f 0305 	mvn.w	r3, #5
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e00c      	b.n	80040c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <osKernelInitialize+0x64>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <osKernelInitialize+0x64>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e002      	b.n	80040c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040c0:	68fb      	ldr	r3, [r7, #12]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000094 	.word	0x20000094

080040d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040da:	f3ef 8305 	mrs	r3, IPSR
 80040de:	60bb      	str	r3, [r7, #8]
  return(result);
 80040e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ea:	607b      	str	r3, [r7, #4]
  return(result);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040f2:	f3ef 8311 	mrs	r3, BASEPRI
 80040f6:	603b      	str	r3, [r7, #0]
  return(result);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <osKernelStart+0x3a>
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <osKernelStart+0x68>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d103      	bne.n	800410e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004106:	f06f 0305 	mvn.w	r3, #5
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e010      	b.n	8004130 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <osKernelStart+0x68>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d109      	bne.n	800412a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004116:	f7ff ffa1 	bl	800405c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <osKernelStart+0x68>)
 800411c:	2202      	movs	r2, #2
 800411e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004120:	f001 faa6 	bl	8005670 <vTaskStartScheduler>
      stat = osOK;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e002      	b.n	8004130 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004130:	68fb      	ldr	r3, [r7, #12]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000094 	.word	0x20000094

08004140 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b090      	sub	sp, #64	; 0x40
 8004144:	af04      	add	r7, sp, #16
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004150:	f3ef 8305 	mrs	r3, IPSR
 8004154:	61fb      	str	r3, [r7, #28]
  return(result);
 8004156:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004158:	2b00      	cmp	r3, #0
 800415a:	f040 808f 	bne.w	800427c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415e:	f3ef 8310 	mrs	r3, PRIMASK
 8004162:	61bb      	str	r3, [r7, #24]
  return(result);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d105      	bne.n	8004176 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800416a:	f3ef 8311 	mrs	r3, BASEPRI
 800416e:	617b      	str	r3, [r7, #20]
  return(result);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <osThreadNew+0x3e>
 8004176:	4b44      	ldr	r3, [pc, #272]	; (8004288 <osThreadNew+0x148>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d07e      	beq.n	800427c <osThreadNew+0x13c>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d07b      	beq.n	800427c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004188:	2318      	movs	r3, #24
 800418a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295
 8004194:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d045      	beq.n	8004228 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <osThreadNew+0x6a>
        name = attr->name;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <osThreadNew+0x90>
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	2b38      	cmp	r3, #56	; 0x38
 80041c2:	d805      	bhi.n	80041d0 <osThreadNew+0x90>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <osThreadNew+0x94>
        return (NULL);
 80041d0:	2300      	movs	r3, #0
 80041d2:	e054      	b.n	800427e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <osThreadNew+0xca>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b5b      	cmp	r3, #91	; 0x5b
 80041f2:	d90a      	bls.n	800420a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d006      	beq.n	800420a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <osThreadNew+0xca>
        mem = 1;
 8004204:	2301      	movs	r3, #1
 8004206:	623b      	str	r3, [r7, #32]
 8004208:	e010      	b.n	800422c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <osThreadNew+0xec>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d108      	bne.n	800422c <osThreadNew+0xec>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <osThreadNew+0xec>
          mem = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	623b      	str	r3, [r7, #32]
 8004226:	e001      	b.n	800422c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d110      	bne.n	8004254 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800423a:	9202      	str	r2, [sp, #8]
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f001 f83f 	bl	80052cc <xTaskCreateStatic>
 800424e:	4603      	mov	r3, r0
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	e013      	b.n	800427c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d110      	bne.n	800427c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	b29a      	uxth	r2, r3
 800425e:	f107 0310 	add.w	r3, r7, #16
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f001 f887 	bl	8005380 <xTaskCreate>
 8004272:	4603      	mov	r3, r0
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <osThreadNew+0x13c>
          hTask = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800427c:	693b      	ldr	r3, [r7, #16]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3730      	adds	r7, #48	; 0x30
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000094 	.word	0x20000094

0800428c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004294:	f3ef 8305 	mrs	r3, IPSR
 8004298:	613b      	str	r3, [r7, #16]
  return(result);
 800429a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10f      	bne.n	80042c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a0:	f3ef 8310 	mrs	r3, PRIMASK
 80042a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042ac:	f3ef 8311 	mrs	r3, BASEPRI
 80042b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <osDelay+0x3c>
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <osDelay+0x58>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d103      	bne.n	80042c8 <osDelay+0x3c>
    stat = osErrorISR;
 80042c0:	f06f 0305 	mvn.w	r3, #5
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e007      	b.n	80042d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 f998 	bl	8005608 <vTaskDelay>
    }
  }

  return (stat);
 80042d8:	697b      	ldr	r3, [r7, #20]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000094 	.word	0x20000094

080042e8 <osMutexAcquire>:
  }

  return ((osMutexId_t)hMutex);
}

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004306:	f3ef 8305 	mrs	r3, IPSR
 800430a:	613b      	str	r3, [r7, #16]
  return(result);
 800430c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10f      	bne.n	8004332 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004312:	f3ef 8310 	mrs	r3, PRIMASK
 8004316:	60fb      	str	r3, [r7, #12]
  return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800431e:	f3ef 8311 	mrs	r3, BASEPRI
 8004322:	60bb      	str	r3, [r7, #8]
  return(result);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <osMutexAcquire+0x52>
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <osMutexAcquire+0xb8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d103      	bne.n	800433a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004332:	f06f 0305 	mvn.w	r3, #5
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	e02c      	b.n	8004394 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d103      	bne.n	8004348 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004340:	f06f 0303 	mvn.w	r3, #3
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	e025      	b.n	8004394 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d011      	beq.n	8004372 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	69b8      	ldr	r0, [r7, #24]
 8004352:	f000 fa90 	bl	8004876 <xQueueTakeMutexRecursive>
 8004356:	4603      	mov	r3, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d01b      	beq.n	8004394 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004362:	f06f 0301 	mvn.w	r3, #1
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e014      	b.n	8004394 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800436a:	f06f 0302 	mvn.w	r3, #2
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	e010      	b.n	8004394 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	69b8      	ldr	r0, [r7, #24]
 8004376:	f000 fd1d 	bl	8004db4 <xQueueSemaphoreTake>
 800437a:	4603      	mov	r3, r0
 800437c:	2b01      	cmp	r3, #1
 800437e:	d009      	beq.n	8004394 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004386:	f06f 0301 	mvn.w	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e002      	b.n	8004394 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800438e:	f06f 0302 	mvn.w	r3, #2
 8004392:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004394:	69fb      	ldr	r3, [r7, #28]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000094 	.word	0x20000094

080043a4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043c0:	f3ef 8305 	mrs	r3, IPSR
 80043c4:	613b      	str	r3, [r7, #16]
  return(result);
 80043c6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10f      	bne.n	80043ec <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043cc:	f3ef 8310 	mrs	r3, PRIMASK
 80043d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043d8:	f3ef 8311 	mrs	r3, BASEPRI
 80043dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <osMutexRelease+0x50>
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <osMutexRelease+0x9c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d103      	bne.n	80043f4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80043ec:	f06f 0305 	mvn.w	r3, #5
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	e01f      	b.n	8004434 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80043fa:	f06f 0303 	mvn.w	r3, #3
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	e018      	b.n	8004434 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004408:	69b8      	ldr	r0, [r7, #24]
 800440a:	f000 fa01 	bl	8004810 <xQueueGiveMutexRecursive>
 800440e:	4603      	mov	r3, r0
 8004410:	2b01      	cmp	r3, #1
 8004412:	d00f      	beq.n	8004434 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004414:	f06f 0302 	mvn.w	r3, #2
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e00b      	b.n	8004434 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800441c:	2300      	movs	r3, #0
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	69b8      	ldr	r0, [r7, #24]
 8004424:	f000 fa5c 	bl	80048e0 <xQueueGenericSend>
 8004428:	4603      	mov	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d002      	beq.n	8004434 <osMutexRelease+0x90>
        stat = osErrorResource;
 800442e:	f06f 0302 	mvn.w	r3, #2
 8004432:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004434:	69fb      	ldr	r3, [r7, #28]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000094 	.word	0x20000094

08004444 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a07      	ldr	r2, [pc, #28]	; (8004470 <vApplicationGetIdleTaskMemory+0x2c>)
 8004454:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4a06      	ldr	r2, [pc, #24]	; (8004474 <vApplicationGetIdleTaskMemory+0x30>)
 800445a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2280      	movs	r2, #128	; 0x80
 8004460:	601a      	str	r2, [r3, #0]
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000098 	.word	0x20000098
 8004474:	200000f4 	.word	0x200000f4

08004478 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004488:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4a06      	ldr	r2, [pc, #24]	; (80044a8 <vApplicationGetTimerTaskMemory+0x30>)
 800448e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004496:	601a      	str	r2, [r3, #0]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	200002f4 	.word	0x200002f4
 80044a8:	20000350 	.word	0x20000350

080044ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f103 0208 	add.w	r2, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f04f 32ff 	mov.w	r2, #4294967295
 80044c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f103 0208 	add.w	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f103 0208 	add.w	r2, r3, #8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d103      	bne.n	800456e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e00c      	b.n	8004588 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3308      	adds	r3, #8
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e002      	b.n	800457c <vListInsert+0x2e>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	d2f6      	bcs.n	8004576 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6892      	ldr	r2, [r2, #8]
 80045d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6852      	ldr	r2, [r2, #4]
 80045e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d103      	bne.n	80045f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	1e5a      	subs	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	e7fe      	b.n	800463a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800463c:	f002 faa6 	bl	8006b8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	68f9      	ldr	r1, [r7, #12]
 800464a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	441a      	add	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466c:	3b01      	subs	r3, #1
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	22ff      	movs	r2, #255	; 0xff
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d114      	bne.n	80046bc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01a      	beq.n	80046d0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3310      	adds	r3, #16
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 fa66 	bl	8005b70 <xTaskRemoveFromEventList>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d012      	beq.n	80046d0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <xQueueGenericReset+0xcc>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	e009      	b.n	80046d0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3310      	adds	r3, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fef3 	bl	80044ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3324      	adds	r3, #36	; 0x24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff feee 	bl	80044ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046d0:	f002 fa8a 	bl	8006be8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046d4:	2301      	movs	r3, #1
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08e      	sub	sp, #56	; 0x38
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <xQueueGenericCreateStatic+0x28>
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 800470a:	e7fe      	b.n	800470a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <xQueueGenericCreateStatic+0x42>
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
 8004724:	e7fe      	b.n	8004724 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <xQueueGenericCreateStatic+0x4e>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <xQueueGenericCreateStatic+0x52>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericCreateStatic+0x54>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <xQueueGenericCreateStatic+0x6c>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	e7fe      	b.n	800474e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <xQueueGenericCreateStatic+0x78>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <xQueueGenericCreateStatic+0x7c>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <xQueueGenericCreateStatic+0x7e>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <xQueueGenericCreateStatic+0x96>
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e7fe      	b.n	8004778 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800477a:	2350      	movs	r3, #80	; 0x50
 800477c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d009      	beq.n	8004798 <xQueueGenericCreateStatic+0xb4>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	e7fe      	b.n	8004796 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004798:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00d      	beq.n	80047c0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f805 	bl	80047ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3730      	adds	r7, #48	; 0x30
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e002      	b.n	80047ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047f8:	2101      	movs	r1, #1
 80047fa:	69b8      	ldr	r0, [r7, #24]
 80047fc:	f7ff ff0a 	bl	8004614 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <xQueueGiveMutexRecursive+0x26>
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e7fe      	b.n	8004834 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	689c      	ldr	r4, [r3, #8]
 800483a:	f001 fb4f 	bl	8005edc <xTaskGetCurrentTaskHandle>
 800483e:	4603      	mov	r3, r0
 8004840:	429c      	cmp	r4, r3
 8004842:	d111      	bne.n	8004868 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	1e5a      	subs	r2, r3, #1
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d105      	bne.n	8004862 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004856:	2300      	movs	r3, #0
 8004858:	2200      	movs	r2, #0
 800485a:	2100      	movs	r1, #0
 800485c:	6938      	ldr	r0, [r7, #16]
 800485e:	f000 f83f 	bl	80048e0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004862:	2301      	movs	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e001      	b.n	800486c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800486c:	697b      	ldr	r3, [r7, #20]
	}
 800486e:	4618      	mov	r0, r3
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd90      	pop	{r4, r7, pc}

08004876 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004876:	b590      	push	{r4, r7, lr}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <xQueueTakeMutexRecursive+0x28>
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e7fe      	b.n	800489c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	689c      	ldr	r4, [r3, #8]
 80048a2:	f001 fb1b 	bl	8005edc <xTaskGetCurrentTaskHandle>
 80048a6:	4603      	mov	r3, r0
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d107      	bne.n	80048bc <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80048b6:	2301      	movs	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e00c      	b.n	80048d6 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	6938      	ldr	r0, [r7, #16]
 80048c0:	f000 fa78 	bl	8004db4 <xQueueSemaphoreTake>
 80048c4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80048d6:	697b      	ldr	r3, [r7, #20]
	}
 80048d8:	4618      	mov	r0, r3
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd90      	pop	{r4, r7, pc}

080048e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08e      	sub	sp, #56	; 0x38
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048ee:	2300      	movs	r3, #0
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <xQueueGenericSend+0x30>
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
 800490e:	e7fe      	b.n	800490e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <xQueueGenericSend+0x3e>
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <xQueueGenericSend+0x42>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <xQueueGenericSend+0x44>
 8004922:	2300      	movs	r3, #0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <xQueueGenericSend+0x5c>
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	e7fe      	b.n	800493a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d103      	bne.n	800494a <xQueueGenericSend+0x6a>
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <xQueueGenericSend+0x6e>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <xQueueGenericSend+0x70>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <xQueueGenericSend+0x88>
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	e7fe      	b.n	8004966 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004968:	f001 fac8 	bl	8005efc <xTaskGetSchedulerState>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <xQueueGenericSend+0x98>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <xQueueGenericSend+0x9c>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <xQueueGenericSend+0x9e>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <xQueueGenericSend+0xb6>
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	e7fe      	b.n	8004994 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004996:	f002 f8f9 	bl	8006b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <xQueueGenericSend+0xcc>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d129      	bne.n	8004a00 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b2:	f000 fb1f 	bl	8004ff4 <prvCopyDataToQueue>
 80049b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 f8d3 	bl	8005b70 <xTaskRemoveFromEventList>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049d0:	4b3f      	ldr	r3, [pc, #252]	; (8004ad0 <xQueueGenericSend+0x1f0>)
 80049d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	e00a      	b.n	80049f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049e8:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <xQueueGenericSend+0x1f0>)
 80049ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049f8:	f002 f8f6 	bl	8006be8 <vPortExitCritical>
				return pdPASS;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e063      	b.n	8004ac8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a06:	f002 f8ef 	bl	8006be8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e05c      	b.n	8004ac8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 f90b 	bl	8005c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a22:	f002 f8e1 	bl	8006be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a26:	f000 fe87 	bl	8005738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a2a:	f002 f8af 	bl	8006b8c <vPortEnterCritical>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a34:	b25b      	sxtb	r3, r3
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d103      	bne.n	8004a44 <xQueueGenericSend+0x164>
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d103      	bne.n	8004a5a <xQueueGenericSend+0x17a>
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a5a:	f002 f8c5 	bl	8006be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a5e:	1d3a      	adds	r2, r7, #4
 8004a60:	f107 0314 	add.w	r3, r7, #20
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 f8fa 	bl	8005c60 <xTaskCheckForTimeOut>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d124      	bne.n	8004abc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a74:	f000 fbb6 	bl	80051e4 <prvIsQueueFull>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d018      	beq.n	8004ab0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	3310      	adds	r3, #16
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 f824 	bl	8005ad4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8e:	f000 fb41 	bl	8005114 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a92:	f000 fe5f 	bl	8005754 <xTaskResumeAll>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f47f af7c 	bne.w	8004996 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <xQueueGenericSend+0x1f0>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	e772      	b.n	8004996 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ab2:	f000 fb2f 	bl	8005114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ab6:	f000 fe4d 	bl	8005754 <xTaskResumeAll>
 8004aba:	e76c      	b.n	8004996 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004abe:	f000 fb29 	bl	8005114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ac2:	f000 fe47 	bl	8005754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3738      	adds	r7, #56	; 0x38
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08e      	sub	sp, #56	; 0x38
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <xQueueGenericSendFromISR+0x2c>
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
 8004afe:	e7fe      	b.n	8004afe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <xQueueGenericSendFromISR+0x3a>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <xQueueGenericSendFromISR+0x3e>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <xQueueGenericSendFromISR+0x40>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <xQueueGenericSendFromISR+0x58>
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	623b      	str	r3, [r7, #32]
 8004b2a:	e7fe      	b.n	8004b2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d103      	bne.n	8004b3a <xQueueGenericSendFromISR+0x66>
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <xQueueGenericSendFromISR+0x6a>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <xQueueGenericSendFromISR+0x6c>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <xQueueGenericSendFromISR+0x84>
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e7fe      	b.n	8004b56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b58:	f002 f8f4 	bl	8006d44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	61ba      	str	r2, [r7, #24]
 8004b72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <xQueueGenericSendFromISR+0xb6>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d12c      	bne.n	8004be4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b9a:	f000 fa2b 	bl	8004ff4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d112      	bne.n	8004bce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d016      	beq.n	8004bde <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	3324      	adds	r3, #36	; 0x24
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 ffdb 	bl	8005b70 <xTaskRemoveFromEventList>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e007      	b.n	8004bde <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	b25a      	sxtb	r2, r3
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bde:	2301      	movs	r3, #1
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004be2:	e001      	b.n	8004be8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3738      	adds	r7, #56	; 0x38
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	; 0x30
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <xQueueReceive+0x2e>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	623b      	str	r3, [r7, #32]
 8004c28:	e7fe      	b.n	8004c28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <xQueueReceive+0x3c>
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <xQueueReceive+0x40>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <xQueueReceive+0x42>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <xQueueReceive+0x5a>
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e7fe      	b.n	8004c54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c56:	f001 f951 	bl	8005efc <xTaskGetSchedulerState>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <xQueueReceive+0x6a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <xQueueReceive+0x6e>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <xQueueReceive+0x70>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <xQueueReceive+0x88>
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	e7fe      	b.n	8004c82 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c84:	f001 ff82 	bl	8006b8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01f      	beq.n	8004cd4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c98:	f000 fa16 	bl	80050c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1e5a      	subs	r2, r3, #1
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00f      	beq.n	8004ccc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	3310      	adds	r3, #16
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 ff5d 	bl	8005b70 <xTaskRemoveFromEventList>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cbc:	4b3c      	ldr	r3, [pc, #240]	; (8004db0 <xQueueReceive+0x1b4>)
 8004cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ccc:	f001 ff8c 	bl	8006be8 <vPortExitCritical>
				return pdPASS;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e069      	b.n	8004da8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cda:	f001 ff85 	bl	8006be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e062      	b.n	8004da8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 ffa1 	bl	8005c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cf6:	f001 ff77 	bl	8006be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cfa:	f000 fd1d 	bl	8005738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cfe:	f001 ff45 	bl	8006b8c <vPortEnterCritical>
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d103      	bne.n	8004d18 <xQueueReceive+0x11c>
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d103      	bne.n	8004d2e <xQueueReceive+0x132>
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d2e:	f001 ff5b 	bl	8006be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d32:	1d3a      	adds	r2, r7, #4
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 ff90 	bl	8005c60 <xTaskCheckForTimeOut>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d123      	bne.n	8004d8e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d48:	f000 fa36 	bl	80051b8 <prvIsQueueEmpty>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d017      	beq.n	8004d82 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 feba 	bl	8005ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d62:	f000 f9d7 	bl	8005114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d66:	f000 fcf5 	bl	8005754 <xTaskResumeAll>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d189      	bne.n	8004c84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <xQueueReceive+0x1b4>)
 8004d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	e780      	b.n	8004c84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d84:	f000 f9c6 	bl	8005114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d88:	f000 fce4 	bl	8005754 <xTaskResumeAll>
 8004d8c:	e77a      	b.n	8004c84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d90:	f000 f9c0 	bl	8005114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d94:	f000 fcde 	bl	8005754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d9a:	f000 fa0d 	bl	80051b8 <prvIsQueueEmpty>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f43f af6f 	beq.w	8004c84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004da6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3730      	adds	r7, #48	; 0x30
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08e      	sub	sp, #56	; 0x38
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <xQueueSemaphoreTake+0x30>
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	623b      	str	r3, [r7, #32]
 8004de2:	e7fe      	b.n	8004de2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <xQueueSemaphoreTake+0x4c>
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	e7fe      	b.n	8004dfe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e00:	f001 f87c 	bl	8005efc <xTaskGetSchedulerState>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <xQueueSemaphoreTake+0x5c>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <xQueueSemaphoreTake+0x60>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <xQueueSemaphoreTake+0x62>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <xQueueSemaphoreTake+0x7a>
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e7fe      	b.n	8004e2c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e2e:	f001 fead 	bl	8006b8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d024      	beq.n	8004e88 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	1e5a      	subs	r2, r3, #1
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e4e:	f001 f9c7 	bl	80061e0 <pvTaskIncrementMutexHeldCount>
 8004e52:	4602      	mov	r2, r0
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00f      	beq.n	8004e80 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	3310      	adds	r3, #16
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fe83 	bl	8005b70 <xTaskRemoveFromEventList>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e70:	4b53      	ldr	r3, [pc, #332]	; (8004fc0 <xQueueSemaphoreTake+0x20c>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e80:	f001 feb2 	bl	8006be8 <vPortExitCritical>
				return pdPASS;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e096      	b.n	8004fb6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d110      	bne.n	8004eb0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d009      	beq.n	8004ea8 <xQueueSemaphoreTake+0xf4>
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e7fe      	b.n	8004ea6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ea8:	f001 fe9e 	bl	8006be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e082      	b.n	8004fb6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eb6:	f107 030c 	add.w	r3, r7, #12
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 feba 	bl	8005c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ec4:	f001 fe90 	bl	8006be8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ec8:	f000 fc36 	bl	8005738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ecc:	f001 fe5e 	bl	8006b8c <vPortEnterCritical>
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ed6:	b25b      	sxtb	r3, r3
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d103      	bne.n	8004ee6 <xQueueSemaphoreTake+0x132>
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eec:	b25b      	sxtb	r3, r3
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d103      	bne.n	8004efc <xQueueSemaphoreTake+0x148>
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004efc:	f001 fe74 	bl	8006be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f00:	463a      	mov	r2, r7
 8004f02:	f107 030c 	add.w	r3, r7, #12
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fea9 	bl	8005c60 <xTaskCheckForTimeOut>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d132      	bne.n	8004f7a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f16:	f000 f94f 	bl	80051b8 <prvIsQueueEmpty>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d026      	beq.n	8004f6e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004f28:	f001 fe30 	bl	8006b8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 f801 	bl	8005f38 <xTaskPriorityInherit>
 8004f36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004f38:	f001 fe56 	bl	8006be8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	3324      	adds	r3, #36	; 0x24
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fdc5 	bl	8005ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f4c:	f000 f8e2 	bl	8005114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f50:	f000 fc00 	bl	8005754 <xTaskResumeAll>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f47f af69 	bne.w	8004e2e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004f5c:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <xQueueSemaphoreTake+0x20c>)
 8004f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	e75f      	b.n	8004e2e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f70:	f000 f8d0 	bl	8005114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f74:	f000 fbee 	bl	8005754 <xTaskResumeAll>
 8004f78:	e759      	b.n	8004e2e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f7c:	f000 f8ca 	bl	8005114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f80:	f000 fbe8 	bl	8005754 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f86:	f000 f917 	bl	80051b8 <prvIsQueueEmpty>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f43f af4e 	beq.w	8004e2e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004f98:	f001 fdf8 	bl	8006b8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f9e:	f000 f811 	bl	8004fc4 <prvGetDisinheritPriorityAfterTimeout>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f898 	bl	80060e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004fb0:	f001 fe1a 	bl	8006be8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3738      	adds	r7, #56	; 0x38
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d006      	beq.n	8004fe2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e001      	b.n	8004fe6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
	}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10d      	bne.n	800502e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d14d      	bne.n	80050b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fff2 	bl	8006008 <xTaskPriorityDisinherit>
 8005024:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	e043      	b.n	80050b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d119      	bne.n	8005068 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6858      	ldr	r0, [r3, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	461a      	mov	r2, r3
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	f002 f8be 	bl	80071c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	441a      	add	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	d32b      	bcc.n	80050b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	605a      	str	r2, [r3, #4]
 8005066:	e026      	b.n	80050b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68d8      	ldr	r0, [r3, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	461a      	mov	r2, r3
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	f002 f8a4 	bl	80071c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	425b      	negs	r3, r3
 8005082:	441a      	add	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d207      	bcs.n	80050a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	425b      	negs	r3, r3
 800509e:	441a      	add	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d105      	bne.n	80050b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050be:	697b      	ldr	r3, [r7, #20]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	441a      	add	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d303      	bcc.n	80050fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68d9      	ldr	r1, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	461a      	mov	r2, r3
 8005106:	6838      	ldr	r0, [r7, #0]
 8005108:	f002 f85a 	bl	80071c0 <memcpy>
	}
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800511c:	f001 fd36 	bl	8006b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005128:	e011      	b.n	800514e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d012      	beq.n	8005158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3324      	adds	r3, #36	; 0x24
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fd1a 	bl	8005b70 <xTaskRemoveFromEventList>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005142:	f000 fded 	bl	8005d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	3b01      	subs	r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	dce9      	bgt.n	800512a <prvUnlockQueue+0x16>
 8005156:	e000      	b.n	800515a <prvUnlockQueue+0x46>
					break;
 8005158:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005162:	f001 fd41 	bl	8006be8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005166:	f001 fd11 	bl	8006b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005172:	e011      	b.n	8005198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d012      	beq.n	80051a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3310      	adds	r3, #16
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fcf5 	bl	8005b70 <xTaskRemoveFromEventList>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800518c:	f000 fdc8 	bl	8005d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	3b01      	subs	r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800519c:	2b00      	cmp	r3, #0
 800519e:	dce9      	bgt.n	8005174 <prvUnlockQueue+0x60>
 80051a0:	e000      	b.n	80051a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	22ff      	movs	r2, #255	; 0xff
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051ac:	f001 fd1c 	bl	8006be8 <vPortExitCritical>
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051c0:	f001 fce4 	bl	8006b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e001      	b.n	80051d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d6:	f001 fd07 	bl	8006be8 <vPortExitCritical>

	return xReturn;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051ec:	f001 fcce 	bl	8006b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d102      	bne.n	8005202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e001      	b.n	8005206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005206:	f001 fcef 	bl	8006be8 <vPortExitCritical>

	return xReturn;
 800520a:	68fb      	ldr	r3, [r7, #12]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e014      	b.n	800524e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005224:	4a0e      	ldr	r2, [pc, #56]	; (8005260 <vQueueAddToRegistry+0x4c>)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005230:	490b      	ldr	r1, [pc, #44]	; (8005260 <vQueueAddToRegistry+0x4c>)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <vQueueAddToRegistry+0x4c>)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005246:	e005      	b.n	8005254 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3301      	adds	r3, #1
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b07      	cmp	r3, #7
 8005252:	d9e7      	bls.n	8005224 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20004c58 	.word	0x20004c58

08005264 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005274:	f001 fc8a 	bl	8006b8c <vPortEnterCritical>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800527e:	b25b      	sxtb	r3, r3
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d103      	bne.n	800528e <vQueueWaitForMessageRestricted+0x2a>
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005294:	b25b      	sxtb	r3, r3
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d103      	bne.n	80052a4 <vQueueWaitForMessageRestricted+0x40>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a4:	f001 fca0 	bl	8006be8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3324      	adds	r3, #36	; 0x24
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fc2f 	bl	8005b1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052be:	6978      	ldr	r0, [r7, #20]
 80052c0:	f7ff ff28 	bl	8005114 <prvUnlockQueue>
	}
 80052c4:	bf00      	nop
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08e      	sub	sp, #56	; 0x38
 80052d0:	af04      	add	r7, sp, #16
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <xTaskCreateStatic+0x28>
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	623b      	str	r3, [r7, #32]
 80052f2:	e7fe      	b.n	80052f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <xTaskCreateStatic+0x42>
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e7fe      	b.n	800530c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800530e:	235c      	movs	r3, #92	; 0x5c
 8005310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b5c      	cmp	r3, #92	; 0x5c
 8005316:	d009      	beq.n	800532c <xTaskCreateStatic+0x60>
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	e7fe      	b.n	800532a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800532c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01e      	beq.n	8005372 <xTaskCreateStatic+0xa6>
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01b      	beq.n	8005372 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005342:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800534c:	2300      	movs	r3, #0
 800534e:	9303      	str	r3, [sp, #12]
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	9302      	str	r3, [sp, #8]
 8005354:	f107 0314 	add.w	r3, r7, #20
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f850 	bl	800540a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800536a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800536c:	f000 f8dc 	bl	8005528 <prvAddNewTaskToReadyList>
 8005370:	e001      	b.n	8005376 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005376:	697b      	ldr	r3, [r7, #20]
	}
 8005378:	4618      	mov	r0, r3
 800537a:	3728      	adds	r7, #40	; 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	; 0x30
 8005384:	af04      	add	r7, sp, #16
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4618      	mov	r0, r3
 8005396:	f001 fd13 	bl	8006dc0 <pvPortMalloc>
 800539a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00e      	beq.n	80053c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053a2:	205c      	movs	r0, #92	; 0x5c
 80053a4:	f001 fd0c 	bl	8006dc0 <pvPortMalloc>
 80053a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
 80053b6:	e005      	b.n	80053c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053b8:	6978      	ldr	r0, [r7, #20]
 80053ba:	f001 fdc3 	bl	8006f44 <vPortFree>
 80053be:	e001      	b.n	80053c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d017      	beq.n	80053fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	2300      	movs	r3, #0
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f80e 	bl	800540a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ee:	69f8      	ldr	r0, [r7, #28]
 80053f0:	f000 f89a 	bl	8005528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053f4:	2301      	movs	r3, #1
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e002      	b.n	8005400 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005400:	69bb      	ldr	r3, [r7, #24]
	}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b088      	sub	sp, #32
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	461a      	mov	r2, r3
 8005422:	21a5      	movs	r1, #165	; 0xa5
 8005424:	f001 fed7 	bl	80071d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005432:	3b01      	subs	r3, #1
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <prvInitialiseNewTask+0x56>
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e7fe      	b.n	800545e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01f      	beq.n	80054a6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e012      	b.n	8005492 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	7819      	ldrb	r1, [r3, #0]
 8005474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	3334      	adds	r3, #52	; 0x34
 800547c:	460a      	mov	r2, r1
 800547e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d006      	beq.n	800549a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d9e9      	bls.n	800546c <prvInitialiseNewTask+0x62>
 8005498:	e000      	b.n	800549c <prvInitialiseNewTask+0x92>
			{
				break;
 800549a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a4:	e003      	b.n	80054ae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	2b37      	cmp	r3, #55	; 0x37
 80054b2:	d901      	bls.n	80054b8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054b4:	2337      	movs	r3, #55	; 0x37
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	2200      	movs	r2, #0
 80054c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff f80c 	bl	80044ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	3318      	adds	r3, #24
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff f807 	bl	80044ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	2200      	movs	r2, #0
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	69b8      	ldr	r0, [r7, #24]
 8005508:	f001 fa18 	bl	800693c <pxPortInitialiseStack>
 800550c:	4602      	mov	r2, r0
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800551e:	bf00      	nop
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005530:	f001 fb2c 	bl	8006b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005534:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <prvAddNewTaskToReadyList+0xc4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <prvAddNewTaskToReadyList+0xc4>)
 800553c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800553e:	4b2c      	ldr	r3, [pc, #176]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005546:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800554c:	4b27      	ldr	r3, [pc, #156]	; (80055ec <prvAddNewTaskToReadyList+0xc4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d110      	bne.n	8005576 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005554:	f000 fc08 	bl	8005d68 <prvInitialiseTaskLists>
 8005558:	e00d      	b.n	8005576 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800555a:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <prvAddNewTaskToReadyList+0xcc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005562:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	429a      	cmp	r2, r3
 800556e:	d802      	bhi.n	8005576 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005570:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005576:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <prvAddNewTaskToReadyList+0xd0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <prvAddNewTaskToReadyList+0xd0>)
 800557e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <prvAddNewTaskToReadyList+0xd0>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <prvAddNewTaskToReadyList+0xd4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d903      	bls.n	800559c <prvAddNewTaskToReadyList+0x74>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <prvAddNewTaskToReadyList+0xd4>)
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4a15      	ldr	r2, [pc, #84]	; (8005600 <prvAddNewTaskToReadyList+0xd8>)
 80055aa:	441a      	add	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f7fe ffa7 	bl	8004506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055b8:	f001 fb16 	bl	8006be8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055bc:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <prvAddNewTaskToReadyList+0xcc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00e      	beq.n	80055e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d207      	bcs.n	80055e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <prvAddNewTaskToReadyList+0xdc>)
 80055d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000c24 	.word	0x20000c24
 80055f0:	20000750 	.word	0x20000750
 80055f4:	20000c30 	.word	0x20000c30
 80055f8:	20000c40 	.word	0x20000c40
 80055fc:	20000c2c 	.word	0x20000c2c
 8005600:	20000754 	.word	0x20000754
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <vTaskDelay+0x60>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <vTaskDelay+0x2e>
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	e7fe      	b.n	8005634 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005636:	f000 f87f 	bl	8005738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800563a:	2100      	movs	r1, #0
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fde3 	bl	8006208 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005642:	f000 f887 	bl	8005754 <xTaskResumeAll>
 8005646:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800564e:	4b07      	ldr	r3, [pc, #28]	; (800566c <vTaskDelay+0x64>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000c4c 	.word	0x20000c4c
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	; 0x28
 8005674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800567e:	463a      	mov	r2, r7
 8005680:	1d39      	adds	r1, r7, #4
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fedc 	bl	8004444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	9202      	str	r2, [sp, #8]
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	2300      	movs	r3, #0
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2300      	movs	r3, #0
 800569c:	460a      	mov	r2, r1
 800569e:	4920      	ldr	r1, [pc, #128]	; (8005720 <vTaskStartScheduler+0xb0>)
 80056a0:	4820      	ldr	r0, [pc, #128]	; (8005724 <vTaskStartScheduler+0xb4>)
 80056a2:	f7ff fe13 	bl	80052cc <xTaskCreateStatic>
 80056a6:	4602      	mov	r2, r0
 80056a8:	4b1f      	ldr	r3, [pc, #124]	; (8005728 <vTaskStartScheduler+0xb8>)
 80056aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <vTaskStartScheduler+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056b4:	2301      	movs	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e001      	b.n	80056be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d102      	bne.n	80056ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056c4:	f000 fdf4 	bl	80062b0 <xTimerCreateTimerTask>
 80056c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d115      	bne.n	80056fc <vTaskStartScheduler+0x8c>
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056e2:	4b12      	ldr	r3, [pc, #72]	; (800572c <vTaskStartScheduler+0xbc>)
 80056e4:	f04f 32ff 	mov.w	r2, #4294967295
 80056e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056ea:	4b11      	ldr	r3, [pc, #68]	; (8005730 <vTaskStartScheduler+0xc0>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056f0:	4b10      	ldr	r3, [pc, #64]	; (8005734 <vTaskStartScheduler+0xc4>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056f6:	f001 f9ab 	bl	8006a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056fa:	e00d      	b.n	8005718 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d109      	bne.n	8005718 <vTaskStartScheduler+0xa8>
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e7fe      	b.n	8005716 <vTaskStartScheduler+0xa6>
}
 8005718:	bf00      	nop
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	08007a80 	.word	0x08007a80
 8005724:	08005d39 	.word	0x08005d39
 8005728:	20000c48 	.word	0x20000c48
 800572c:	20000c44 	.word	0x20000c44
 8005730:	20000c30 	.word	0x20000c30
 8005734:	20000c28 	.word	0x20000c28

08005738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <vTaskSuspendAll+0x18>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	4a03      	ldr	r2, [pc, #12]	; (8005750 <vTaskSuspendAll+0x18>)
 8005744:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005746:	bf00      	nop
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	20000c4c 	.word	0x20000c4c

08005754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005762:	4b41      	ldr	r3, [pc, #260]	; (8005868 <xTaskResumeAll+0x114>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <xTaskResumeAll+0x2a>
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	e7fe      	b.n	800577c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800577e:	f001 fa05 	bl	8006b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005782:	4b39      	ldr	r3, [pc, #228]	; (8005868 <xTaskResumeAll+0x114>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3b01      	subs	r3, #1
 8005788:	4a37      	ldr	r2, [pc, #220]	; (8005868 <xTaskResumeAll+0x114>)
 800578a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <xTaskResumeAll+0x114>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d162      	bne.n	800585a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005794:	4b35      	ldr	r3, [pc, #212]	; (800586c <xTaskResumeAll+0x118>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d05e      	beq.n	800585a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800579c:	e02f      	b.n	80057fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579e:	4b34      	ldr	r3, [pc, #208]	; (8005870 <xTaskResumeAll+0x11c>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3318      	adds	r3, #24
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe ff08 	bl	80045c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe ff03 	bl	80045c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	4b2d      	ldr	r3, [pc, #180]	; (8005874 <xTaskResumeAll+0x120>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d903      	bls.n	80057ce <xTaskResumeAll+0x7a>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <xTaskResumeAll+0x120>)
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4a27      	ldr	r2, [pc, #156]	; (8005878 <xTaskResumeAll+0x124>)
 80057dc:	441a      	add	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f7fe fe8e 	bl	8004506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	4b23      	ldr	r3, [pc, #140]	; (800587c <xTaskResumeAll+0x128>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d302      	bcc.n	80057fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80057f8:	4b21      	ldr	r3, [pc, #132]	; (8005880 <xTaskResumeAll+0x12c>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057fe:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <xTaskResumeAll+0x11c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1cb      	bne.n	800579e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800580c:	f000 fb46 	bl	8005e9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005810:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <xTaskResumeAll+0x130>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800581c:	f000 f846 	bl	80058ac <xTaskIncrementTick>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005826:	4b16      	ldr	r3, [pc, #88]	; (8005880 <xTaskResumeAll+0x12c>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3b01      	subs	r3, #1
 8005830:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f1      	bne.n	800581c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005838:	4b12      	ldr	r3, [pc, #72]	; (8005884 <xTaskResumeAll+0x130>)
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <xTaskResumeAll+0x12c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005846:	2301      	movs	r3, #1
 8005848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <xTaskResumeAll+0x134>)
 800584c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800585a:	f001 f9c5 	bl	8006be8 <vPortExitCritical>

	return xAlreadyYielded;
 800585e:	68bb      	ldr	r3, [r7, #8]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000c4c 	.word	0x20000c4c
 800586c:	20000c24 	.word	0x20000c24
 8005870:	20000be4 	.word	0x20000be4
 8005874:	20000c2c 	.word	0x20000c2c
 8005878:	20000754 	.word	0x20000754
 800587c:	20000750 	.word	0x20000750
 8005880:	20000c38 	.word	0x20000c38
 8005884:	20000c34 	.word	0x20000c34
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <xTaskGetTickCount+0x1c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005898:	687b      	ldr	r3, [r7, #4]
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000c28 	.word	0x20000c28

080058ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b6:	4b4e      	ldr	r3, [pc, #312]	; (80059f0 <xTaskIncrementTick+0x144>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f040 8088 	bne.w	80059d0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058c0:	4b4c      	ldr	r3, [pc, #304]	; (80059f4 <xTaskIncrementTick+0x148>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058c8:	4a4a      	ldr	r2, [pc, #296]	; (80059f4 <xTaskIncrementTick+0x148>)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11f      	bne.n	8005914 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80058d4:	4b48      	ldr	r3, [pc, #288]	; (80059f8 <xTaskIncrementTick+0x14c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <xTaskIncrementTick+0x46>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	e7fe      	b.n	80058f0 <xTaskIncrementTick+0x44>
 80058f2:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <xTaskIncrementTick+0x14c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	4b40      	ldr	r3, [pc, #256]	; (80059fc <xTaskIncrementTick+0x150>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a3e      	ldr	r2, [pc, #248]	; (80059f8 <xTaskIncrementTick+0x14c>)
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	4a3e      	ldr	r2, [pc, #248]	; (80059fc <xTaskIncrementTick+0x150>)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <xTaskIncrementTick+0x154>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	4a3c      	ldr	r2, [pc, #240]	; (8005a00 <xTaskIncrementTick+0x154>)
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	f000 fac4 	bl	8005e9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005914:	4b3b      	ldr	r3, [pc, #236]	; (8005a04 <xTaskIncrementTick+0x158>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	429a      	cmp	r2, r3
 800591c:	d349      	bcc.n	80059b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800591e:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <xTaskIncrementTick+0x14c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d104      	bne.n	8005932 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005928:	4b36      	ldr	r3, [pc, #216]	; (8005a04 <xTaskIncrementTick+0x158>)
 800592a:	f04f 32ff 	mov.w	r2, #4294967295
 800592e:	601a      	str	r2, [r3, #0]
					break;
 8005930:	e03f      	b.n	80059b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005932:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <xTaskIncrementTick+0x14c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d203      	bcs.n	8005952 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800594a:	4a2e      	ldr	r2, [pc, #184]	; (8005a04 <xTaskIncrementTick+0x158>)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005950:	e02f      	b.n	80059b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	3304      	adds	r3, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fe32 	bl	80045c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3318      	adds	r3, #24
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fe29 	bl	80045c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <xTaskIncrementTick+0x15c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d903      	bls.n	8005982 <xTaskIncrementTick+0xd6>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <xTaskIncrementTick+0x15c>)
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <xTaskIncrementTick+0x160>)
 8005990:	441a      	add	r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe fdb4 	bl	8004506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <xTaskIncrementTick+0x164>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d3b8      	bcc.n	800591e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059b0:	e7b5      	b.n	800591e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059b2:	4b17      	ldr	r3, [pc, #92]	; (8005a10 <xTaskIncrementTick+0x164>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	4914      	ldr	r1, [pc, #80]	; (8005a0c <xTaskIncrementTick+0x160>)
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d907      	bls.n	80059da <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	e004      	b.n	80059da <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <xTaskIncrementTick+0x168>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	4a0f      	ldr	r2, [pc, #60]	; (8005a14 <xTaskIncrementTick+0x168>)
 80059d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059da:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <xTaskIncrementTick+0x16c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059e6:	697b      	ldr	r3, [r7, #20]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000c4c 	.word	0x20000c4c
 80059f4:	20000c28 	.word	0x20000c28
 80059f8:	20000bdc 	.word	0x20000bdc
 80059fc:	20000be0 	.word	0x20000be0
 8005a00:	20000c3c 	.word	0x20000c3c
 8005a04:	20000c44 	.word	0x20000c44
 8005a08:	20000c2c 	.word	0x20000c2c
 8005a0c:	20000754 	.word	0x20000754
 8005a10:	20000750 	.word	0x20000750
 8005a14:	20000c34 	.word	0x20000c34
 8005a18:	20000c38 	.word	0x20000c38

08005a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a22:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <vTaskSwitchContext+0xa4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a2a:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <vTaskSwitchContext+0xa8>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a30:	e040      	b.n	8005ab4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005a32:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <vTaskSwitchContext+0xa8>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a38:	4b23      	ldr	r3, [pc, #140]	; (8005ac8 <vTaskSwitchContext+0xac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e00f      	b.n	8005a60 <vTaskSwitchContext+0x44>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <vTaskSwitchContext+0x3e>
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	607b      	str	r3, [r7, #4]
 8005a58:	e7fe      	b.n	8005a58 <vTaskSwitchContext+0x3c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	491a      	ldr	r1, [pc, #104]	; (8005acc <vTaskSwitchContext+0xb0>)
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0e5      	beq.n	8005a40 <vTaskSwitchContext+0x24>
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4a13      	ldr	r2, [pc, #76]	; (8005acc <vTaskSwitchContext+0xb0>)
 8005a80:	4413      	add	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3308      	adds	r3, #8
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d104      	bne.n	8005aa4 <vTaskSwitchContext+0x88>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <vTaskSwitchContext+0xb4>)
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	4a06      	ldr	r2, [pc, #24]	; (8005ac8 <vTaskSwitchContext+0xac>)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6013      	str	r3, [r2, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	20000c4c 	.word	0x20000c4c
 8005ac4:	20000c38 	.word	0x20000c38
 8005ac8:	20000c2c 	.word	0x20000c2c
 8005acc:	20000754 	.word	0x20000754
 8005ad0:	20000750 	.word	0x20000750

08005ad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <vTaskPlaceOnEventList+0x24>
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e7fe      	b.n	8005af6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <vTaskPlaceOnEventList+0x44>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3318      	adds	r3, #24
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fe fd24 	bl	800454e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b06:	2101      	movs	r1, #1
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f000 fb7d 	bl	8006208 <prvAddCurrentTaskToDelayedList>
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000750 	.word	0x20000750

08005b1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <vTaskPlaceOnEventListRestricted+0x26>
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	e7fe      	b.n	8005b40 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <vTaskPlaceOnEventListRestricted+0x50>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3318      	adds	r3, #24
 8005b48:	4619      	mov	r1, r3
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7fe fcdb 	bl	8004506 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005b56:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	68b8      	ldr	r0, [r7, #8]
 8005b60:	f000 fb52 	bl	8006208 <prvAddCurrentTaskToDelayedList>
	}
 8005b64:	bf00      	nop
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000750 	.word	0x20000750

08005b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <xTaskRemoveFromEventList+0x2a>
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e7fe      	b.n	8005b98 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	3318      	adds	r3, #24
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fd0e 	bl	80045c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <xTaskRemoveFromEventList+0xac>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11d      	bne.n	8005be8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe fd05 	bl	80045c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <xTaskRemoveFromEventList+0xb0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d903      	bls.n	8005bca <xTaskRemoveFromEventList+0x5a>
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <xTaskRemoveFromEventList+0xb0>)
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <xTaskRemoveFromEventList+0xb4>)
 8005bd8:	441a      	add	r2, r3
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f7fe fc90 	bl	8004506 <vListInsertEnd>
 8005be6:	e005      	b.n	8005bf4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	3318      	adds	r3, #24
 8005bec:	4619      	mov	r1, r3
 8005bee:	480e      	ldr	r0, [pc, #56]	; (8005c28 <xTaskRemoveFromEventList+0xb8>)
 8005bf0:	f7fe fc89 	bl	8004506 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <xTaskRemoveFromEventList+0xbc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d905      	bls.n	8005c0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c02:	2301      	movs	r3, #1
 8005c04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <xTaskRemoveFromEventList+0xc0>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e001      	b.n	8005c12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c12:	697b      	ldr	r3, [r7, #20]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000c4c 	.word	0x20000c4c
 8005c20:	20000c2c 	.word	0x20000c2c
 8005c24:	20000754 	.word	0x20000754
 8005c28:	20000be4 	.word	0x20000be4
 8005c2c:	20000750 	.word	0x20000750
 8005c30:	20000c38 	.word	0x20000c38

08005c34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c3c:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <vTaskInternalSetTimeOutState+0x24>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <vTaskInternalSetTimeOutState+0x28>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	605a      	str	r2, [r3, #4]
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	20000c3c 	.word	0x20000c3c
 8005c5c:	20000c28 	.word	0x20000c28

08005c60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d109      	bne.n	8005c84 <xTaskCheckForTimeOut+0x24>
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	e7fe      	b.n	8005c82 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <xTaskCheckForTimeOut+0x3e>
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e7fe      	b.n	8005c9c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005c9e:	f000 ff75 	bl	8006b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ca2:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <xTaskCheckForTimeOut+0xb8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d102      	bne.n	8005cc2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e023      	b.n	8005d0a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <xTaskCheckForTimeOut+0xbc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d007      	beq.n	8005cde <xTaskCheckForTimeOut+0x7e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	e015      	b.n	8005d0a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d20b      	bcs.n	8005d00 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff9d 	bl	8005c34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e004      	b.n	8005d0a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d06:	2301      	movs	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d0a:	f000 ff6d 	bl	8006be8 <vPortExitCritical>

	return xReturn;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000c28 	.word	0x20000c28
 8005d1c:	20000c3c 	.word	0x20000c3c

08005d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <vTaskMissedYield+0x14>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	20000c38 	.word	0x20000c38

08005d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d40:	f000 f852 	bl	8005de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <prvIdleTask+0x28>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d9f9      	bls.n	8005d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <prvIdleTask+0x2c>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d5c:	e7f0      	b.n	8005d40 <prvIdleTask+0x8>
 8005d5e:	bf00      	nop
 8005d60:	20000754 	.word	0x20000754
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	e00c      	b.n	8005d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <prvInitialiseTaskLists+0x60>)
 8005d80:	4413      	add	r3, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fb92 	bl	80044ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b37      	cmp	r3, #55	; 0x37
 8005d92:	d9ef      	bls.n	8005d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d94:	480d      	ldr	r0, [pc, #52]	; (8005dcc <prvInitialiseTaskLists+0x64>)
 8005d96:	f7fe fb89 	bl	80044ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d9a:	480d      	ldr	r0, [pc, #52]	; (8005dd0 <prvInitialiseTaskLists+0x68>)
 8005d9c:	f7fe fb86 	bl	80044ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005da0:	480c      	ldr	r0, [pc, #48]	; (8005dd4 <prvInitialiseTaskLists+0x6c>)
 8005da2:	f7fe fb83 	bl	80044ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005da6:	480c      	ldr	r0, [pc, #48]	; (8005dd8 <prvInitialiseTaskLists+0x70>)
 8005da8:	f7fe fb80 	bl	80044ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dac:	480b      	ldr	r0, [pc, #44]	; (8005ddc <prvInitialiseTaskLists+0x74>)
 8005dae:	f7fe fb7d 	bl	80044ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <prvInitialiseTaskLists+0x78>)
 8005db4:	4a05      	ldr	r2, [pc, #20]	; (8005dcc <prvInitialiseTaskLists+0x64>)
 8005db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <prvInitialiseTaskLists+0x7c>)
 8005dba:	4a05      	ldr	r2, [pc, #20]	; (8005dd0 <prvInitialiseTaskLists+0x68>)
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000754 	.word	0x20000754
 8005dcc:	20000bb4 	.word	0x20000bb4
 8005dd0:	20000bc8 	.word	0x20000bc8
 8005dd4:	20000be4 	.word	0x20000be4
 8005dd8:	20000bf8 	.word	0x20000bf8
 8005ddc:	20000c10 	.word	0x20000c10
 8005de0:	20000bdc 	.word	0x20000bdc
 8005de4:	20000be0 	.word	0x20000be0

08005de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dee:	e019      	b.n	8005e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005df0:	f000 fecc 	bl	8006b8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df4:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <prvCheckTasksWaitingTermination+0x4c>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fbdd 	bl	80045c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvCheckTasksWaitingTermination+0x50>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <prvCheckTasksWaitingTermination+0x50>)
 8005e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e1a:	f000 fee5 	bl	8006be8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f80e 	bl	8005e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e1      	bne.n	8005df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000bf8 	.word	0x20000bf8
 8005e38:	20000c24 	.word	0x20000c24
 8005e3c:	20000c0c 	.word	0x20000c0c

08005e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d108      	bne.n	8005e64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f874 	bl	8006f44 <vPortFree>
				vPortFree( pxTCB );
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 f871 	bl	8006f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e62:	e017      	b.n	8005e94 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d103      	bne.n	8005e76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 f868 	bl	8006f44 <vPortFree>
	}
 8005e74:	e00e      	b.n	8005e94 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d009      	beq.n	8005e94 <prvDeleteTCB+0x54>
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e7fe      	b.n	8005e92 <prvDeleteTCB+0x52>
	}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <prvResetNextTaskUnblockTime+0x38>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eb4:	e008      	b.n	8005ec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <prvResetNextTaskUnblockTime+0x38>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ec6:	6013      	str	r3, [r2, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000bdc 	.word	0x20000bdc
 8005ed8:	20000c44 	.word	0x20000c44

08005edc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <xTaskGetCurrentTaskHandle+0x1c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005ee8:	687b      	ldr	r3, [r7, #4]
	}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000750 	.word	0x20000750

08005efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <xTaskGetSchedulerState+0x34>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	e008      	b.n	8005f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f10:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <xTaskGetSchedulerState+0x38>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	e001      	b.n	8005f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f22:	687b      	ldr	r3, [r7, #4]
	}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	20000c30 	.word	0x20000c30
 8005f34:	20000c4c 	.word	0x20000c4c

08005f38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d051      	beq.n	8005ff2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f52:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <xTaskPriorityInherit+0xc4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d241      	bcs.n	8005fe0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	db06      	blt.n	8005f72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f64:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <xTaskPriorityInherit+0xc4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6959      	ldr	r1, [r3, #20]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a1f      	ldr	r2, [pc, #124]	; (8006000 <xTaskPriorityInherit+0xc8>)
 8005f84:	4413      	add	r3, r2
 8005f86:	4299      	cmp	r1, r3
 8005f88:	d122      	bne.n	8005fd0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fb16 	bl	80045c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f94:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <xTaskPriorityInherit+0xc4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa2:	4b18      	ldr	r3, [pc, #96]	; (8006004 <xTaskPriorityInherit+0xcc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d903      	bls.n	8005fb2 <xTaskPriorityInherit+0x7a>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <xTaskPriorityInherit+0xcc>)
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4a10      	ldr	r2, [pc, #64]	; (8006000 <xTaskPriorityInherit+0xc8>)
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fe fa9c 	bl	8004506 <vListInsertEnd>
 8005fce:	e004      	b.n	8005fda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <xTaskPriorityInherit+0xc4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e008      	b.n	8005ff2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <xTaskPriorityInherit+0xc4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d201      	bcs.n	8005ff2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20000750 	.word	0x20000750
 8006000:	20000754 	.word	0x20000754
 8006004:	20000c2c 	.word	0x20000c2c

08006008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d054      	beq.n	80060c8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800601e:	4b2d      	ldr	r3, [pc, #180]	; (80060d4 <xTaskPriorityDisinherit+0xcc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	429a      	cmp	r2, r3
 8006026:	d009      	beq.n	800603c <xTaskPriorityDisinherit+0x34>
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e7fe      	b.n	800603a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <xTaskPriorityDisinherit+0x50>
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	e7fe      	b.n	8006056 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	1e5a      	subs	r2, r3, #1
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	429a      	cmp	r2, r3
 800606c:	d02c      	beq.n	80060c8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006072:	2b00      	cmp	r3, #0
 8006074:	d128      	bne.n	80060c8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	3304      	adds	r3, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe faa0 	bl	80045c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <xTaskPriorityDisinherit+0xd0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d903      	bls.n	80060a8 <xTaskPriorityDisinherit+0xa0>
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <xTaskPriorityDisinherit+0xd0>)
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4a09      	ldr	r2, [pc, #36]	; (80060dc <xTaskPriorityDisinherit+0xd4>)
 80060b6:	441a      	add	r2, r3
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f7fe fa21 	bl	8004506 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060c8:	697b      	ldr	r3, [r7, #20]
	}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000750 	.word	0x20000750
 80060d8:	20000c2c 	.word	0x20000c2c
 80060dc:	20000754 	.word	0x20000754

080060e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80060ee:	2301      	movs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d068      	beq.n	80061ca <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	e7fe      	b.n	8006112 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d902      	bls.n	8006124 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	e002      	b.n	800612a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006128:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	429a      	cmp	r2, r3
 8006132:	d04a      	beq.n	80061ca <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	429a      	cmp	r2, r3
 800613c:	d145      	bne.n	80061ca <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800613e:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	429a      	cmp	r2, r3
 8006146:	d109      	bne.n	800615c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	60bb      	str	r3, [r7, #8]
 800615a:	e7fe      	b.n	800615a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	db04      	blt.n	800617a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	6959      	ldr	r1, [r3, #20]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4a13      	ldr	r2, [pc, #76]	; (80061d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800618a:	4413      	add	r3, r2
 800618c:	4299      	cmp	r1, r3
 800618e:	d11c      	bne.n	80061ca <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	3304      	adds	r3, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fa13 	bl	80045c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d903      	bls.n	80061ae <vTaskPriorityDisinheritAfterTimeout+0xce>
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4a07      	ldr	r2, [pc, #28]	; (80061d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80061bc:	441a      	add	r2, r3
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7fe f99e 	bl	8004506 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061ca:	bf00      	nop
 80061cc:	3720      	adds	r7, #32
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000750 	.word	0x20000750
 80061d8:	20000754 	.word	0x20000754
 80061dc:	20000c2c 	.word	0x20000c2c

080061e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <pvTaskIncrementMutexHeldCount+0x24>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80061ec:	4b05      	ldr	r3, [pc, #20]	; (8006204 <pvTaskIncrementMutexHeldCount+0x24>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061f2:	3201      	adds	r2, #1
 80061f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80061f6:	4b03      	ldr	r3, [pc, #12]	; (8006204 <pvTaskIncrementMutexHeldCount+0x24>)
 80061f8:	681b      	ldr	r3, [r3, #0]
	}
 80061fa:	4618      	mov	r0, r3
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	20000750 	.word	0x20000750

08006208 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006212:	4b21      	ldr	r3, [pc, #132]	; (8006298 <prvAddCurrentTaskToDelayedList+0x90>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006218:	4b20      	ldr	r3, [pc, #128]	; (800629c <prvAddCurrentTaskToDelayedList+0x94>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3304      	adds	r3, #4
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe f9ce 	bl	80045c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d10a      	bne.n	8006242 <prvAddCurrentTaskToDelayedList+0x3a>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006232:	4b1a      	ldr	r3, [pc, #104]	; (800629c <prvAddCurrentTaskToDelayedList+0x94>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4819      	ldr	r0, [pc, #100]	; (80062a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800623c:	f7fe f963 	bl	8004506 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006240:	e026      	b.n	8006290 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4413      	add	r3, r2
 8006248:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <prvAddCurrentTaskToDelayedList+0x94>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	429a      	cmp	r2, r3
 8006258:	d209      	bcs.n	800626e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4b0f      	ldr	r3, [pc, #60]	; (800629c <prvAddCurrentTaskToDelayedList+0x94>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3304      	adds	r3, #4
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	f7fe f971 	bl	800454e <vListInsert>
}
 800626c:	e010      	b.n	8006290 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800626e:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <prvAddCurrentTaskToDelayedList+0x94>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f7fe f967 	bl	800454e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	429a      	cmp	r2, r3
 8006288:	d202      	bcs.n	8006290 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800628a:	4a08      	ldr	r2, [pc, #32]	; (80062ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6013      	str	r3, [r2, #0]
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000c28 	.word	0x20000c28
 800629c:	20000750 	.word	0x20000750
 80062a0:	20000c10 	.word	0x20000c10
 80062a4:	20000be0 	.word	0x20000be0
 80062a8:	20000bdc 	.word	0x20000bdc
 80062ac:	20000c44 	.word	0x20000c44

080062b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062ba:	f000 faff 	bl	80068bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062be:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <xTimerCreateTimerTask+0x80>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d021      	beq.n	800630a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062ce:	1d3a      	adds	r2, r7, #4
 80062d0:	f107 0108 	add.w	r1, r7, #8
 80062d4:	f107 030c 	add.w	r3, r7, #12
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe f8cd 	bl	8004478 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	9202      	str	r2, [sp, #8]
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	2302      	movs	r3, #2
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	2300      	movs	r3, #0
 80062ee:	460a      	mov	r2, r1
 80062f0:	4910      	ldr	r1, [pc, #64]	; (8006334 <xTimerCreateTimerTask+0x84>)
 80062f2:	4811      	ldr	r0, [pc, #68]	; (8006338 <xTimerCreateTimerTask+0x88>)
 80062f4:	f7fe ffea 	bl	80052cc <xTaskCreateStatic>
 80062f8:	4602      	mov	r2, r0
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <xTimerCreateTimerTask+0x8c>)
 80062fc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062fe:	4b0f      	ldr	r3, [pc, #60]	; (800633c <xTimerCreateTimerTask+0x8c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006306:	2301      	movs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <xTimerCreateTimerTask+0x74>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	e7fe      	b.n	8006322 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006324:	697b      	ldr	r3, [r7, #20]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000c80 	.word	0x20000c80
 8006334:	08007a88 	.word	0x08007a88
 8006338:	08006471 	.word	0x08006471
 800633c:	20000c84 	.word	0x20000c84

08006340 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800634e:	2300      	movs	r3, #0
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <xTimerGenericCommand+0x2c>
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	623b      	str	r3, [r7, #32]
 800636a:	e7fe      	b.n	800636a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800636c:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <xTimerGenericCommand+0x94>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d02a      	beq.n	80063ca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b05      	cmp	r3, #5
 8006384:	dc18      	bgt.n	80063b8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006386:	f7ff fdb9 	bl	8005efc <xTaskGetSchedulerState>
 800638a:	4603      	mov	r3, r0
 800638c:	2b02      	cmp	r3, #2
 800638e:	d109      	bne.n	80063a4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006390:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <xTimerGenericCommand+0x94>)
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	f107 0110 	add.w	r1, r7, #16
 8006398:	2300      	movs	r3, #0
 800639a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639c:	f7fe faa0 	bl	80048e0 <xQueueGenericSend>
 80063a0:	6278      	str	r0, [r7, #36]	; 0x24
 80063a2:	e012      	b.n	80063ca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <xTimerGenericCommand+0x94>)
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	f107 0110 	add.w	r1, r7, #16
 80063ac:	2300      	movs	r3, #0
 80063ae:	2200      	movs	r2, #0
 80063b0:	f7fe fa96 	bl	80048e0 <xQueueGenericSend>
 80063b4:	6278      	str	r0, [r7, #36]	; 0x24
 80063b6:	e008      	b.n	80063ca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <xTimerGenericCommand+0x94>)
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	f107 0110 	add.w	r1, r7, #16
 80063c0:	2300      	movs	r3, #0
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	f7fe fb86 	bl	8004ad4 <xQueueGenericSendFromISR>
 80063c8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3728      	adds	r7, #40	; 0x28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000c80 	.word	0x20000c80

080063d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af02      	add	r7, sp, #8
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e2:	4b22      	ldr	r3, [pc, #136]	; (800646c <prvProcessExpiredTimer+0x94>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe f8e5 	bl	80045c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d021      	beq.n	8006448 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	18d1      	adds	r1, r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	6978      	ldr	r0, [r7, #20]
 8006412:	f000 f8d1 	bl	80065b8 <prvInsertTimerInActiveList>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01e      	beq.n	800645a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800641c:	2300      	movs	r3, #0
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	2100      	movs	r1, #0
 8006426:	6978      	ldr	r0, [r7, #20]
 8006428:	f7ff ff8a 	bl	8006340 <xTimerGenericCommand>
 800642c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d112      	bne.n	800645a <prvProcessExpiredTimer+0x82>
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	e7fe      	b.n	8006446 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	6978      	ldr	r0, [r7, #20]
 8006460:	4798      	blx	r3
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000c78 	.word	0x20000c78

08006470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006478:	f107 0308 	add.w	r3, r7, #8
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f857 	bl	8006530 <prvGetNextExpireTime>
 8006482:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4619      	mov	r1, r3
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f803 	bl	8006494 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800648e:	f000 f8d5 	bl	800663c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006492:	e7f1      	b.n	8006478 <prvTimerTask+0x8>

08006494 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800649e:	f7ff f94b 	bl	8005738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064a2:	f107 0308 	add.w	r3, r7, #8
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 f866 	bl	8006578 <prvSampleTimeNow>
 80064ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d130      	bne.n	8006516 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <prvProcessTimerOrBlockTask+0x3c>
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d806      	bhi.n	80064d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064c2:	f7ff f947 	bl	8005754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ff85 	bl	80063d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064ce:	e024      	b.n	800651a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064d6:	4b13      	ldr	r3, [pc, #76]	; (8006524 <prvProcessTimerOrBlockTask+0x90>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <prvProcessTimerOrBlockTask+0x50>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <prvProcessTimerOrBlockTask+0x52>
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <prvProcessTimerOrBlockTask+0x94>)
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	4619      	mov	r1, r3
 80064f6:	f7fe feb5 	bl	8005264 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064fa:	f7ff f92b 	bl	8005754 <xTaskResumeAll>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006504:	4b09      	ldr	r3, [pc, #36]	; (800652c <prvProcessTimerOrBlockTask+0x98>)
 8006506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	f3bf 8f6f 	isb	sy
}
 8006514:	e001      	b.n	800651a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006516:	f7ff f91d 	bl	8005754 <xTaskResumeAll>
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000c7c 	.word	0x20000c7c
 8006528:	20000c80 	.word	0x20000c80
 800652c:	e000ed04 	.word	0xe000ed04

08006530 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006538:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <prvGetNextExpireTime+0x44>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <prvGetNextExpireTime+0x16>
 8006542:	2201      	movs	r2, #1
 8006544:	e000      	b.n	8006548 <prvGetNextExpireTime+0x18>
 8006546:	2200      	movs	r2, #0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <prvGetNextExpireTime+0x44>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	e001      	b.n	8006564 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006564:	68fb      	ldr	r3, [r7, #12]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000c78 	.word	0x20000c78

08006578 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006580:	f7ff f984 	bl	800588c <xTaskGetTickCount>
 8006584:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <prvSampleTimeNow+0x3c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	429a      	cmp	r2, r3
 800658e:	d205      	bcs.n	800659c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006590:	f000 f930 	bl	80067f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e002      	b.n	80065a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065a2:	4a04      	ldr	r2, [pc, #16]	; (80065b4 <prvSampleTimeNow+0x3c>)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065a8:	68fb      	ldr	r3, [r7, #12]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000c88 	.word	0x20000c88

080065b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d812      	bhi.n	8006604 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	1ad2      	subs	r2, r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d302      	bcc.n	80065f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065ec:	2301      	movs	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e01b      	b.n	800662a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065f2:	4b10      	ldr	r3, [pc, #64]	; (8006634 <prvInsertTimerInActiveList+0x7c>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f7fd ffa6 	bl	800454e <vListInsert>
 8006602:	e012      	b.n	800662a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d206      	bcs.n	800661a <prvInsertTimerInActiveList+0x62>
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d302      	bcc.n	800661a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006614:	2301      	movs	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	e007      	b.n	800662a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800661a:	4b07      	ldr	r3, [pc, #28]	; (8006638 <prvInsertTimerInActiveList+0x80>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3304      	adds	r3, #4
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f7fd ff92 	bl	800454e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800662a:	697b      	ldr	r3, [r7, #20]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	20000c7c 	.word	0x20000c7c
 8006638:	20000c78 	.word	0x20000c78

0800663c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08e      	sub	sp, #56	; 0x38
 8006640:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006642:	e0c6      	b.n	80067d2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	da17      	bge.n	800667a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800664a:	1d3b      	adds	r3, r7, #4
 800664c:	3304      	adds	r3, #4
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d109      	bne.n	800666a <prvProcessReceivedCommands+0x2e>
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e7fe      	b.n	8006668 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006670:	6850      	ldr	r0, [r2, #4]
 8006672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006674:	6892      	ldr	r2, [r2, #8]
 8006676:	4611      	mov	r1, r2
 8006678:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f2c0 80a7 	blt.w	80067d0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d004      	beq.n	8006698 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	3304      	adds	r3, #4
 8006692:	4618      	mov	r0, r3
 8006694:	f7fd ff94 	bl	80045c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006698:	463b      	mov	r3, r7
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff ff6c 	bl	8006578 <prvSampleTimeNow>
 80066a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b09      	cmp	r3, #9
 80066a6:	f200 8094 	bhi.w	80067d2 <prvProcessReceivedCommands+0x196>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <prvProcessReceivedCommands+0x74>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066d9 	.word	0x080066d9
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066d9 	.word	0x080066d9
 80066bc:	0800674b 	.word	0x0800674b
 80066c0:	0800675f 	.word	0x0800675f
 80066c4:	080067a7 	.word	0x080067a7
 80066c8:	080066d9 	.word	0x080066d9
 80066cc:	080066d9 	.word	0x080066d9
 80066d0:	0800674b 	.word	0x0800674b
 80066d4:	0800675f 	.word	0x0800675f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	18d1      	adds	r1, r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f8:	f7ff ff5e 	bl	80065b8 <prvInsertTimerInActiveList>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d067      	beq.n	80067d2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006708:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d05c      	beq.n	80067d2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	441a      	add	r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	2300      	movs	r3, #0
 8006726:	2100      	movs	r1, #0
 8006728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800672a:	f7ff fe09 	bl	8006340 <xTimerGenericCommand>
 800672e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d14d      	bne.n	80067d2 <prvProcessReceivedCommands+0x196>
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	e7fe      	b.n	8006748 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800675c:	e039      	b.n	80067d2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	b2da      	uxtb	r2, r3
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <prvProcessReceivedCommands+0x156>
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	e7fe      	b.n	8006790 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	18d1      	adds	r1, r2, r3
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a0:	f7ff ff0a 	bl	80065b8 <prvInsertTimerInActiveList>
					break;
 80067a4:	e015      	b.n	80067d2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80067b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b6:	f000 fbc5 	bl	8006f44 <vPortFree>
 80067ba:	e00a      	b.n	80067d2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067ce:	e000      	b.n	80067d2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067d2:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <prvProcessReceivedCommands+0x1b4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	1d39      	adds	r1, r7, #4
 80067d8:	2200      	movs	r2, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fa0e 	bl	8004bfc <xQueueReceive>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f47f af2e 	bne.w	8006644 <prvProcessReceivedCommands+0x8>
	}
}
 80067e8:	bf00      	nop
 80067ea:	3730      	adds	r7, #48	; 0x30
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000c80 	.word	0x20000c80

080067f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067fa:	e047      	b.n	800688c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067fc:	4b2d      	ldr	r3, [pc, #180]	; (80068b4 <prvSwitchTimerLists+0xc0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006806:	4b2b      	ldr	r3, [pc, #172]	; (80068b4 <prvSwitchTimerLists+0xc0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3304      	adds	r3, #4
 8006814:	4618      	mov	r0, r3
 8006816:	f7fd fed3 	bl	80045c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d02d      	beq.n	800688c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	429a      	cmp	r2, r3
 8006840:	d90e      	bls.n	8006860 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800684e:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <prvSwitchTimerLists+0xc0>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3304      	adds	r3, #4
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f7fd fe78 	bl	800454e <vListInsert>
 800685e:	e015      	b.n	800688c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006860:	2300      	movs	r3, #0
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	2300      	movs	r3, #0
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	2100      	movs	r1, #0
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff fd68 	bl	8006340 <xTimerGenericCommand>
 8006870:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d109      	bne.n	800688c <prvSwitchTimerLists+0x98>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	e7fe      	b.n	800688a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <prvSwitchTimerLists+0xc0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1b2      	bne.n	80067fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <prvSwitchTimerLists+0xc0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <prvSwitchTimerLists+0xc4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a04      	ldr	r2, [pc, #16]	; (80068b4 <prvSwitchTimerLists+0xc0>)
 80068a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068a4:	4a04      	ldr	r2, [pc, #16]	; (80068b8 <prvSwitchTimerLists+0xc4>)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	6013      	str	r3, [r2, #0]
}
 80068aa:	bf00      	nop
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000c78 	.word	0x20000c78
 80068b8:	20000c7c 	.word	0x20000c7c

080068bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068c2:	f000 f963 	bl	8006b8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068c6:	4b15      	ldr	r3, [pc, #84]	; (800691c <prvCheckForValidListAndQueue+0x60>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d120      	bne.n	8006910 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068ce:	4814      	ldr	r0, [pc, #80]	; (8006920 <prvCheckForValidListAndQueue+0x64>)
 80068d0:	f7fd fdec 	bl	80044ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068d4:	4813      	ldr	r0, [pc, #76]	; (8006924 <prvCheckForValidListAndQueue+0x68>)
 80068d6:	f7fd fde9 	bl	80044ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068da:	4b13      	ldr	r3, [pc, #76]	; (8006928 <prvCheckForValidListAndQueue+0x6c>)
 80068dc:	4a10      	ldr	r2, [pc, #64]	; (8006920 <prvCheckForValidListAndQueue+0x64>)
 80068de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068e0:	4b12      	ldr	r3, [pc, #72]	; (800692c <prvCheckForValidListAndQueue+0x70>)
 80068e2:	4a10      	ldr	r2, [pc, #64]	; (8006924 <prvCheckForValidListAndQueue+0x68>)
 80068e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068e6:	2300      	movs	r3, #0
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	4b11      	ldr	r3, [pc, #68]	; (8006930 <prvCheckForValidListAndQueue+0x74>)
 80068ec:	4a11      	ldr	r2, [pc, #68]	; (8006934 <prvCheckForValidListAndQueue+0x78>)
 80068ee:	2110      	movs	r1, #16
 80068f0:	200a      	movs	r0, #10
 80068f2:	f7fd fef7 	bl	80046e4 <xQueueGenericCreateStatic>
 80068f6:	4602      	mov	r2, r0
 80068f8:	4b08      	ldr	r3, [pc, #32]	; (800691c <prvCheckForValidListAndQueue+0x60>)
 80068fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068fc:	4b07      	ldr	r3, [pc, #28]	; (800691c <prvCheckForValidListAndQueue+0x60>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <prvCheckForValidListAndQueue+0x60>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	490b      	ldr	r1, [pc, #44]	; (8006938 <prvCheckForValidListAndQueue+0x7c>)
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fc82 	bl	8005214 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006910:	f000 f96a 	bl	8006be8 <vPortExitCritical>
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000c80 	.word	0x20000c80
 8006920:	20000c50 	.word	0x20000c50
 8006924:	20000c64 	.word	0x20000c64
 8006928:	20000c78 	.word	0x20000c78
 800692c:	20000c7c 	.word	0x20000c7c
 8006930:	20000d2c 	.word	0x20000d2c
 8006934:	20000c8c 	.word	0x20000c8c
 8006938:	08007a90 	.word	0x08007a90

0800693c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3b04      	subs	r3, #4
 800694c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3b04      	subs	r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f023 0201 	bic.w	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3b04      	subs	r3, #4
 800696a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800696c:	4a0c      	ldr	r2, [pc, #48]	; (80069a0 <pxPortInitialiseStack+0x64>)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3b14      	subs	r3, #20
 8006976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3b04      	subs	r3, #4
 8006982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f06f 0202 	mvn.w	r2, #2
 800698a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3b20      	subs	r3, #32
 8006990:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006992:	68fb      	ldr	r3, [r7, #12]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	080069a5 	.word	0x080069a5

080069a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069ae:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <prvTaskExitError+0x50>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b6:	d009      	beq.n	80069cc <prvTaskExitError+0x28>
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	e7fe      	b.n	80069ca <prvTaskExitError+0x26>
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069de:	bf00      	nop
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0fc      	beq.n	80069e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000000c 	.word	0x2000000c
	...

08006a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <pxCurrentTCBConst2>)
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6808      	ldr	r0, [r1, #0]
 8006a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	f380 8809 	msr	PSP, r0
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	4770      	bx	lr
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst2>:
 8006a20:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a28:	4808      	ldr	r0, [pc, #32]	; (8006a4c <prvPortStartFirstTask+0x24>)
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	6800      	ldr	r0, [r0, #0]
 8006a2e:	f380 8808 	msr	MSP, r0
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8814 	msr	CONTROL, r0
 8006a3a:	b662      	cpsie	i
 8006a3c:	b661      	cpsie	f
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	df00      	svc	0
 8006a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a4a:	bf00      	nop
 8006a4c:	e000ed08 	.word	0xe000ed08

08006a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a56:	4b44      	ldr	r3, [pc, #272]	; (8006b68 <xPortStartScheduler+0x118>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a44      	ldr	r2, [pc, #272]	; (8006b6c <xPortStartScheduler+0x11c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d109      	bne.n	8006a74 <xPortStartScheduler+0x24>
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	e7fe      	b.n	8006a72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a74:	4b3c      	ldr	r3, [pc, #240]	; (8006b68 <xPortStartScheduler+0x118>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a3d      	ldr	r2, [pc, #244]	; (8006b70 <xPortStartScheduler+0x120>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d109      	bne.n	8006a92 <xPortStartScheduler+0x42>
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e7fe      	b.n	8006a90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a92:	4b38      	ldr	r3, [pc, #224]	; (8006b74 <xPortStartScheduler+0x124>)
 8006a94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	22ff      	movs	r2, #255	; 0xff
 8006aa2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <xPortStartScheduler+0x128>)
 8006ab8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aba:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006abc:	2207      	movs	r2, #7
 8006abe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ac0:	e009      	b.n	8006ad6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006ac2:	4b2e      	ldr	r3, [pc, #184]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	4a2c      	ldr	r2, [pc, #176]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006aca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b80      	cmp	r3, #128	; 0x80
 8006ae0:	d0ef      	beq.n	8006ac2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ae2:	4b26      	ldr	r3, [pc, #152]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1c3 0307 	rsb	r3, r3, #7
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d009      	beq.n	8006b02 <xPortStartScheduler+0xb2>
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	60bb      	str	r3, [r7, #8]
 8006b00:	e7fe      	b.n	8006b00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b02:	4b1e      	ldr	r3, [pc, #120]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	4a1c      	ldr	r2, [pc, #112]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b14:	4a19      	ldr	r2, [pc, #100]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b20:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <xPortStartScheduler+0x130>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <xPortStartScheduler+0x130>)
 8006b26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b2c:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <xPortStartScheduler+0x130>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <xPortStartScheduler+0x130>)
 8006b32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b38:	f000 f8d6 	bl	8006ce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b3c:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <xPortStartScheduler+0x134>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b42:	f000 f8f5 	bl	8006d30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b46:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <xPortStartScheduler+0x138>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a0f      	ldr	r2, [pc, #60]	; (8006b88 <xPortStartScheduler+0x138>)
 8006b4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b52:	f7ff ff69 	bl	8006a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b56:	f7fe ff61 	bl	8005a1c <vTaskSwitchContext>
	prvTaskExitError();
 8006b5a:	f7ff ff23 	bl	80069a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	e000ed00 	.word	0xe000ed00
 8006b6c:	410fc271 	.word	0x410fc271
 8006b70:	410fc270 	.word	0x410fc270
 8006b74:	e000e400 	.word	0xe000e400
 8006b78:	20000d7c 	.word	0x20000d7c
 8006b7c:	20000d80 	.word	0x20000d80
 8006b80:	e000ed20 	.word	0xe000ed20
 8006b84:	2000000c 	.word	0x2000000c
 8006b88:	e000ef34 	.word	0xe000ef34

08006b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <vPortEnterCritical+0x54>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	4a0d      	ldr	r2, [pc, #52]	; (8006be0 <vPortEnterCritical+0x54>)
 8006bac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bae:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <vPortEnterCritical+0x54>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d10e      	bne.n	8006bd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <vPortEnterCritical+0x58>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <vPortEnterCritical+0x48>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	e7fe      	b.n	8006bd2 <vPortEnterCritical+0x46>
	}
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	2000000c 	.word	0x2000000c
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bee:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <vPortExitCritical+0x4c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <vPortExitCritical+0x22>
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	607b      	str	r3, [r7, #4]
 8006c08:	e7fe      	b.n	8006c08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <vPortExitCritical+0x4c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	4a08      	ldr	r2, [pc, #32]	; (8006c34 <vPortExitCritical+0x4c>)
 8006c12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c14:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <vPortExitCritical+0x4c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <vPortExitCritical+0x3e>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	2000000c 	.word	0x2000000c
	...

08006c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c40:	f3ef 8009 	mrs	r0, PSP
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <pxCurrentTCBConst>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	f01e 0f10 	tst.w	lr, #16
 8006c50:	bf08      	it	eq
 8006c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	6010      	str	r0, [r2, #0]
 8006c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c64:	f380 8811 	msr	BASEPRI, r0
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f7fe fed4 	bl	8005a1c <vTaskSwitchContext>
 8006c74:	f04f 0000 	mov.w	r0, #0
 8006c78:	f380 8811 	msr	BASEPRI, r0
 8006c7c:	bc09      	pop	{r0, r3}
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c86:	f01e 0f10 	tst.w	lr, #16
 8006c8a:	bf08      	it	eq
 8006c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c90:	f380 8809 	msr	PSP, r0
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w

08006ca0 <pxCurrentTCBConst>:
 8006ca0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cc0:	f7fe fdf4 	bl	80058ac <xTaskIncrementTick>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <SysTick_Handler+0x3c>)
 8006ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cec:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <vPortSetupTimerInterrupt+0x34>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cf2:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <vPortSetupTimerInterrupt+0x38>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <vPortSetupTimerInterrupt+0x3c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a0a      	ldr	r2, [pc, #40]	; (8006d28 <vPortSetupTimerInterrupt+0x40>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	099b      	lsrs	r3, r3, #6
 8006d04:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <vPortSetupTimerInterrupt+0x44>)
 8006d06:	3b01      	subs	r3, #1
 8006d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d0a:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <vPortSetupTimerInterrupt+0x34>)
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	601a      	str	r2, [r3, #0]
}
 8006d10:	bf00      	nop
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	e000e010 	.word	0xe000e010
 8006d20:	e000e018 	.word	0xe000e018
 8006d24:	20000000 	.word	0x20000000
 8006d28:	10624dd3 	.word	0x10624dd3
 8006d2c:	e000e014 	.word	0xe000e014

08006d30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d40 <vPortEnableVFP+0x10>
 8006d34:	6801      	ldr	r1, [r0, #0]
 8006d36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d3a:	6001      	str	r1, [r0, #0]
 8006d3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d3e:	bf00      	nop
 8006d40:	e000ed88 	.word	0xe000ed88

08006d44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d4a:	f3ef 8305 	mrs	r3, IPSR
 8006d4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b0f      	cmp	r3, #15
 8006d54:	d913      	bls.n	8006d7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <vPortValidateInterruptPriority+0x6c>)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d60:	4b14      	ldr	r3, [pc, #80]	; (8006db4 <vPortValidateInterruptPriority+0x70>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	7afa      	ldrb	r2, [r7, #11]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d209      	bcs.n	8006d7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	607b      	str	r3, [r7, #4]
 8006d7c:	e7fe      	b.n	8006d7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d7e:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <vPortValidateInterruptPriority+0x74>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <vPortValidateInterruptPriority+0x78>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d909      	bls.n	8006da2 <vPortValidateInterruptPriority+0x5e>
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	e7fe      	b.n	8006da0 <vPortValidateInterruptPriority+0x5c>
	}
 8006da2:	bf00      	nop
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e000e3f0 	.word	0xe000e3f0
 8006db4:	20000d7c 	.word	0x20000d7c
 8006db8:	e000ed0c 	.word	0xe000ed0c
 8006dbc:	20000d80 	.word	0x20000d80

08006dc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dcc:	f7fe fcb4 	bl	8005738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dd0:	4b57      	ldr	r3, [pc, #348]	; (8006f30 <pvPortMalloc+0x170>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006dd8:	f000 f90c 	bl	8006ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ddc:	4b55      	ldr	r3, [pc, #340]	; (8006f34 <pvPortMalloc+0x174>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 808c 	bne.w	8006f02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01c      	beq.n	8006e2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006df0:	2208      	movs	r2, #8
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d013      	beq.n	8006e2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f023 0307 	bic.w	r3, r3, #7
 8006e08:	3308      	adds	r3, #8
 8006e0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d009      	beq.n	8006e2a <pvPortMalloc+0x6a>
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e7fe      	b.n	8006e28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d068      	beq.n	8006f02 <pvPortMalloc+0x142>
 8006e30:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <pvPortMalloc+0x178>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d863      	bhi.n	8006f02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e3a:	4b40      	ldr	r3, [pc, #256]	; (8006f3c <pvPortMalloc+0x17c>)
 8006e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e3e:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <pvPortMalloc+0x17c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e44:	e004      	b.n	8006e50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d903      	bls.n	8006e62 <pvPortMalloc+0xa2>
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f1      	bne.n	8006e46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e62:	4b33      	ldr	r3, [pc, #204]	; (8006f30 <pvPortMalloc+0x170>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d04a      	beq.n	8006f02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2208      	movs	r2, #8
 8006e72:	4413      	add	r3, r2
 8006e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	1ad2      	subs	r2, r2, r3
 8006e86:	2308      	movs	r3, #8
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d91e      	bls.n	8006ecc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <pvPortMalloc+0xf4>
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	e7fe      	b.n	8006eb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ec6:	69b8      	ldr	r0, [r7, #24]
 8006ec8:	f000 f8f6 	bl	80070b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <pvPortMalloc+0x178>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	4a18      	ldr	r2, [pc, #96]	; (8006f38 <pvPortMalloc+0x178>)
 8006ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eda:	4b17      	ldr	r3, [pc, #92]	; (8006f38 <pvPortMalloc+0x178>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4b18      	ldr	r3, [pc, #96]	; (8006f40 <pvPortMalloc+0x180>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d203      	bcs.n	8006eee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <pvPortMalloc+0x178>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <pvPortMalloc+0x180>)
 8006eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	4b10      	ldr	r3, [pc, #64]	; (8006f34 <pvPortMalloc+0x174>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f02:	f7fe fc27 	bl	8005754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d009      	beq.n	8006f24 <pvPortMalloc+0x164>
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	e7fe      	b.n	8006f22 <pvPortMalloc+0x162>
	return pvReturn;
 8006f24:	69fb      	ldr	r3, [r7, #28]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3728      	adds	r7, #40	; 0x28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000498c 	.word	0x2000498c
 8006f34:	20004998 	.word	0x20004998
 8006f38:	20004990 	.word	0x20004990
 8006f3c:	20004984 	.word	0x20004984
 8006f40:	20004994 	.word	0x20004994

08006f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d046      	beq.n	8006fe4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f56:	2308      	movs	r3, #8
 8006f58:	425b      	negs	r3, r3
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	4b20      	ldr	r3, [pc, #128]	; (8006fec <vPortFree+0xa8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <vPortFree+0x42>
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e7fe      	b.n	8006f84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <vPortFree+0x5e>
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	e7fe      	b.n	8006fa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	4b11      	ldr	r3, [pc, #68]	; (8006fec <vPortFree+0xa8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4013      	ands	r3, r2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d019      	beq.n	8006fe4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d115      	bne.n	8006fe4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <vPortFree+0xa8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	43db      	mvns	r3, r3
 8006fc2:	401a      	ands	r2, r3
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fc8:	f7fe fbb6 	bl	8005738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <vPortFree+0xac>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <vPortFree+0xac>)
 8006fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fda:	6938      	ldr	r0, [r7, #16]
 8006fdc:	f000 f86c 	bl	80070b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006fe0:	f7fe fbb8 	bl	8005754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fe4:	bf00      	nop
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20004998 	.word	0x20004998
 8006ff0:	20004990 	.word	0x20004990

08006ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007000:	4b27      	ldr	r3, [pc, #156]	; (80070a0 <prvHeapInit+0xac>)
 8007002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3307      	adds	r3, #7
 8007012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <prvHeapInit+0xac>)
 8007024:	4413      	add	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800702c:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <prvHeapInit+0xb0>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007032:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <prvHeapInit+0xb0>)
 8007034:	2200      	movs	r2, #0
 8007036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007040:	2208      	movs	r2, #8
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <prvHeapInit+0xb4>)
 8007054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <prvHeapInit+0xb4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <prvHeapInit+0xb4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007074:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <prvHeapInit+0xb4>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <prvHeapInit+0xb8>)
 8007082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <prvHeapInit+0xbc>)
 800708a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <prvHeapInit+0xc0>)
 800708e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	20000d84 	.word	0x20000d84
 80070a4:	20004984 	.word	0x20004984
 80070a8:	2000498c 	.word	0x2000498c
 80070ac:	20004994 	.word	0x20004994
 80070b0:	20004990 	.word	0x20004990
 80070b4:	20004998 	.word	0x20004998

080070b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070c0:	4b28      	ldr	r3, [pc, #160]	; (8007164 <prvInsertBlockIntoFreeList+0xac>)
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e002      	b.n	80070cc <prvInsertBlockIntoFreeList+0x14>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d8f7      	bhi.n	80070c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d108      	bne.n	80070fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	441a      	add	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d118      	bne.n	8007140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <prvInsertBlockIntoFreeList+0xb0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d00d      	beq.n	8007136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	441a      	add	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e008      	b.n	8007148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007136:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <prvInsertBlockIntoFreeList+0xb0>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e003      	b.n	8007148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	429a      	cmp	r2, r3
 800714e:	d002      	beq.n	8007156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20004984 	.word	0x20004984
 8007168:	2000498c 	.word	0x2000498c

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000010 	.word	0x20000010

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4e0d      	ldr	r6, [pc, #52]	; (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	; (80071b4 <__libc_init_array+0x3c>)
 800717e:	1ba4      	subs	r4, r4, r6
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2500      	movs	r5, #0
 8007184:	42a5      	cmp	r5, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4e0b      	ldr	r6, [pc, #44]	; (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	; (80071bc <__libc_init_array+0x44>)
 800718c:	f000 fc28 	bl	80079e0 <_init>
 8007190:	1ba4      	subs	r4, r4, r6
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2500      	movs	r5, #0
 8007196:	42a5      	cmp	r5, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071a0:	4798      	blx	r3
 80071a2:	3501      	adds	r5, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071aa:	4798      	blx	r3
 80071ac:	3501      	adds	r5, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	08007bc4 	.word	0x08007bc4
 80071b4:	08007bc4 	.word	0x08007bc4
 80071b8:	08007bc4 	.word	0x08007bc4
 80071bc:	08007bc8 	.word	0x08007bc8

080071c0 <memcpy>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	1e43      	subs	r3, r0, #1
 80071c4:	440a      	add	r2, r1
 80071c6:	4291      	cmp	r1, r2
 80071c8:	d100      	bne.n	80071cc <memcpy+0xc>
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d4:	e7f7      	b.n	80071c6 <memcpy+0x6>

080071d6 <memset>:
 80071d6:	4402      	add	r2, r0
 80071d8:	4603      	mov	r3, r0
 80071da:	4293      	cmp	r3, r2
 80071dc:	d100      	bne.n	80071e0 <memset+0xa>
 80071de:	4770      	bx	lr
 80071e0:	f803 1b01 	strb.w	r1, [r3], #1
 80071e4:	e7f9      	b.n	80071da <memset+0x4>
	...

080071e8 <siprintf>:
 80071e8:	b40e      	push	{r1, r2, r3}
 80071ea:	b500      	push	{lr}
 80071ec:	b09c      	sub	sp, #112	; 0x70
 80071ee:	ab1d      	add	r3, sp, #116	; 0x74
 80071f0:	9002      	str	r0, [sp, #8]
 80071f2:	9006      	str	r0, [sp, #24]
 80071f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071f8:	4809      	ldr	r0, [pc, #36]	; (8007220 <siprintf+0x38>)
 80071fa:	9107      	str	r1, [sp, #28]
 80071fc:	9104      	str	r1, [sp, #16]
 80071fe:	4909      	ldr	r1, [pc, #36]	; (8007224 <siprintf+0x3c>)
 8007200:	f853 2b04 	ldr.w	r2, [r3], #4
 8007204:	9105      	str	r1, [sp, #20]
 8007206:	6800      	ldr	r0, [r0, #0]
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	a902      	add	r1, sp, #8
 800720c:	f000 f866 	bl	80072dc <_svfiprintf_r>
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	b01c      	add	sp, #112	; 0x70
 8007218:	f85d eb04 	ldr.w	lr, [sp], #4
 800721c:	b003      	add	sp, #12
 800721e:	4770      	bx	lr
 8007220:	20000010 	.word	0x20000010
 8007224:	ffff0208 	.word	0xffff0208

08007228 <__ssputs_r>:
 8007228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800722c:	688e      	ldr	r6, [r1, #8]
 800722e:	429e      	cmp	r6, r3
 8007230:	4682      	mov	sl, r0
 8007232:	460c      	mov	r4, r1
 8007234:	4690      	mov	r8, r2
 8007236:	4699      	mov	r9, r3
 8007238:	d837      	bhi.n	80072aa <__ssputs_r+0x82>
 800723a:	898a      	ldrh	r2, [r1, #12]
 800723c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007240:	d031      	beq.n	80072a6 <__ssputs_r+0x7e>
 8007242:	6825      	ldr	r5, [r4, #0]
 8007244:	6909      	ldr	r1, [r1, #16]
 8007246:	1a6f      	subs	r7, r5, r1
 8007248:	6965      	ldr	r5, [r4, #20]
 800724a:	2302      	movs	r3, #2
 800724c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007250:	fb95 f5f3 	sdiv	r5, r5, r3
 8007254:	f109 0301 	add.w	r3, r9, #1
 8007258:	443b      	add	r3, r7
 800725a:	429d      	cmp	r5, r3
 800725c:	bf38      	it	cc
 800725e:	461d      	movcc	r5, r3
 8007260:	0553      	lsls	r3, r2, #21
 8007262:	d530      	bpl.n	80072c6 <__ssputs_r+0x9e>
 8007264:	4629      	mov	r1, r5
 8007266:	f000 fb21 	bl	80078ac <_malloc_r>
 800726a:	4606      	mov	r6, r0
 800726c:	b950      	cbnz	r0, 8007284 <__ssputs_r+0x5c>
 800726e:	230c      	movs	r3, #12
 8007270:	f8ca 3000 	str.w	r3, [sl]
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007284:	463a      	mov	r2, r7
 8007286:	6921      	ldr	r1, [r4, #16]
 8007288:	f7ff ff9a 	bl	80071c0 <memcpy>
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007296:	81a3      	strh	r3, [r4, #12]
 8007298:	6126      	str	r6, [r4, #16]
 800729a:	6165      	str	r5, [r4, #20]
 800729c:	443e      	add	r6, r7
 800729e:	1bed      	subs	r5, r5, r7
 80072a0:	6026      	str	r6, [r4, #0]
 80072a2:	60a5      	str	r5, [r4, #8]
 80072a4:	464e      	mov	r6, r9
 80072a6:	454e      	cmp	r6, r9
 80072a8:	d900      	bls.n	80072ac <__ssputs_r+0x84>
 80072aa:	464e      	mov	r6, r9
 80072ac:	4632      	mov	r2, r6
 80072ae:	4641      	mov	r1, r8
 80072b0:	6820      	ldr	r0, [r4, #0]
 80072b2:	f000 fa93 	bl	80077dc <memmove>
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	1b9b      	subs	r3, r3, r6
 80072ba:	60a3      	str	r3, [r4, #8]
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	441e      	add	r6, r3
 80072c0:	6026      	str	r6, [r4, #0]
 80072c2:	2000      	movs	r0, #0
 80072c4:	e7dc      	b.n	8007280 <__ssputs_r+0x58>
 80072c6:	462a      	mov	r2, r5
 80072c8:	f000 fb4a 	bl	8007960 <_realloc_r>
 80072cc:	4606      	mov	r6, r0
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d1e2      	bne.n	8007298 <__ssputs_r+0x70>
 80072d2:	6921      	ldr	r1, [r4, #16]
 80072d4:	4650      	mov	r0, sl
 80072d6:	f000 fa9b 	bl	8007810 <_free_r>
 80072da:	e7c8      	b.n	800726e <__ssputs_r+0x46>

080072dc <_svfiprintf_r>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	461d      	mov	r5, r3
 80072e2:	898b      	ldrh	r3, [r1, #12]
 80072e4:	061f      	lsls	r7, r3, #24
 80072e6:	b09d      	sub	sp, #116	; 0x74
 80072e8:	4680      	mov	r8, r0
 80072ea:	460c      	mov	r4, r1
 80072ec:	4616      	mov	r6, r2
 80072ee:	d50f      	bpl.n	8007310 <_svfiprintf_r+0x34>
 80072f0:	690b      	ldr	r3, [r1, #16]
 80072f2:	b96b      	cbnz	r3, 8007310 <_svfiprintf_r+0x34>
 80072f4:	2140      	movs	r1, #64	; 0x40
 80072f6:	f000 fad9 	bl	80078ac <_malloc_r>
 80072fa:	6020      	str	r0, [r4, #0]
 80072fc:	6120      	str	r0, [r4, #16]
 80072fe:	b928      	cbnz	r0, 800730c <_svfiprintf_r+0x30>
 8007300:	230c      	movs	r3, #12
 8007302:	f8c8 3000 	str.w	r3, [r8]
 8007306:	f04f 30ff 	mov.w	r0, #4294967295
 800730a:	e0c8      	b.n	800749e <_svfiprintf_r+0x1c2>
 800730c:	2340      	movs	r3, #64	; 0x40
 800730e:	6163      	str	r3, [r4, #20]
 8007310:	2300      	movs	r3, #0
 8007312:	9309      	str	r3, [sp, #36]	; 0x24
 8007314:	2320      	movs	r3, #32
 8007316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800731a:	2330      	movs	r3, #48	; 0x30
 800731c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007320:	9503      	str	r5, [sp, #12]
 8007322:	f04f 0b01 	mov.w	fp, #1
 8007326:	4637      	mov	r7, r6
 8007328:	463d      	mov	r5, r7
 800732a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800732e:	b10b      	cbz	r3, 8007334 <_svfiprintf_r+0x58>
 8007330:	2b25      	cmp	r3, #37	; 0x25
 8007332:	d13e      	bne.n	80073b2 <_svfiprintf_r+0xd6>
 8007334:	ebb7 0a06 	subs.w	sl, r7, r6
 8007338:	d00b      	beq.n	8007352 <_svfiprintf_r+0x76>
 800733a:	4653      	mov	r3, sl
 800733c:	4632      	mov	r2, r6
 800733e:	4621      	mov	r1, r4
 8007340:	4640      	mov	r0, r8
 8007342:	f7ff ff71 	bl	8007228 <__ssputs_r>
 8007346:	3001      	adds	r0, #1
 8007348:	f000 80a4 	beq.w	8007494 <_svfiprintf_r+0x1b8>
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	4453      	add	r3, sl
 8007350:	9309      	str	r3, [sp, #36]	; 0x24
 8007352:	783b      	ldrb	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 809d 	beq.w	8007494 <_svfiprintf_r+0x1b8>
 800735a:	2300      	movs	r3, #0
 800735c:	f04f 32ff 	mov.w	r2, #4294967295
 8007360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800736c:	931a      	str	r3, [sp, #104]	; 0x68
 800736e:	462f      	mov	r7, r5
 8007370:	2205      	movs	r2, #5
 8007372:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007376:	4850      	ldr	r0, [pc, #320]	; (80074b8 <_svfiprintf_r+0x1dc>)
 8007378:	f7f8 ff3a 	bl	80001f0 <memchr>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	b9d0      	cbnz	r0, 80073b6 <_svfiprintf_r+0xda>
 8007380:	06d9      	lsls	r1, r3, #27
 8007382:	bf44      	itt	mi
 8007384:	2220      	movmi	r2, #32
 8007386:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800738a:	071a      	lsls	r2, r3, #28
 800738c:	bf44      	itt	mi
 800738e:	222b      	movmi	r2, #43	; 0x2b
 8007390:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007394:	782a      	ldrb	r2, [r5, #0]
 8007396:	2a2a      	cmp	r2, #42	; 0x2a
 8007398:	d015      	beq.n	80073c6 <_svfiprintf_r+0xea>
 800739a:	9a07      	ldr	r2, [sp, #28]
 800739c:	462f      	mov	r7, r5
 800739e:	2000      	movs	r0, #0
 80073a0:	250a      	movs	r5, #10
 80073a2:	4639      	mov	r1, r7
 80073a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a8:	3b30      	subs	r3, #48	; 0x30
 80073aa:	2b09      	cmp	r3, #9
 80073ac:	d94d      	bls.n	800744a <_svfiprintf_r+0x16e>
 80073ae:	b1b8      	cbz	r0, 80073e0 <_svfiprintf_r+0x104>
 80073b0:	e00f      	b.n	80073d2 <_svfiprintf_r+0xf6>
 80073b2:	462f      	mov	r7, r5
 80073b4:	e7b8      	b.n	8007328 <_svfiprintf_r+0x4c>
 80073b6:	4a40      	ldr	r2, [pc, #256]	; (80074b8 <_svfiprintf_r+0x1dc>)
 80073b8:	1a80      	subs	r0, r0, r2
 80073ba:	fa0b f000 	lsl.w	r0, fp, r0
 80073be:	4318      	orrs	r0, r3
 80073c0:	9004      	str	r0, [sp, #16]
 80073c2:	463d      	mov	r5, r7
 80073c4:	e7d3      	b.n	800736e <_svfiprintf_r+0x92>
 80073c6:	9a03      	ldr	r2, [sp, #12]
 80073c8:	1d11      	adds	r1, r2, #4
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	9103      	str	r1, [sp, #12]
 80073ce:	2a00      	cmp	r2, #0
 80073d0:	db01      	blt.n	80073d6 <_svfiprintf_r+0xfa>
 80073d2:	9207      	str	r2, [sp, #28]
 80073d4:	e004      	b.n	80073e0 <_svfiprintf_r+0x104>
 80073d6:	4252      	negs	r2, r2
 80073d8:	f043 0302 	orr.w	r3, r3, #2
 80073dc:	9207      	str	r2, [sp, #28]
 80073de:	9304      	str	r3, [sp, #16]
 80073e0:	783b      	ldrb	r3, [r7, #0]
 80073e2:	2b2e      	cmp	r3, #46	; 0x2e
 80073e4:	d10c      	bne.n	8007400 <_svfiprintf_r+0x124>
 80073e6:	787b      	ldrb	r3, [r7, #1]
 80073e8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ea:	d133      	bne.n	8007454 <_svfiprintf_r+0x178>
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	9203      	str	r2, [sp, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	bfb8      	it	lt
 80073f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80073fc:	3702      	adds	r7, #2
 80073fe:	9305      	str	r3, [sp, #20]
 8007400:	4d2e      	ldr	r5, [pc, #184]	; (80074bc <_svfiprintf_r+0x1e0>)
 8007402:	7839      	ldrb	r1, [r7, #0]
 8007404:	2203      	movs	r2, #3
 8007406:	4628      	mov	r0, r5
 8007408:	f7f8 fef2 	bl	80001f0 <memchr>
 800740c:	b138      	cbz	r0, 800741e <_svfiprintf_r+0x142>
 800740e:	2340      	movs	r3, #64	; 0x40
 8007410:	1b40      	subs	r0, r0, r5
 8007412:	fa03 f000 	lsl.w	r0, r3, r0
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	4303      	orrs	r3, r0
 800741a:	3701      	adds	r7, #1
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	7839      	ldrb	r1, [r7, #0]
 8007420:	4827      	ldr	r0, [pc, #156]	; (80074c0 <_svfiprintf_r+0x1e4>)
 8007422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007426:	2206      	movs	r2, #6
 8007428:	1c7e      	adds	r6, r7, #1
 800742a:	f7f8 fee1 	bl	80001f0 <memchr>
 800742e:	2800      	cmp	r0, #0
 8007430:	d038      	beq.n	80074a4 <_svfiprintf_r+0x1c8>
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <_svfiprintf_r+0x1e8>)
 8007434:	bb13      	cbnz	r3, 800747c <_svfiprintf_r+0x1a0>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	3307      	adds	r3, #7
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	3308      	adds	r3, #8
 8007440:	9303      	str	r3, [sp, #12]
 8007442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007444:	444b      	add	r3, r9
 8007446:	9309      	str	r3, [sp, #36]	; 0x24
 8007448:	e76d      	b.n	8007326 <_svfiprintf_r+0x4a>
 800744a:	fb05 3202 	mla	r2, r5, r2, r3
 800744e:	2001      	movs	r0, #1
 8007450:	460f      	mov	r7, r1
 8007452:	e7a6      	b.n	80073a2 <_svfiprintf_r+0xc6>
 8007454:	2300      	movs	r3, #0
 8007456:	3701      	adds	r7, #1
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	4619      	mov	r1, r3
 800745c:	250a      	movs	r5, #10
 800745e:	4638      	mov	r0, r7
 8007460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007464:	3a30      	subs	r2, #48	; 0x30
 8007466:	2a09      	cmp	r2, #9
 8007468:	d903      	bls.n	8007472 <_svfiprintf_r+0x196>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0c8      	beq.n	8007400 <_svfiprintf_r+0x124>
 800746e:	9105      	str	r1, [sp, #20]
 8007470:	e7c6      	b.n	8007400 <_svfiprintf_r+0x124>
 8007472:	fb05 2101 	mla	r1, r5, r1, r2
 8007476:	2301      	movs	r3, #1
 8007478:	4607      	mov	r7, r0
 800747a:	e7f0      	b.n	800745e <_svfiprintf_r+0x182>
 800747c:	ab03      	add	r3, sp, #12
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	4622      	mov	r2, r4
 8007482:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <_svfiprintf_r+0x1ec>)
 8007484:	a904      	add	r1, sp, #16
 8007486:	4640      	mov	r0, r8
 8007488:	f3af 8000 	nop.w
 800748c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007490:	4681      	mov	r9, r0
 8007492:	d1d6      	bne.n	8007442 <_svfiprintf_r+0x166>
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	065b      	lsls	r3, r3, #25
 8007498:	f53f af35 	bmi.w	8007306 <_svfiprintf_r+0x2a>
 800749c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800749e:	b01d      	add	sp, #116	; 0x74
 80074a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a4:	ab03      	add	r3, sp, #12
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	4622      	mov	r2, r4
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <_svfiprintf_r+0x1ec>)
 80074ac:	a904      	add	r1, sp, #16
 80074ae:	4640      	mov	r0, r8
 80074b0:	f000 f882 	bl	80075b8 <_printf_i>
 80074b4:	e7ea      	b.n	800748c <_svfiprintf_r+0x1b0>
 80074b6:	bf00      	nop
 80074b8:	08007b88 	.word	0x08007b88
 80074bc:	08007b8e 	.word	0x08007b8e
 80074c0:	08007b92 	.word	0x08007b92
 80074c4:	00000000 	.word	0x00000000
 80074c8:	08007229 	.word	0x08007229

080074cc <_printf_common>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	4691      	mov	r9, r2
 80074d2:	461f      	mov	r7, r3
 80074d4:	688a      	ldr	r2, [r1, #8]
 80074d6:	690b      	ldr	r3, [r1, #16]
 80074d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074dc:	4293      	cmp	r3, r2
 80074de:	bfb8      	it	lt
 80074e0:	4613      	movlt	r3, r2
 80074e2:	f8c9 3000 	str.w	r3, [r9]
 80074e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074ea:	4606      	mov	r6, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	b112      	cbz	r2, 80074f6 <_printf_common+0x2a>
 80074f0:	3301      	adds	r3, #1
 80074f2:	f8c9 3000 	str.w	r3, [r9]
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	0699      	lsls	r1, r3, #26
 80074fa:	bf42      	ittt	mi
 80074fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007500:	3302      	addmi	r3, #2
 8007502:	f8c9 3000 	strmi.w	r3, [r9]
 8007506:	6825      	ldr	r5, [r4, #0]
 8007508:	f015 0506 	ands.w	r5, r5, #6
 800750c:	d107      	bne.n	800751e <_printf_common+0x52>
 800750e:	f104 0a19 	add.w	sl, r4, #25
 8007512:	68e3      	ldr	r3, [r4, #12]
 8007514:	f8d9 2000 	ldr.w	r2, [r9]
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	42ab      	cmp	r3, r5
 800751c:	dc28      	bgt.n	8007570 <_printf_common+0xa4>
 800751e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	3300      	adds	r3, #0
 8007526:	bf18      	it	ne
 8007528:	2301      	movne	r3, #1
 800752a:	0692      	lsls	r2, r2, #26
 800752c:	d42d      	bmi.n	800758a <_printf_common+0xbe>
 800752e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007532:	4639      	mov	r1, r7
 8007534:	4630      	mov	r0, r6
 8007536:	47c0      	blx	r8
 8007538:	3001      	adds	r0, #1
 800753a:	d020      	beq.n	800757e <_printf_common+0xb2>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	68e5      	ldr	r5, [r4, #12]
 8007540:	f8d9 2000 	ldr.w	r2, [r9]
 8007544:	f003 0306 	and.w	r3, r3, #6
 8007548:	2b04      	cmp	r3, #4
 800754a:	bf08      	it	eq
 800754c:	1aad      	subeq	r5, r5, r2
 800754e:	68a3      	ldr	r3, [r4, #8]
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	bf0c      	ite	eq
 8007554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007558:	2500      	movne	r5, #0
 800755a:	4293      	cmp	r3, r2
 800755c:	bfc4      	itt	gt
 800755e:	1a9b      	subgt	r3, r3, r2
 8007560:	18ed      	addgt	r5, r5, r3
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	341a      	adds	r4, #26
 8007568:	454d      	cmp	r5, r9
 800756a:	d11a      	bne.n	80075a2 <_printf_common+0xd6>
 800756c:	2000      	movs	r0, #0
 800756e:	e008      	b.n	8007582 <_printf_common+0xb6>
 8007570:	2301      	movs	r3, #1
 8007572:	4652      	mov	r2, sl
 8007574:	4639      	mov	r1, r7
 8007576:	4630      	mov	r0, r6
 8007578:	47c0      	blx	r8
 800757a:	3001      	adds	r0, #1
 800757c:	d103      	bne.n	8007586 <_printf_common+0xba>
 800757e:	f04f 30ff 	mov.w	r0, #4294967295
 8007582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007586:	3501      	adds	r5, #1
 8007588:	e7c3      	b.n	8007512 <_printf_common+0x46>
 800758a:	18e1      	adds	r1, r4, r3
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	2030      	movs	r0, #48	; 0x30
 8007590:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007594:	4422      	add	r2, r4
 8007596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800759a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800759e:	3302      	adds	r3, #2
 80075a0:	e7c5      	b.n	800752e <_printf_common+0x62>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4622      	mov	r2, r4
 80075a6:	4639      	mov	r1, r7
 80075a8:	4630      	mov	r0, r6
 80075aa:	47c0      	blx	r8
 80075ac:	3001      	adds	r0, #1
 80075ae:	d0e6      	beq.n	800757e <_printf_common+0xb2>
 80075b0:	f109 0901 	add.w	r9, r9, #1
 80075b4:	e7d8      	b.n	8007568 <_printf_common+0x9c>
	...

080075b8 <_printf_i>:
 80075b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80075c0:	460c      	mov	r4, r1
 80075c2:	7e09      	ldrb	r1, [r1, #24]
 80075c4:	b085      	sub	sp, #20
 80075c6:	296e      	cmp	r1, #110	; 0x6e
 80075c8:	4617      	mov	r7, r2
 80075ca:	4606      	mov	r6, r0
 80075cc:	4698      	mov	r8, r3
 80075ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075d0:	f000 80b3 	beq.w	800773a <_printf_i+0x182>
 80075d4:	d822      	bhi.n	800761c <_printf_i+0x64>
 80075d6:	2963      	cmp	r1, #99	; 0x63
 80075d8:	d036      	beq.n	8007648 <_printf_i+0x90>
 80075da:	d80a      	bhi.n	80075f2 <_printf_i+0x3a>
 80075dc:	2900      	cmp	r1, #0
 80075de:	f000 80b9 	beq.w	8007754 <_printf_i+0x19c>
 80075e2:	2958      	cmp	r1, #88	; 0x58
 80075e4:	f000 8083 	beq.w	80076ee <_printf_i+0x136>
 80075e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80075f0:	e032      	b.n	8007658 <_printf_i+0xa0>
 80075f2:	2964      	cmp	r1, #100	; 0x64
 80075f4:	d001      	beq.n	80075fa <_printf_i+0x42>
 80075f6:	2969      	cmp	r1, #105	; 0x69
 80075f8:	d1f6      	bne.n	80075e8 <_printf_i+0x30>
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	6813      	ldr	r3, [r2, #0]
 80075fe:	0605      	lsls	r5, r0, #24
 8007600:	f103 0104 	add.w	r1, r3, #4
 8007604:	d52a      	bpl.n	800765c <_printf_i+0xa4>
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6011      	str	r1, [r2, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	da03      	bge.n	8007616 <_printf_i+0x5e>
 800760e:	222d      	movs	r2, #45	; 0x2d
 8007610:	425b      	negs	r3, r3
 8007612:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007616:	486f      	ldr	r0, [pc, #444]	; (80077d4 <_printf_i+0x21c>)
 8007618:	220a      	movs	r2, #10
 800761a:	e039      	b.n	8007690 <_printf_i+0xd8>
 800761c:	2973      	cmp	r1, #115	; 0x73
 800761e:	f000 809d 	beq.w	800775c <_printf_i+0x1a4>
 8007622:	d808      	bhi.n	8007636 <_printf_i+0x7e>
 8007624:	296f      	cmp	r1, #111	; 0x6f
 8007626:	d020      	beq.n	800766a <_printf_i+0xb2>
 8007628:	2970      	cmp	r1, #112	; 0x70
 800762a:	d1dd      	bne.n	80075e8 <_printf_i+0x30>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	f043 0320 	orr.w	r3, r3, #32
 8007632:	6023      	str	r3, [r4, #0]
 8007634:	e003      	b.n	800763e <_printf_i+0x86>
 8007636:	2975      	cmp	r1, #117	; 0x75
 8007638:	d017      	beq.n	800766a <_printf_i+0xb2>
 800763a:	2978      	cmp	r1, #120	; 0x78
 800763c:	d1d4      	bne.n	80075e8 <_printf_i+0x30>
 800763e:	2378      	movs	r3, #120	; 0x78
 8007640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007644:	4864      	ldr	r0, [pc, #400]	; (80077d8 <_printf_i+0x220>)
 8007646:	e055      	b.n	80076f4 <_printf_i+0x13c>
 8007648:	6813      	ldr	r3, [r2, #0]
 800764a:	1d19      	adds	r1, r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6011      	str	r1, [r2, #0]
 8007650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007658:	2301      	movs	r3, #1
 800765a:	e08c      	b.n	8007776 <_printf_i+0x1be>
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6011      	str	r1, [r2, #0]
 8007660:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007664:	bf18      	it	ne
 8007666:	b21b      	sxthne	r3, r3
 8007668:	e7cf      	b.n	800760a <_printf_i+0x52>
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	6825      	ldr	r5, [r4, #0]
 800766e:	1d18      	adds	r0, r3, #4
 8007670:	6010      	str	r0, [r2, #0]
 8007672:	0628      	lsls	r0, r5, #24
 8007674:	d501      	bpl.n	800767a <_printf_i+0xc2>
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	e002      	b.n	8007680 <_printf_i+0xc8>
 800767a:	0668      	lsls	r0, r5, #25
 800767c:	d5fb      	bpl.n	8007676 <_printf_i+0xbe>
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	4854      	ldr	r0, [pc, #336]	; (80077d4 <_printf_i+0x21c>)
 8007682:	296f      	cmp	r1, #111	; 0x6f
 8007684:	bf14      	ite	ne
 8007686:	220a      	movne	r2, #10
 8007688:	2208      	moveq	r2, #8
 800768a:	2100      	movs	r1, #0
 800768c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007690:	6865      	ldr	r5, [r4, #4]
 8007692:	60a5      	str	r5, [r4, #8]
 8007694:	2d00      	cmp	r5, #0
 8007696:	f2c0 8095 	blt.w	80077c4 <_printf_i+0x20c>
 800769a:	6821      	ldr	r1, [r4, #0]
 800769c:	f021 0104 	bic.w	r1, r1, #4
 80076a0:	6021      	str	r1, [r4, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d13d      	bne.n	8007722 <_printf_i+0x16a>
 80076a6:	2d00      	cmp	r5, #0
 80076a8:	f040 808e 	bne.w	80077c8 <_printf_i+0x210>
 80076ac:	4665      	mov	r5, ip
 80076ae:	2a08      	cmp	r2, #8
 80076b0:	d10b      	bne.n	80076ca <_printf_i+0x112>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	07db      	lsls	r3, r3, #31
 80076b6:	d508      	bpl.n	80076ca <_printf_i+0x112>
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	6862      	ldr	r2, [r4, #4]
 80076bc:	429a      	cmp	r2, r3
 80076be:	bfde      	ittt	le
 80076c0:	2330      	movle	r3, #48	; 0x30
 80076c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076ca:	ebac 0305 	sub.w	r3, ip, r5
 80076ce:	6123      	str	r3, [r4, #16]
 80076d0:	f8cd 8000 	str.w	r8, [sp]
 80076d4:	463b      	mov	r3, r7
 80076d6:	aa03      	add	r2, sp, #12
 80076d8:	4621      	mov	r1, r4
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff fef6 	bl	80074cc <_printf_common>
 80076e0:	3001      	adds	r0, #1
 80076e2:	d14d      	bne.n	8007780 <_printf_i+0x1c8>
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	b005      	add	sp, #20
 80076ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076ee:	4839      	ldr	r0, [pc, #228]	; (80077d4 <_printf_i+0x21c>)
 80076f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80076f4:	6813      	ldr	r3, [r2, #0]
 80076f6:	6821      	ldr	r1, [r4, #0]
 80076f8:	1d1d      	adds	r5, r3, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6015      	str	r5, [r2, #0]
 80076fe:	060a      	lsls	r2, r1, #24
 8007700:	d50b      	bpl.n	800771a <_printf_i+0x162>
 8007702:	07ca      	lsls	r2, r1, #31
 8007704:	bf44      	itt	mi
 8007706:	f041 0120 	orrmi.w	r1, r1, #32
 800770a:	6021      	strmi	r1, [r4, #0]
 800770c:	b91b      	cbnz	r3, 8007716 <_printf_i+0x15e>
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	f022 0220 	bic.w	r2, r2, #32
 8007714:	6022      	str	r2, [r4, #0]
 8007716:	2210      	movs	r2, #16
 8007718:	e7b7      	b.n	800768a <_printf_i+0xd2>
 800771a:	064d      	lsls	r5, r1, #25
 800771c:	bf48      	it	mi
 800771e:	b29b      	uxthmi	r3, r3
 8007720:	e7ef      	b.n	8007702 <_printf_i+0x14a>
 8007722:	4665      	mov	r5, ip
 8007724:	fbb3 f1f2 	udiv	r1, r3, r2
 8007728:	fb02 3311 	mls	r3, r2, r1, r3
 800772c:	5cc3      	ldrb	r3, [r0, r3]
 800772e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007732:	460b      	mov	r3, r1
 8007734:	2900      	cmp	r1, #0
 8007736:	d1f5      	bne.n	8007724 <_printf_i+0x16c>
 8007738:	e7b9      	b.n	80076ae <_printf_i+0xf6>
 800773a:	6813      	ldr	r3, [r2, #0]
 800773c:	6825      	ldr	r5, [r4, #0]
 800773e:	6961      	ldr	r1, [r4, #20]
 8007740:	1d18      	adds	r0, r3, #4
 8007742:	6010      	str	r0, [r2, #0]
 8007744:	0628      	lsls	r0, r5, #24
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	d501      	bpl.n	800774e <_printf_i+0x196>
 800774a:	6019      	str	r1, [r3, #0]
 800774c:	e002      	b.n	8007754 <_printf_i+0x19c>
 800774e:	066a      	lsls	r2, r5, #25
 8007750:	d5fb      	bpl.n	800774a <_printf_i+0x192>
 8007752:	8019      	strh	r1, [r3, #0]
 8007754:	2300      	movs	r3, #0
 8007756:	6123      	str	r3, [r4, #16]
 8007758:	4665      	mov	r5, ip
 800775a:	e7b9      	b.n	80076d0 <_printf_i+0x118>
 800775c:	6813      	ldr	r3, [r2, #0]
 800775e:	1d19      	adds	r1, r3, #4
 8007760:	6011      	str	r1, [r2, #0]
 8007762:	681d      	ldr	r5, [r3, #0]
 8007764:	6862      	ldr	r2, [r4, #4]
 8007766:	2100      	movs	r1, #0
 8007768:	4628      	mov	r0, r5
 800776a:	f7f8 fd41 	bl	80001f0 <memchr>
 800776e:	b108      	cbz	r0, 8007774 <_printf_i+0x1bc>
 8007770:	1b40      	subs	r0, r0, r5
 8007772:	6060      	str	r0, [r4, #4]
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	2300      	movs	r3, #0
 800777a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777e:	e7a7      	b.n	80076d0 <_printf_i+0x118>
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	462a      	mov	r2, r5
 8007784:	4639      	mov	r1, r7
 8007786:	4630      	mov	r0, r6
 8007788:	47c0      	blx	r8
 800778a:	3001      	adds	r0, #1
 800778c:	d0aa      	beq.n	80076e4 <_printf_i+0x12c>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	079b      	lsls	r3, r3, #30
 8007792:	d413      	bmi.n	80077bc <_printf_i+0x204>
 8007794:	68e0      	ldr	r0, [r4, #12]
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	4298      	cmp	r0, r3
 800779a:	bfb8      	it	lt
 800779c:	4618      	movlt	r0, r3
 800779e:	e7a3      	b.n	80076e8 <_printf_i+0x130>
 80077a0:	2301      	movs	r3, #1
 80077a2:	464a      	mov	r2, r9
 80077a4:	4639      	mov	r1, r7
 80077a6:	4630      	mov	r0, r6
 80077a8:	47c0      	blx	r8
 80077aa:	3001      	adds	r0, #1
 80077ac:	d09a      	beq.n	80076e4 <_printf_i+0x12c>
 80077ae:	3501      	adds	r5, #1
 80077b0:	68e3      	ldr	r3, [r4, #12]
 80077b2:	9a03      	ldr	r2, [sp, #12]
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	42ab      	cmp	r3, r5
 80077b8:	dcf2      	bgt.n	80077a0 <_printf_i+0x1e8>
 80077ba:	e7eb      	b.n	8007794 <_printf_i+0x1dc>
 80077bc:	2500      	movs	r5, #0
 80077be:	f104 0919 	add.w	r9, r4, #25
 80077c2:	e7f5      	b.n	80077b0 <_printf_i+0x1f8>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1ac      	bne.n	8007722 <_printf_i+0x16a>
 80077c8:	7803      	ldrb	r3, [r0, #0]
 80077ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d2:	e76c      	b.n	80076ae <_printf_i+0xf6>
 80077d4:	08007b99 	.word	0x08007b99
 80077d8:	08007baa 	.word	0x08007baa

080077dc <memmove>:
 80077dc:	4288      	cmp	r0, r1
 80077de:	b510      	push	{r4, lr}
 80077e0:	eb01 0302 	add.w	r3, r1, r2
 80077e4:	d807      	bhi.n	80077f6 <memmove+0x1a>
 80077e6:	1e42      	subs	r2, r0, #1
 80077e8:	4299      	cmp	r1, r3
 80077ea:	d00a      	beq.n	8007802 <memmove+0x26>
 80077ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80077f4:	e7f8      	b.n	80077e8 <memmove+0xc>
 80077f6:	4283      	cmp	r3, r0
 80077f8:	d9f5      	bls.n	80077e6 <memmove+0xa>
 80077fa:	1881      	adds	r1, r0, r2
 80077fc:	1ad2      	subs	r2, r2, r3
 80077fe:	42d3      	cmn	r3, r2
 8007800:	d100      	bne.n	8007804 <memmove+0x28>
 8007802:	bd10      	pop	{r4, pc}
 8007804:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007808:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800780c:	e7f7      	b.n	80077fe <memmove+0x22>
	...

08007810 <_free_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4605      	mov	r5, r0
 8007814:	2900      	cmp	r1, #0
 8007816:	d045      	beq.n	80078a4 <_free_r+0x94>
 8007818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800781c:	1f0c      	subs	r4, r1, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	bfb8      	it	lt
 8007822:	18e4      	addlt	r4, r4, r3
 8007824:	f000 f8d2 	bl	80079cc <__malloc_lock>
 8007828:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <_free_r+0x98>)
 800782a:	6813      	ldr	r3, [r2, #0]
 800782c:	4610      	mov	r0, r2
 800782e:	b933      	cbnz	r3, 800783e <_free_r+0x2e>
 8007830:	6063      	str	r3, [r4, #4]
 8007832:	6014      	str	r4, [r2, #0]
 8007834:	4628      	mov	r0, r5
 8007836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800783a:	f000 b8c8 	b.w	80079ce <__malloc_unlock>
 800783e:	42a3      	cmp	r3, r4
 8007840:	d90c      	bls.n	800785c <_free_r+0x4c>
 8007842:	6821      	ldr	r1, [r4, #0]
 8007844:	1862      	adds	r2, r4, r1
 8007846:	4293      	cmp	r3, r2
 8007848:	bf04      	itt	eq
 800784a:	681a      	ldreq	r2, [r3, #0]
 800784c:	685b      	ldreq	r3, [r3, #4]
 800784e:	6063      	str	r3, [r4, #4]
 8007850:	bf04      	itt	eq
 8007852:	1852      	addeq	r2, r2, r1
 8007854:	6022      	streq	r2, [r4, #0]
 8007856:	6004      	str	r4, [r0, #0]
 8007858:	e7ec      	b.n	8007834 <_free_r+0x24>
 800785a:	4613      	mov	r3, r2
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	b10a      	cbz	r2, 8007864 <_free_r+0x54>
 8007860:	42a2      	cmp	r2, r4
 8007862:	d9fa      	bls.n	800785a <_free_r+0x4a>
 8007864:	6819      	ldr	r1, [r3, #0]
 8007866:	1858      	adds	r0, r3, r1
 8007868:	42a0      	cmp	r0, r4
 800786a:	d10b      	bne.n	8007884 <_free_r+0x74>
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	4401      	add	r1, r0
 8007870:	1858      	adds	r0, r3, r1
 8007872:	4282      	cmp	r2, r0
 8007874:	6019      	str	r1, [r3, #0]
 8007876:	d1dd      	bne.n	8007834 <_free_r+0x24>
 8007878:	6810      	ldr	r0, [r2, #0]
 800787a:	6852      	ldr	r2, [r2, #4]
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	4401      	add	r1, r0
 8007880:	6019      	str	r1, [r3, #0]
 8007882:	e7d7      	b.n	8007834 <_free_r+0x24>
 8007884:	d902      	bls.n	800788c <_free_r+0x7c>
 8007886:	230c      	movs	r3, #12
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	e7d3      	b.n	8007834 <_free_r+0x24>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	1821      	adds	r1, r4, r0
 8007890:	428a      	cmp	r2, r1
 8007892:	bf04      	itt	eq
 8007894:	6811      	ldreq	r1, [r2, #0]
 8007896:	6852      	ldreq	r2, [r2, #4]
 8007898:	6062      	str	r2, [r4, #4]
 800789a:	bf04      	itt	eq
 800789c:	1809      	addeq	r1, r1, r0
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	605c      	str	r4, [r3, #4]
 80078a2:	e7c7      	b.n	8007834 <_free_r+0x24>
 80078a4:	bd38      	pop	{r3, r4, r5, pc}
 80078a6:	bf00      	nop
 80078a8:	2000499c 	.word	0x2000499c

080078ac <_malloc_r>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	1ccd      	adds	r5, r1, #3
 80078b0:	f025 0503 	bic.w	r5, r5, #3
 80078b4:	3508      	adds	r5, #8
 80078b6:	2d0c      	cmp	r5, #12
 80078b8:	bf38      	it	cc
 80078ba:	250c      	movcc	r5, #12
 80078bc:	2d00      	cmp	r5, #0
 80078be:	4606      	mov	r6, r0
 80078c0:	db01      	blt.n	80078c6 <_malloc_r+0x1a>
 80078c2:	42a9      	cmp	r1, r5
 80078c4:	d903      	bls.n	80078ce <_malloc_r+0x22>
 80078c6:	230c      	movs	r3, #12
 80078c8:	6033      	str	r3, [r6, #0]
 80078ca:	2000      	movs	r0, #0
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
 80078ce:	f000 f87d 	bl	80079cc <__malloc_lock>
 80078d2:	4a21      	ldr	r2, [pc, #132]	; (8007958 <_malloc_r+0xac>)
 80078d4:	6814      	ldr	r4, [r2, #0]
 80078d6:	4621      	mov	r1, r4
 80078d8:	b991      	cbnz	r1, 8007900 <_malloc_r+0x54>
 80078da:	4c20      	ldr	r4, [pc, #128]	; (800795c <_malloc_r+0xb0>)
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	b91b      	cbnz	r3, 80078e8 <_malloc_r+0x3c>
 80078e0:	4630      	mov	r0, r6
 80078e2:	f000 f863 	bl	80079ac <_sbrk_r>
 80078e6:	6020      	str	r0, [r4, #0]
 80078e8:	4629      	mov	r1, r5
 80078ea:	4630      	mov	r0, r6
 80078ec:	f000 f85e 	bl	80079ac <_sbrk_r>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d124      	bne.n	800793e <_malloc_r+0x92>
 80078f4:	230c      	movs	r3, #12
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	4630      	mov	r0, r6
 80078fa:	f000 f868 	bl	80079ce <__malloc_unlock>
 80078fe:	e7e4      	b.n	80078ca <_malloc_r+0x1e>
 8007900:	680b      	ldr	r3, [r1, #0]
 8007902:	1b5b      	subs	r3, r3, r5
 8007904:	d418      	bmi.n	8007938 <_malloc_r+0x8c>
 8007906:	2b0b      	cmp	r3, #11
 8007908:	d90f      	bls.n	800792a <_malloc_r+0x7e>
 800790a:	600b      	str	r3, [r1, #0]
 800790c:	50cd      	str	r5, [r1, r3]
 800790e:	18cc      	adds	r4, r1, r3
 8007910:	4630      	mov	r0, r6
 8007912:	f000 f85c 	bl	80079ce <__malloc_unlock>
 8007916:	f104 000b 	add.w	r0, r4, #11
 800791a:	1d23      	adds	r3, r4, #4
 800791c:	f020 0007 	bic.w	r0, r0, #7
 8007920:	1ac3      	subs	r3, r0, r3
 8007922:	d0d3      	beq.n	80078cc <_malloc_r+0x20>
 8007924:	425a      	negs	r2, r3
 8007926:	50e2      	str	r2, [r4, r3]
 8007928:	e7d0      	b.n	80078cc <_malloc_r+0x20>
 800792a:	428c      	cmp	r4, r1
 800792c:	684b      	ldr	r3, [r1, #4]
 800792e:	bf16      	itet	ne
 8007930:	6063      	strne	r3, [r4, #4]
 8007932:	6013      	streq	r3, [r2, #0]
 8007934:	460c      	movne	r4, r1
 8007936:	e7eb      	b.n	8007910 <_malloc_r+0x64>
 8007938:	460c      	mov	r4, r1
 800793a:	6849      	ldr	r1, [r1, #4]
 800793c:	e7cc      	b.n	80078d8 <_malloc_r+0x2c>
 800793e:	1cc4      	adds	r4, r0, #3
 8007940:	f024 0403 	bic.w	r4, r4, #3
 8007944:	42a0      	cmp	r0, r4
 8007946:	d005      	beq.n	8007954 <_malloc_r+0xa8>
 8007948:	1a21      	subs	r1, r4, r0
 800794a:	4630      	mov	r0, r6
 800794c:	f000 f82e 	bl	80079ac <_sbrk_r>
 8007950:	3001      	adds	r0, #1
 8007952:	d0cf      	beq.n	80078f4 <_malloc_r+0x48>
 8007954:	6025      	str	r5, [r4, #0]
 8007956:	e7db      	b.n	8007910 <_malloc_r+0x64>
 8007958:	2000499c 	.word	0x2000499c
 800795c:	200049a0 	.word	0x200049a0

08007960 <_realloc_r>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	4607      	mov	r7, r0
 8007964:	4614      	mov	r4, r2
 8007966:	460e      	mov	r6, r1
 8007968:	b921      	cbnz	r1, 8007974 <_realloc_r+0x14>
 800796a:	4611      	mov	r1, r2
 800796c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007970:	f7ff bf9c 	b.w	80078ac <_malloc_r>
 8007974:	b922      	cbnz	r2, 8007980 <_realloc_r+0x20>
 8007976:	f7ff ff4b 	bl	8007810 <_free_r>
 800797a:	4625      	mov	r5, r4
 800797c:	4628      	mov	r0, r5
 800797e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007980:	f000 f826 	bl	80079d0 <_malloc_usable_size_r>
 8007984:	42a0      	cmp	r0, r4
 8007986:	d20f      	bcs.n	80079a8 <_realloc_r+0x48>
 8007988:	4621      	mov	r1, r4
 800798a:	4638      	mov	r0, r7
 800798c:	f7ff ff8e 	bl	80078ac <_malloc_r>
 8007990:	4605      	mov	r5, r0
 8007992:	2800      	cmp	r0, #0
 8007994:	d0f2      	beq.n	800797c <_realloc_r+0x1c>
 8007996:	4631      	mov	r1, r6
 8007998:	4622      	mov	r2, r4
 800799a:	f7ff fc11 	bl	80071c0 <memcpy>
 800799e:	4631      	mov	r1, r6
 80079a0:	4638      	mov	r0, r7
 80079a2:	f7ff ff35 	bl	8007810 <_free_r>
 80079a6:	e7e9      	b.n	800797c <_realloc_r+0x1c>
 80079a8:	4635      	mov	r5, r6
 80079aa:	e7e7      	b.n	800797c <_realloc_r+0x1c>

080079ac <_sbrk_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4c06      	ldr	r4, [pc, #24]	; (80079c8 <_sbrk_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4605      	mov	r5, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	f7f9 fb8c 	bl	80010d4 <_sbrk>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_sbrk_r+0x1a>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_sbrk_r+0x1a>
 80079c4:	602b      	str	r3, [r5, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	20004c98 	.word	0x20004c98

080079cc <__malloc_lock>:
 80079cc:	4770      	bx	lr

080079ce <__malloc_unlock>:
 80079ce:	4770      	bx	lr

080079d0 <_malloc_usable_size_r>:
 80079d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d4:	1f18      	subs	r0, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfbc      	itt	lt
 80079da:	580b      	ldrlt	r3, [r1, r0]
 80079dc:	18c0      	addlt	r0, r0, r3
 80079de:	4770      	bx	lr

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
