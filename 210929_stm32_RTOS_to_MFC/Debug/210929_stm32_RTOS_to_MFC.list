
210929_stm32_RTOS_to_MFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800679c  0800679c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a4  080067a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a8c  20000074  08006820  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b00  08006820  00024b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2c3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000342a  00000000  00000000  0003a367  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e0  00000000  00000000  0003d798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001358  00000000  00000000  0003ec78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000038a2  00000000  00000000  0003ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011059  00000000  00000000  00043872  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8611  00000000  00000000  000548cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cedc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a04  00000000  00000000  0013cf58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006670 	.word	0x08006670

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006670 	.word	0x08006670

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_UART_RxCpltCallback>:
char uart_buf[100];

int i;
////?���? ?��치에?�� uart�? ?��?��?���? 받게 ?���? ?��?��?��?��?��?��(?��?�� it.c?�� ?��?�� USART3_IRQHandler?��?���? ?���? ?���?, ?��곳이 ?��?��?��?��.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <HAL_UART_RxCpltCallback+0x24>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d104      	bne.n	80005ac <HAL_UART_RxCpltCallback+0x1c>
	{
		//@ ?��기�??�� ?��?��?�� ?��?��?�� ?��
		////�??���? ?��?�� ?��?��마다 ?��?��?��?�� 발생?��?�� ?��?��?�� 문자?��?�� 발생?��
		HAL_UART_Receive_IT(&huart3, &uart_buf, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <HAL_UART_RxCpltCallback+0x28>)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <HAL_UART_RxCpltCallback+0x2c>)
 80005a8:	f002 f8dc 	bl	8002764 <HAL_UART_Receive_IT>
		//?��?��?��?���? 걸리�? ?��?��?���? 버퍼?�� ???��?��?��.
		//?��번에?�� ?��?�� ?��?�� _IT�? 붙는?��. ?��?��?��?��?��?�� ?��?��?��.
		//?��?��?? 같다. huart3채널?�� ?��?��?���? uart_buf?��?�� 버퍼�? ?��?��?���? ???��?���?, 1바이?��?�� ?��?��?��?��.

	}
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40004800 	.word	0x40004800
 80005b8:	200049ec 	.word	0x200049ec
 80005bc:	200049a8 	.word	0x200049a8

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fb7a 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f840 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f922 	bl	8000814 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d0:	f000 f8f6 	bl	80007c0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80005d4:	f000 f8ce 	bl	8000774 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005d8:	f000 f8c0 	bl	800075c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,&uart_buf,1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4910      	ldr	r1, [pc, #64]	; (8000620 <main+0x60>)
 80005e0:	4810      	ldr	r0, [pc, #64]	; (8000624 <main+0x64>)
 80005e2:	f002 f8bf 	bl	8002764 <HAL_UART_Receive_IT>
  //uart_buf?�� ?��?��?���? 1바이?���? 체워�?�? ?��?��?��?���? 발생?��?��겠다?��?�� ?��

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e6:	f002 fecd 	bl	8003384 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <main+0x68>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	480f      	ldr	r0, [pc, #60]	; (800062c <main+0x6c>)
 80005f0:	f002 ff32 	bl	8003458 <osThreadNew>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <main+0x70>)
 80005f8:	601a      	str	r2, [r3, #0]

  LD2TaskHandle = osThreadNew(LD2Task, NULL, &LD2Task_attributes);
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <main+0x74>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	480e      	ldr	r0, [pc, #56]	; (8000638 <main+0x78>)
 8000600:	f002 ff2a 	bl	8003458 <osThreadNew>
 8000604:	4602      	mov	r2, r0
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0x7c>)
 8000608:	601a      	str	r2, [r3, #0]

  LD3TaskHandle = osThreadNew(LD3Task, NULL, &LD3Task_attributes);
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <main+0x80>)
 800060c:	2100      	movs	r1, #0
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <main+0x84>)
 8000610:	f002 ff22 	bl	8003458 <osThreadNew>
 8000614:	4602      	mov	r2, r0
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <main+0x88>)
 8000618:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800061a:	f002 fee7 	bl	80033ec <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x5e>
 8000620:	200049ec 	.word	0x200049ec
 8000624:	200049a8 	.word	0x200049a8
 8000628:	080066e4 	.word	0x080066e4
 800062c:	08000901 	.word	0x08000901
 8000630:	200049a4 	.word	0x200049a4
 8000634:	08006708 	.word	0x08006708
 8000638:	0800094d 	.word	0x0800094d
 800063c:	20004a54 	.word	0x20004a54
 8000640:	0800672c 	.word	0x0800672c
 8000644:	0800096d 	.word	0x0800096d
 8000648:	200049e8 	.word	0x200049e8

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0a0      	sub	sp, #128	; 0x80
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fc03 	bl	8005e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2230      	movs	r2, #48	; 0x30
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f005 fbf4 	bl	8005e66 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b34      	ldr	r3, [pc, #208]	; (8000754 <SystemClock_Config+0x108>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	4a33      	ldr	r2, [pc, #204]	; (8000754 <SystemClock_Config+0x108>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6413      	str	r3, [r2, #64]	; 0x40
 800068e:	4b31      	ldr	r3, [pc, #196]	; (8000754 <SystemClock_Config+0x108>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <SystemClock_Config+0x10c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a2d      	ldr	r2, [pc, #180]	; (8000758 <SystemClock_Config+0x10c>)
 80006a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <SystemClock_Config+0x10c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006b6:	2306      	movs	r3, #6
 80006b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2310      	movs	r3, #16
 80006c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ce:	2308      	movs	r3, #8
 80006d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d2:	23b4      	movs	r3, #180	; 0xb4
 80006d4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fe5e 	bl	80013a4 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ee:	f000 f95f 	bl	80009b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f2:	f000 fe07 	bl	8001304 <HAL_PWREx_EnableOverDrive>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006fc:	f000 f958 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f8b0 	bl	8001884 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800072a:	f000 f941 	bl	80009b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800072e:	2320      	movs	r3, #32
 8000730:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fa9f 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000748:	f000 f932 	bl	80009b0 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3780      	adds	r7, #128	; 0x80
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2105      	movs	r1, #5
 8000764:	2027      	movs	r0, #39	; 0x27
 8000766:	f000 fba3 	bl	8000eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800076a:	2027      	movs	r0, #39	; 0x27
 800076c:	f000 fbbc 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_RTC_Init+0x44>)
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <MX_RTC_Init+0x48>)
 800077c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_RTC_Init+0x44>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_RTC_Init+0x44>)
 8000786:	227f      	movs	r2, #127	; 0x7f
 8000788:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_RTC_Init+0x44>)
 800078c:	22ff      	movs	r2, #255	; 0xff
 800078e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_RTC_Init+0x44>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_RTC_Init+0x44>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_RTC_Init+0x44>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_RTC_Init+0x44>)
 80007a4:	f001 fc2a 	bl	8001ffc <HAL_RTC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007ae:	f000 f8ff 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20004a58 	.word	0x20004a58
 80007bc:	40002800 	.word	0x40002800

080007c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_USART3_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007f8:	f001 ff22 	bl	8002640 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f8d5 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200049a8 	.word	0x200049a8
 8000810:	40004800 	.word	0x40004800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a30      	ldr	r2, [pc, #192]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_GPIO_Init+0xe0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_GPIO_Init+0xe0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <MX_GPIO_Init+0xe0>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_GPIO_Init+0xe0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008a0:	4815      	ldr	r0, [pc, #84]	; (80008f8 <MX_GPIO_Init+0xe4>)
 80008a2:	f000 fcfb 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_GPIO_Init+0xe8>)
 80008ac:	f000 fcf6 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0xe4>)
 80008ca:	f000 fb3d 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_GPIO_Init+0xe8>)
 80008e6:	f000 fb2f 	bl	8000f48 <HAL_GPIO_Init>

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020c00 	.word	0x40020c00
 80008fc:	40020400 	.word	0x40020400

08000900 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		memset(uart_buf,0,sizeof(uart_buf));
 8000908:	2264      	movs	r2, #100	; 0x64
 800090a:	2100      	movs	r1, #0
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <StartDefaultTask+0x3c>)
 800090e:	f005 faaa 	bl	8005e66 <memset>
		sprintf(uart_buf,"인터럽트 %d 회 발생\r\n", i++);
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <StartDefaultTask+0x40>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	4909      	ldr	r1, [pc, #36]	; (8000940 <StartDefaultTask+0x40>)
 800091a:	600a      	str	r2, [r1, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4909      	ldr	r1, [pc, #36]	; (8000944 <StartDefaultTask+0x44>)
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <StartDefaultTask+0x3c>)
 8000922:	f005 faa9 	bl	8005e78 <siprintf>
		HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 8000926:	2264      	movs	r2, #100	; 0x64
 8000928:	4904      	ldr	r1, [pc, #16]	; (800093c <StartDefaultTask+0x3c>)
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <StartDefaultTask+0x48>)
 800092c:	f001 fed5 	bl	80026da <HAL_UART_Transmit_IT>
		osDelay(500);
 8000930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000934:	f002 fe36 	bl	80035a4 <osDelay>
  {
 8000938:	e7e6      	b.n	8000908 <StartDefaultTask+0x8>
 800093a:	bf00      	nop
 800093c:	200049ec 	.word	0x200049ec
 8000940:	20004a50 	.word	0x20004a50
 8000944:	080066ac 	.word	0x080066ac
 8000948:	200049a8 	.word	0x200049a8

0800094c <LD2Task>:

  }
  /* USER CODE END 5 */ 
}
void LD2Task(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <LD2Task+0x1c>)
 8000958:	f000 fcb9 	bl	80012ce <HAL_GPIO_TogglePin>
	osDelay(1000);
 800095c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000960:	f002 fe20 	bl	80035a4 <osDelay>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000964:	e7f6      	b.n	8000954 <LD2Task+0x8>
 8000966:	bf00      	nop
 8000968:	40020400 	.word	0x40020400

0800096c <LD3Task>:
  }
  /* USER CODE END 5 */
}

void LD3Task(void *argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <LD3Task+0x1c>)
 800097a:	f000 fca8 	bl	80012ce <HAL_GPIO_TogglePin>
	osDelay(200);
 800097e:	20c8      	movs	r0, #200	; 0xc8
 8000980:	f002 fe10 	bl	80035a4 <osDelay>
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000984:	e7f6      	b.n	8000974 <LD3Task+0x8>
 8000986:	bf00      	nop
 8000988:	40020c00 	.word	0x40020c00

0800098c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099e:	f000 f9af 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40000800 	.word	0x40000800

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_MspInit+0x54>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <HAL_MspInit+0x54>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x54>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_MspInit+0x54>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_MspInit+0x54>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_MspInit+0x54>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	210f      	movs	r1, #15
 8000a02:	f06f 0001 	mvn.w	r0, #1
 8000a06:	f000 fa53 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <HAL_RTC_MspInit+0x24>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d102      	bne.n	8000a30 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_RTC_MspInit+0x28>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40002800 	.word	0x40002800
 8000a40:	42470e3c 	.word	0x42470e3c

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_UART_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12c      	bne.n	8000ac0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000abc:	f000 fa44 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40004800 	.word	0x40004800
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	201e      	movs	r0, #30
 8000aea:	f000 f9e1 	bl	8000eb0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000aee:	201e      	movs	r0, #30
 8000af0:	f000 f9fa 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_InitTick+0xa4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <HAL_InitTick+0xa4>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_InitTick+0xa4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f87e 	bl	8001c1c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b20:	f001 f854 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8000b24:	4603      	mov	r3, r0
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <HAL_InitTick+0xa8>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	0c9b      	lsrs	r3, r3, #18
 8000b34:	3b01      	subs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_InitTick+0xac>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_InitTick+0xb0>)
 8000b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_InitTick+0xac>)
 8000b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_InitTick+0xac>)
 8000b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_InitTick+0xac>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_InitTick+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <HAL_InitTick+0xac>)
 8000b5a:	f001 fb34 	bl	80021c6 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <HAL_InitTick+0xac>)
 8000b66:	f001 fb63 	bl	8002230 <HAL_TIM_Base_Start_IT>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3730      	adds	r7, #48	; 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	20004a78 	.word	0x20004a78
 8000b84:	40000800 	.word	0x40000800

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM4_IRQHandler+0x10>)
 8000bc2:	f001 fb59 	bl	8002278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20004a78 	.word	0x20004a78

08000bd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART3_IRQHandler+0x10>)
 8000bd6:	f001 fe1b 	bl	8002810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200049a8 	.word	0x200049a8

08000be4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x50>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x16>
		heap_end = &end;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <_sbrk+0x50>)
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <_sbrk+0x54>)
 8000bf8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <_sbrk+0x50>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <_sbrk+0x50>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	466a      	mov	r2, sp
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d907      	bls.n	8000c1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c0e:	f005 f8f5 	bl	8005dfc <__errno>
 8000c12:	4602      	mov	r2, r0
 8000c14:	230c      	movs	r3, #12
 8000c16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	e006      	b.n	8000c2c <_sbrk+0x48>
	}

	heap_end += incr;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <_sbrk+0x50>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <_sbrk+0x50>)
 8000c28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000090 	.word	0x20000090
 8000c38:	20004b00 	.word	0x20004b00

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <SystemInit+0x28>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <SystemInit+0x28>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SystemInit+0x28>)
 8000c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c56:	609a      	str	r2, [r3, #8]
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6e:	e003      	b.n	8000c78 <LoopCopyDataInit>

08000c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c76:	3104      	adds	r1, #4

08000c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c80:	d3f6      	bcc.n	8000c70 <CopyDataInit>
  ldr  r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c84:	e002      	b.n	8000c8c <LoopFillZerobss>

08000c86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c88:	f842 3b04 	str.w	r3, [r2], #4

08000c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c90:	d3f9      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ffd3 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f005 f8b7 	bl	8005e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc91 	bl	80005c0 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ca0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000ca4:	080067ac 	.word	0x080067ac
  ldr  r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cac:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000cb0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000cb4:	20004b00 	.word	0x20004b00

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8d8 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fef2 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe66 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20004ab8 	.word	0x20004ab8

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20004ab8 	.word	0x20004ab8

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d004      	beq.n	8000f22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00c      	b.n	8000f3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2205      	movs	r2, #5
 8000f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e177      	b.n	8001254 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8166 	bne.w	800124e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d00b      	beq.n	8000fa2 <HAL_GPIO_Init+0x5a>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f96:	2b11      	cmp	r3, #17
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0xfc>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b12      	cmp	r3, #18
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80c0 	beq.w	800124e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b65      	ldr	r3, [pc, #404]	; (8001268 <HAL_GPIO_Init+0x320>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a64      	ldr	r2, [pc, #400]	; (8001268 <HAL_GPIO_Init+0x320>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b62      	ldr	r3, [pc, #392]	; (8001268 <HAL_GPIO_Init+0x320>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ea:	4a60      	ldr	r2, [pc, #384]	; (800126c <HAL_GPIO_Init+0x324>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a57      	ldr	r2, [pc, #348]	; (8001270 <HAL_GPIO_Init+0x328>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d037      	beq.n	8001186 <HAL_GPIO_Init+0x23e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a56      	ldr	r2, [pc, #344]	; (8001274 <HAL_GPIO_Init+0x32c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d031      	beq.n	8001182 <HAL_GPIO_Init+0x23a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a55      	ldr	r2, [pc, #340]	; (8001278 <HAL_GPIO_Init+0x330>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0x236>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_GPIO_Init+0x334>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x232>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a53      	ldr	r2, [pc, #332]	; (8001280 <HAL_GPIO_Init+0x338>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x22e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_GPIO_Init+0x33c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x22a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a51      	ldr	r2, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x340>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x226>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a50      	ldr	r2, [pc, #320]	; (800128c <HAL_GPIO_Init+0x344>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x222>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_GPIO_Init+0x348>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x21e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_GPIO_Init+0x34c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x21a>
 800115e:	2309      	movs	r3, #9
 8001160:	e012      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001162:	230a      	movs	r3, #10
 8001164:	e010      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001166:	2308      	movs	r3, #8
 8001168:	e00e      	b.n	8001188 <HAL_GPIO_Init+0x240>
 800116a:	2307      	movs	r3, #7
 800116c:	e00c      	b.n	8001188 <HAL_GPIO_Init+0x240>
 800116e:	2306      	movs	r3, #6
 8001170:	e00a      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001172:	2305      	movs	r3, #5
 8001174:	e008      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001176:	2304      	movs	r3, #4
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x240>
 800117a:	2303      	movs	r3, #3
 800117c:	e004      	b.n	8001188 <HAL_GPIO_Init+0x240>
 800117e:	2302      	movs	r3, #2
 8001180:	e002      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001186:	2300      	movs	r3, #0
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	f002 0203 	and.w	r2, r2, #3
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	4093      	lsls	r3, r2
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001198:	4934      	ldr	r1, [pc, #208]	; (800126c <HAL_GPIO_Init+0x324>)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a6:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ca:	4a33      	ldr	r2, [pc, #204]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011d0:	4b31      	ldr	r3, [pc, #196]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_GPIO_Init+0x350>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <HAL_GPIO_Init+0x350>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <HAL_GPIO_Init+0x350>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3301      	adds	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	f67f ae84 	bls.w	8000f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800125c:	bf00      	nop
 800125e:	3724      	adds	r7, #36	; 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40021400 	.word	0x40021400
 8001288:	40021800 	.word	0x40021800
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40022000 	.word	0x40022000
 8001294:	40022400 	.word	0x40022400
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	401a      	ands	r2, r3
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d104      	bne.n	80012f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	041a      	lsls	r2, r3, #16
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_PWREx_EnableOverDrive+0x90>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_PWREx_EnableOverDrive+0x90>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_PWREx_EnableOverDrive+0x90>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_PWREx_EnableOverDrive+0x94>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001330:	f7ff fcfa 	bl	8000d28 <HAL_GetTick>
 8001334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001336:	e009      	b.n	800134c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001338:	f7ff fcf6 	bl	8000d28 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001346:	d901      	bls.n	800134c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e01f      	b.n	800138c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_PWREx_EnableOverDrive+0x98>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d1ee      	bne.n	8001338 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001360:	f7ff fce2 	bl	8000d28 <HAL_GetTick>
 8001364:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001366:	e009      	b.n	800137c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001368:	f7ff fcde 	bl	8000d28 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001376:	d901      	bls.n	800137c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e007      	b.n	800138c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_PWREx_EnableOverDrive+0x98>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001388:	d1ee      	bne.n	8001368 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	420e0040 	.word	0x420e0040
 800139c:	40007000 	.word	0x40007000
 80013a0:	420e0044 	.word	0x420e0044

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e25b      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d075      	beq.n	80014ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c2:	4ba3      	ldr	r3, [pc, #652]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d00c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4ba0      	ldr	r3, [pc, #640]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d112      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b9d      	ldr	r3, [pc, #628]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013e6:	d10b      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4b99      	ldr	r3, [pc, #612]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d05b      	beq.n	80014ac <HAL_RCC_OscConfig+0x108>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d157      	bne.n	80014ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e236      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x74>
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a90      	ldr	r2, [pc, #576]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x98>
 8001422:	4b8b      	ldr	r3, [pc, #556]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a8a      	ldr	r2, [pc, #552]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a87      	ldr	r2, [pc, #540]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 800143c:	4b84      	ldr	r3, [pc, #528]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a83      	ldr	r2, [pc, #524]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a80      	ldr	r2, [pc, #512]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fc64 	bl	8000d28 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc60 	bl	8000d28 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1fb      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xc0>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fc50 	bl	8000d28 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc4c 	bl	8000d28 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1e7      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0xe8>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ba:	4b65      	ldr	r3, [pc, #404]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b62      	ldr	r3, [pc, #392]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1bb      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4952      	ldr	r1, [pc, #328]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fc05 	bl	8000d28 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fc01 	bl	8000d28 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e19c      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b43      	ldr	r3, [pc, #268]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4940      	ldr	r1, [pc, #256]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fbe4 	bl	8000d28 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fbe0 	bl	8000d28 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e17b      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d030      	beq.n	80015f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d016      	beq.n	80015c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_RCC_OscConfig+0x2b4>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fbc4 	bl	8000d28 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fbc0 	bl	8000d28 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e15b      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x200>
 80015c2:	e015      	b.n	80015f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_RCC_OscConfig+0x2b4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbad 	bl	8000d28 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fba9 	bl	8000d28 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e144      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a0 	beq.w	800173e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x2b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d121      	bne.n	800167e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_RCC_OscConfig+0x2b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_RCC_OscConfig+0x2b8>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fb6f 	bl	8000d28 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e011      	b.n	8001672 <HAL_RCC_OscConfig+0x2ce>
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	42470000 	.word	0x42470000
 8001658:	42470e80 	.word	0x42470e80
 800165c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001660:	f7ff fb62 	bl	8000d28 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0fd      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b81      	ldr	r3, [pc, #516]	; (8001878 <HAL_RCC_OscConfig+0x4d4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x2f0>
 8001686:	4b7d      	ldr	r3, [pc, #500]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	4a7c      	ldr	r2, [pc, #496]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6713      	str	r3, [r2, #112]	; 0x70
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x32a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x312>
 800169c:	4b77      	ldr	r3, [pc, #476]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	4a76      	ldr	r2, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	; 0x70
 80016a8:	4b74      	ldr	r3, [pc, #464]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a73      	ldr	r2, [pc, #460]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x32a>
 80016b6:	4b71      	ldr	r3, [pc, #452]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	4a70      	ldr	r2, [pc, #448]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	; 0x70
 80016c2:	4b6e      	ldr	r3, [pc, #440]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a6d      	ldr	r2, [pc, #436]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb27 	bl	8000d28 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb23 	bl	8000d28 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0bc      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b61      	ldr	r3, [pc, #388]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x33a>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb11 	bl	8000d28 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fb0d 	bl	8000d28 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0a6      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b56      	ldr	r3, [pc, #344]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a51      	ldr	r2, [pc, #324]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8092 	beq.w	800186c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001748:	4b4c      	ldr	r3, [pc, #304]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d05c      	beq.n	800180e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d141      	bne.n	80017e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b48      	ldr	r3, [pc, #288]	; (8001880 <HAL_RCC_OscConfig+0x4dc>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fae1 	bl	8000d28 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fadd 	bl	8000d28 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e078      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177c:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	019b      	lsls	r3, r3, #6
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	3b01      	subs	r3, #1
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	061b      	lsls	r3, r3, #24
 80017ac:	4933      	ldr	r1, [pc, #204]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <HAL_RCC_OscConfig+0x4dc>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fab6 	bl	8000d28 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fab2 	bl	8000d28 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e04d      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x41c>
 80017de:	e045      	b.n	800186c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x4dc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fa9f 	bl	8000d28 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fa9b 	bl	8000d28 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e036      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x44a>
 800180c:	e02e      	b.n	800186c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e029      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_RCC_OscConfig+0x4d8>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	429a      	cmp	r2, r3
 800182c:	d11c      	bne.n	8001868 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d115      	bne.n	8001868 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001842:	4013      	ands	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001848:	4293      	cmp	r3, r2
 800184a:	d10d      	bne.n	8001868 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d106      	bne.n	8001868 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40007000 	.word	0x40007000
 800187c:	40023800 	.word	0x40023800
 8001880:	42470060 	.word	0x42470060

08001884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0cc      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001898:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d90c      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0b8      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d020      	beq.n	800190e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d8:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a58      	ldr	r2, [pc, #352]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f0:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	494d      	ldr	r1, [pc, #308]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d044      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d119      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e07f      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d003      	beq.n	8001942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193e:	2b03      	cmp	r3, #3
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e06f      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e067      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f023 0203 	bic.w	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4934      	ldr	r1, [pc, #208]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001974:	f7ff f9d8 	bl	8000d28 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	e00a      	b.n	8001992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197c:	f7ff f9d4 	bl	8000d28 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e04f      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 020c 	and.w	r2, r3, #12
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d1eb      	bne.n	800197c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d20c      	bcs.n	80019cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e032      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4916      	ldr	r1, [pc, #88]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	490e      	ldr	r1, [pc, #56]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0a:	f000 f821 	bl	8001a50 <HAL_RCC_GetSysClockFreq>
 8001a0e:	4601      	mov	r1, r0
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	5cd3      	ldrb	r3, [r2, r3]
 8001a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1c8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f852 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	08006750 	.word	0x08006750
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000004 	.word	0x20000004

08001a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a66:	4b50      	ldr	r3, [pc, #320]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d007      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x32>
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d008      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x38>
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 808d 	bne.w	8001b96 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a7e:	60bb      	str	r3, [r7, #8]
       break;
 8001a80:	e08c      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a84:	60bb      	str	r3, [r7, #8]
      break;
 8001a86:	e089      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a92:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d023      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	f04f 0400 	mov.w	r4, #0
 8001aa8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	ea03 0501 	and.w	r5, r3, r1
 8001ab4:	ea04 0602 	and.w	r6, r4, r2
 8001ab8:	4a3d      	ldr	r2, [pc, #244]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aba:	fb02 f106 	mul.w	r1, r2, r6
 8001abe:	2200      	movs	r2, #0
 8001ac0:	fb02 f205 	mul.w	r2, r2, r5
 8001ac4:	440a      	add	r2, r1
 8001ac6:	493a      	ldr	r1, [pc, #232]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ac8:	fba5 0101 	umull	r0, r1, r5, r1
 8001acc:	1853      	adds	r3, r2, r1
 8001ace:	4619      	mov	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f04f 0400 	mov.w	r4, #0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4623      	mov	r3, r4
 8001ada:	f7fe fbd9 	bl	8000290 <__aeabi_uldivmod>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e049      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	099b      	lsrs	r3, r3, #6
 8001aec:	f04f 0400 	mov.w	r4, #0
 8001af0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	ea03 0501 	and.w	r5, r3, r1
 8001afc:	ea04 0602 	and.w	r6, r4, r2
 8001b00:	4629      	mov	r1, r5
 8001b02:	4632      	mov	r2, r6
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	f04f 0400 	mov.w	r4, #0
 8001b0c:	0154      	lsls	r4, r2, #5
 8001b0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b12:	014b      	lsls	r3, r1, #5
 8001b14:	4619      	mov	r1, r3
 8001b16:	4622      	mov	r2, r4
 8001b18:	1b49      	subs	r1, r1, r5
 8001b1a:	eb62 0206 	sbc.w	r2, r2, r6
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	f04f 0400 	mov.w	r4, #0
 8001b26:	0194      	lsls	r4, r2, #6
 8001b28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b2c:	018b      	lsls	r3, r1, #6
 8001b2e:	1a5b      	subs	r3, r3, r1
 8001b30:	eb64 0402 	sbc.w	r4, r4, r2
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	00e2      	lsls	r2, r4, #3
 8001b3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b42:	00d9      	lsls	r1, r3, #3
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	195b      	adds	r3, r3, r5
 8001b4a:	eb44 0406 	adc.w	r4, r4, r6
 8001b4e:	f04f 0100 	mov.w	r1, #0
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	02a2      	lsls	r2, r4, #10
 8001b58:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b5c:	0299      	lsls	r1, r3, #10
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4614      	mov	r4, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	4621      	mov	r1, r4
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f04f 0400 	mov.w	r4, #0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4623      	mov	r3, r4
 8001b70:	f7fe fb8e 	bl	8000290 <__aeabi_uldivmod>
 8001b74:	4603      	mov	r3, r0
 8001b76:	460c      	mov	r4, r1
 8001b78:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	0c1b      	lsrs	r3, r3, #16
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	3301      	adds	r3, #1
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	60bb      	str	r3, [r7, #8]
      break;
 8001b94:	e002      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b98:	60bb      	str	r3, [r7, #8]
      break;
 8001b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	00f42400 	.word	0x00f42400
 8001bb0:	017d7840 	.word	0x017d7840

08001bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000000 	.word	0x20000000

08001bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd0:	f7ff fff0 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0a9b      	lsrs	r3, r3, #10
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	08006760 	.word	0x08006760

08001bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bf8:	f7ff ffdc 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bfc:	4601      	mov	r1, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0b5b      	lsrs	r3, r3, #13
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	08006760 	.word	0x08006760

08001c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	220f      	movs	r2, #15
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_GetClockConfig+0x5c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_RCC_GetClockConfig+0x60>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 020f 	and.w	r2, r3, #15
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	601a      	str	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d075      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cb4:	4bad      	ldr	r3, [pc, #692]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cba:	f7ff f835 	bl	8000d28 <HAL_GetTick>
 8001cbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cc2:	f7ff f831 	bl	8000d28 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e18b      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cd4:	4ba6      	ldr	r3, [pc, #664]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	019a      	lsls	r2, r3, #6
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	071b      	lsls	r3, r3, #28
 8001cf8:	499d      	ldr	r1, [pc, #628]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01f      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d0c:	4b98      	ldr	r3, [pc, #608]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d12:	0f1b      	lsrs	r3, r3, #28
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	019a      	lsls	r2, r3, #6
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	431a      	orrs	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	071b      	lsls	r3, r3, #28
 8001d2c:	4990      	ldr	r1, [pc, #576]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d34:	4b8e      	ldr	r3, [pc, #568]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d3a:	f023 021f 	bic.w	r2, r3, #31
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	498a      	ldr	r1, [pc, #552]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00d      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	019a      	lsls	r2, r3, #6
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	061b      	lsls	r3, r3, #24
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	071b      	lsls	r3, r3, #28
 8001d6c:	4980      	ldr	r1, [pc, #512]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d74:	4b7d      	ldr	r3, [pc, #500]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d7a:	f7fe ffd5 	bl	8000d28 <HAL_GetTick>
 8001d7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d82:	f7fe ffd1 	bl	8000d28 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e12b      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d94:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d079      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001db8:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dbe:	f7fe ffb3 	bl	8000d28 <HAL_GetTick>
 8001dc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001dc6:	f7fe ffaf 	bl	8000d28 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e109      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dd8:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de4:	d0ef      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df8:	0f1b      	lsrs	r3, r3, #28
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	019a      	lsls	r2, r3, #6
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	071b      	lsls	r3, r3, #28
 8001e12:	4957      	ldr	r1, [pc, #348]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e1a:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	4950      	ldr	r1, [pc, #320]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01e      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	0e1b      	lsrs	r3, r3, #24
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	019a      	lsls	r2, r3, #6
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	061b      	lsls	r3, r3, #24
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	071b      	lsls	r3, r3, #28
 8001e60:	4943      	ldr	r1, [pc, #268]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	493e      	ldr	r1, [pc, #248]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e84:	f7fe ff50 	bl	8000d28 <HAL_GetTick>
 8001e88:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e8c:	f7fe ff4c 	bl	8000d28 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0a6      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eaa:	d1ef      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 808d 	beq.w	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee2:	f7fe ff21 	bl	8000d28 <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001eea:	f7fe ff1d 	bl	8000d28 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e077      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d039      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d032      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d11e      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7fe feeb 	bl	8000d28 <HAL_GetTick>
 8001f52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	e014      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7fe fee7 	bl	8000d28 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d90b      	bls.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03f      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001f6c:	42470068 	.word	0x42470068
 8001f70:	40023800 	.word	0x40023800
 8001f74:	42470070 	.word	0x42470070
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0e4      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f98:	d10d      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fae:	4911      	ldr	r1, [pc, #68]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]
 8001fb4:	e005      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fc0:	6093      	str	r3, [r2, #8]
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fce:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	424711e0 	.word	0x424711e0

08001ffc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e083      	b.n	8002116 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7f5b      	ldrb	r3, [r3, #29]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fcfa 	bl	8000a18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	22ca      	movs	r2, #202	; 0xca
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2253      	movs	r2, #83	; 0x53
 8002038:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f897 	bl	800216e <RTC_EnterInitMode>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	22ff      	movs	r2, #255	; 0xff
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2204      	movs	r2, #4
 8002052:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e05e      	b.n	8002116 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800206a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6899      	ldr	r1, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68d2      	ldr	r2, [r2, #12]
 8002092:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6919      	ldr	r1, [r3, #16]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	041a      	lsls	r2, r3, #16
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10e      	bne.n	80020e4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f829 	bl	800211e <HAL_RTC_WaitForSynchro>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	22ff      	movs	r2, #255	; 0xff
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2204      	movs	r2, #4
 80020de:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e018      	b.n	8002116 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	22ff      	movs	r2, #255	; 0xff
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002114:	2300      	movs	r3, #0
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002138:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800213a:	f7fe fdf5 	bl	8000d28 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002140:	e009      	b.n	8002156 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002142:	f7fe fdf1 	bl	8000d28 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002150:	d901      	bls.n	8002156 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e007      	b.n	8002166 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ee      	beq.n	8002142 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d119      	bne.n	80021bc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002192:	f7fe fdc9 	bl	8000d28 <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002198:	e009      	b.n	80021ae <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800219a:	f7fe fdc5 	bl	8000d28 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a8:	d901      	bls.n	80021ae <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e007      	b.n	80021be <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ee      	beq.n	800219a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e01d      	b.n	8002214 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f815 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f000 f967 	bl	80024d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b06      	cmp	r3, #6
 8002258:	d007      	beq.n	800226a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0202 	mvn.w	r2, #2
 80022a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8ee 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8e0 	bl	8002488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8f1 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0204 	mvn.w	r2, #4
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f8c4 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f8b6 	bl	8002488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f8c7 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b08      	cmp	r3, #8
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b08      	cmp	r3, #8
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0208 	mvn.w	r2, #8
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2204      	movs	r2, #4
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f89a 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f88c 	bl	8002488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f89d 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b10      	cmp	r3, #16
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b10      	cmp	r3, #16
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0210 	mvn.w	r2, #16
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2208      	movs	r2, #8
 80023a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f870 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f862 	bl	8002488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f873 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0201 	mvn.w	r2, #1
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fac8 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	2b80      	cmp	r3, #128	; 0x80
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f902 	bl	800262c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b40      	cmp	r3, #64	; 0x40
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f838 	bl	80024c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b20      	cmp	r3, #32
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0220 	mvn.w	r2, #32
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f8cc 	bl	8002618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a40      	ldr	r2, [pc, #256]	; (80025ec <TIM_Base_SetConfig+0x114>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <TIM_Base_SetConfig+0x40>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d00f      	beq.n	8002518 <TIM_Base_SetConfig+0x40>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3d      	ldr	r2, [pc, #244]	; (80025f0 <TIM_Base_SetConfig+0x118>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00b      	beq.n	8002518 <TIM_Base_SetConfig+0x40>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3c      	ldr	r2, [pc, #240]	; (80025f4 <TIM_Base_SetConfig+0x11c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <TIM_Base_SetConfig+0x40>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <TIM_Base_SetConfig+0x120>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_Base_SetConfig+0x40>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <TIM_Base_SetConfig+0x124>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <TIM_Base_SetConfig+0x114>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02b      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d027      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2c      	ldr	r2, [pc, #176]	; (80025f0 <TIM_Base_SetConfig+0x118>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d023      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <TIM_Base_SetConfig+0x11c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <TIM_Base_SetConfig+0x120>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01b      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a29      	ldr	r2, [pc, #164]	; (80025fc <TIM_Base_SetConfig+0x124>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d017      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a28      	ldr	r2, [pc, #160]	; (8002600 <TIM_Base_SetConfig+0x128>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a27      	ldr	r2, [pc, #156]	; (8002604 <TIM_Base_SetConfig+0x12c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00f      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a26      	ldr	r2, [pc, #152]	; (8002608 <TIM_Base_SetConfig+0x130>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00b      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <TIM_Base_SetConfig+0x134>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a24      	ldr	r2, [pc, #144]	; (8002610 <TIM_Base_SetConfig+0x138>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d003      	beq.n	800258a <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a23      	ldr	r2, [pc, #140]	; (8002614 <TIM_Base_SetConfig+0x13c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d108      	bne.n	800259c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <TIM_Base_SetConfig+0x114>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d003      	beq.n	80025d0 <TIM_Base_SetConfig+0xf8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <TIM_Base_SetConfig+0x124>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d103      	bne.n	80025d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	615a      	str	r2, [r3, #20]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40000c00 	.word	0x40000c00
 80025fc:	40010400 	.word	0x40010400
 8002600:	40014000 	.word	0x40014000
 8002604:	40014400 	.word	0x40014400
 8002608:	40014800 	.word	0x40014800
 800260c:	40001800 	.word	0x40001800
 8002610:	40001c00 	.word	0x40001c00
 8002614:	40002000 	.word	0x40002000

08002618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e03f      	b.n	80026d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f9ec 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 faf9 	bl	8002c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	4613      	mov	r3, r2
 80026e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d130      	bne.n	8002756 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_UART_Transmit_IT+0x26>
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e029      	b.n	8002758 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_UART_Transmit_IT+0x38>
 800270e:	2302      	movs	r3, #2
 8002710:	e022      	b.n	8002758 <HAL_UART_Transmit_IT+0x7e>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2221      	movs	r2, #33	; 0x21
 8002736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002750:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b20      	cmp	r3, #32
 800277c:	d140      	bne.n	8002800 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_UART_Receive_IT+0x26>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e039      	b.n	8002802 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_UART_Receive_IT+0x38>
 8002798:	2302      	movs	r3, #2
 800279a:	e032      	b.n	8002802 <HAL_UART_Receive_IT+0x9e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2222      	movs	r2, #34	; 0x22
 80027c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0220 	orr.w	r2, r2, #32
 80027fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_UART_IRQHandler+0x52>
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f98c 	bl	8002b78 <UART_Receive_IT>
      return;
 8002860:	e0d1      	b.n	8002a06 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b0 	beq.w	80029ca <HAL_UART_IRQHandler+0x1ba>
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_UART_IRQHandler+0x70>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80a5 	beq.w	80029ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_UART_IRQHandler+0x90>
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_UART_IRQHandler+0xb0>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	f043 0202 	orr.w	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_UART_IRQHandler+0xd0>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	f043 0204 	orr.w	r2, r3, #4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00f      	beq.n	800290a <HAL_UART_IRQHandler+0xfa>
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <HAL_UART_IRQHandler+0xee>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	f043 0208 	orr.w	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d078      	beq.n	8002a04 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_UART_IRQHandler+0x11c>
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f926 	bl	8002b78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_UART_IRQHandler+0x144>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d031      	beq.n	80029b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f86f 	bl	8002a38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d123      	bne.n	80029b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002976:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <HAL_UART_IRQHandler+0x1fc>)
 8002986:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fab9 	bl	8000f04 <HAL_DMA_Abort_IT>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d016      	beq.n	80029c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029a2:	4610      	mov	r0, r2
 80029a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a6:	e00e      	b.n	80029c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f83b 	bl	8002a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ae:	e00a      	b.n	80029c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f837 	bl	8002a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b6:	e006      	b.n	80029c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f833 	bl	8002a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80029c4:	e01e      	b.n	8002a04 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c6:	bf00      	nop
    return;
 80029c8:	e01c      	b.n	8002a04 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_UART_IRQHandler+0x1d6>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f85c 	bl	8002a9c <UART_Transmit_IT>
    return;
 80029e4:	e00f      	b.n	8002a06 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_UART_IRQHandler+0x1f6>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8a4 	bl	8002b48 <UART_EndTransmit_IT>
    return;
 8002a00:	bf00      	nop
 8002a02:	e000      	b.n	8002a06 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002a04:	bf00      	nop
  }
}
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	08002a75 	.word	0x08002a75

08002a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ffc8 	bl	8002a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b21      	cmp	r3, #33	; 0x21
 8002aae:	d144      	bne.n	8002b3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	d11a      	bne.n	8002af0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ace:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	1c9a      	adds	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	621a      	str	r2, [r3, #32]
 8002ae2:	e00e      	b.n	8002b02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	621a      	str	r2, [r3, #32]
 8002aee:	e008      	b.n	8002b02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	1c59      	adds	r1, r3, #1
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6211      	str	r1, [r2, #32]
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff51 	bl	8002a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b22      	cmp	r3, #34	; 0x22
 8002b8a:	d171      	bne.n	8002c70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b94:	d123      	bne.n	8002bde <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10e      	bne.n	8002bc2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	1c9a      	adds	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc0:	e029      	b.n	8002c16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
 8002bdc:	e01b      	b.n	8002c16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6858      	ldr	r0, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	1c59      	adds	r1, r3, #1
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6291      	str	r1, [r2, #40]	; 0x28
 8002bf6:	b2c2      	uxtb	r2, r0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e00c      	b.n	8002c16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	1c58      	adds	r0, r3, #1
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	6288      	str	r0, [r1, #40]	; 0x28
 8002c0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	4619      	mov	r1, r3
 8002c24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d120      	bne.n	8002c6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0220 	bic.w	r2, r2, #32
 8002c38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fd fc94 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e002      	b.n	8002c72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e000      	b.n	8002c72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cbe:	f023 030c 	bic.w	r3, r3, #12
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cea:	f040 818b 	bne.w	8003004 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4ac1      	ldr	r2, [pc, #772]	; (8002ff8 <UART_SetConfig+0x37c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d005      	beq.n	8002d04 <UART_SetConfig+0x88>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4abf      	ldr	r2, [pc, #764]	; (8002ffc <UART_SetConfig+0x380>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	f040 80bd 	bne.w	8002e7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d04:	f7fe ff76 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 8002d08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	f04f 0600 	mov.w	r6, #0
 8002d12:	46a8      	mov	r8, r5
 8002d14:	46b1      	mov	r9, r6
 8002d16:	eb18 0308 	adds.w	r3, r8, r8
 8002d1a:	eb49 0409 	adc.w	r4, r9, r9
 8002d1e:	4698      	mov	r8, r3
 8002d20:	46a1      	mov	r9, r4
 8002d22:	eb18 0805 	adds.w	r8, r8, r5
 8002d26:	eb49 0906 	adc.w	r9, r9, r6
 8002d2a:	f04f 0100 	mov.w	r1, #0
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d3e:	4688      	mov	r8, r1
 8002d40:	4691      	mov	r9, r2
 8002d42:	eb18 0005 	adds.w	r0, r8, r5
 8002d46:	eb49 0106 	adc.w	r1, r9, r6
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	461d      	mov	r5, r3
 8002d50:	f04f 0600 	mov.w	r6, #0
 8002d54:	196b      	adds	r3, r5, r5
 8002d56:	eb46 0406 	adc.w	r4, r6, r6
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4623      	mov	r3, r4
 8002d5e:	f7fd fa97 	bl	8000290 <__aeabi_uldivmod>
 8002d62:	4603      	mov	r3, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	461a      	mov	r2, r3
 8002d68:	4ba5      	ldr	r3, [pc, #660]	; (8003000 <UART_SetConfig+0x384>)
 8002d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	461d      	mov	r5, r3
 8002d78:	f04f 0600 	mov.w	r6, #0
 8002d7c:	46a9      	mov	r9, r5
 8002d7e:	46b2      	mov	sl, r6
 8002d80:	eb19 0309 	adds.w	r3, r9, r9
 8002d84:	eb4a 040a 	adc.w	r4, sl, sl
 8002d88:	4699      	mov	r9, r3
 8002d8a:	46a2      	mov	sl, r4
 8002d8c:	eb19 0905 	adds.w	r9, r9, r5
 8002d90:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002da0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002da4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002da8:	4689      	mov	r9, r1
 8002daa:	4692      	mov	sl, r2
 8002dac:	eb19 0005 	adds.w	r0, r9, r5
 8002db0:	eb4a 0106 	adc.w	r1, sl, r6
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	461d      	mov	r5, r3
 8002dba:	f04f 0600 	mov.w	r6, #0
 8002dbe:	196b      	adds	r3, r5, r5
 8002dc0:	eb46 0406 	adc.w	r4, r6, r6
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	f7fd fa62 	bl	8000290 <__aeabi_uldivmod>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	460c      	mov	r4, r1
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b8b      	ldr	r3, [pc, #556]	; (8003000 <UART_SetConfig+0x384>)
 8002dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2164      	movs	r1, #100	; 0x64
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	3332      	adds	r3, #50	; 0x32
 8002de6:	4a86      	ldr	r2, [pc, #536]	; (8003000 <UART_SetConfig+0x384>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df4:	4498      	add	r8, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	461d      	mov	r5, r3
 8002dfa:	f04f 0600 	mov.w	r6, #0
 8002dfe:	46a9      	mov	r9, r5
 8002e00:	46b2      	mov	sl, r6
 8002e02:	eb19 0309 	adds.w	r3, r9, r9
 8002e06:	eb4a 040a 	adc.w	r4, sl, sl
 8002e0a:	4699      	mov	r9, r3
 8002e0c:	46a2      	mov	sl, r4
 8002e0e:	eb19 0905 	adds.w	r9, r9, r5
 8002e12:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e2a:	4689      	mov	r9, r1
 8002e2c:	4692      	mov	sl, r2
 8002e2e:	eb19 0005 	adds.w	r0, r9, r5
 8002e32:	eb4a 0106 	adc.w	r1, sl, r6
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	f04f 0600 	mov.w	r6, #0
 8002e40:	196b      	adds	r3, r5, r5
 8002e42:	eb46 0406 	adc.w	r4, r6, r6
 8002e46:	461a      	mov	r2, r3
 8002e48:	4623      	mov	r3, r4
 8002e4a:	f7fd fa21 	bl	8000290 <__aeabi_uldivmod>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	460c      	mov	r4, r1
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <UART_SetConfig+0x384>)
 8002e56:	fba3 1302 	umull	r1, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2164      	movs	r1, #100	; 0x64
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3332      	adds	r3, #50	; 0x32
 8002e68:	4a65      	ldr	r2, [pc, #404]	; (8003000 <UART_SetConfig+0x384>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 0207 	and.w	r2, r3, #7
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4442      	add	r2, r8
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	e26f      	b.n	800335e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e7e:	f7fe fea5 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8002e82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	461d      	mov	r5, r3
 8002e88:	f04f 0600 	mov.w	r6, #0
 8002e8c:	46a8      	mov	r8, r5
 8002e8e:	46b1      	mov	r9, r6
 8002e90:	eb18 0308 	adds.w	r3, r8, r8
 8002e94:	eb49 0409 	adc.w	r4, r9, r9
 8002e98:	4698      	mov	r8, r3
 8002e9a:	46a1      	mov	r9, r4
 8002e9c:	eb18 0805 	adds.w	r8, r8, r5
 8002ea0:	eb49 0906 	adc.w	r9, r9, r6
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002eb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002eb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002eb8:	4688      	mov	r8, r1
 8002eba:	4691      	mov	r9, r2
 8002ebc:	eb18 0005 	adds.w	r0, r8, r5
 8002ec0:	eb49 0106 	adc.w	r1, r9, r6
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	461d      	mov	r5, r3
 8002eca:	f04f 0600 	mov.w	r6, #0
 8002ece:	196b      	adds	r3, r5, r5
 8002ed0:	eb46 0406 	adc.w	r4, r6, r6
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	f7fd f9da 	bl	8000290 <__aeabi_uldivmod>
 8002edc:	4603      	mov	r3, r0
 8002ede:	460c      	mov	r4, r1
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b47      	ldr	r3, [pc, #284]	; (8003000 <UART_SetConfig+0x384>)
 8002ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	461d      	mov	r5, r3
 8002ef2:	f04f 0600 	mov.w	r6, #0
 8002ef6:	46a9      	mov	r9, r5
 8002ef8:	46b2      	mov	sl, r6
 8002efa:	eb19 0309 	adds.w	r3, r9, r9
 8002efe:	eb4a 040a 	adc.w	r4, sl, sl
 8002f02:	4699      	mov	r9, r3
 8002f04:	46a2      	mov	sl, r4
 8002f06:	eb19 0905 	adds.w	r9, r9, r5
 8002f0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f22:	4689      	mov	r9, r1
 8002f24:	4692      	mov	sl, r2
 8002f26:	eb19 0005 	adds.w	r0, r9, r5
 8002f2a:	eb4a 0106 	adc.w	r1, sl, r6
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	461d      	mov	r5, r3
 8002f34:	f04f 0600 	mov.w	r6, #0
 8002f38:	196b      	adds	r3, r5, r5
 8002f3a:	eb46 0406 	adc.w	r4, r6, r6
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4623      	mov	r3, r4
 8002f42:	f7fd f9a5 	bl	8000290 <__aeabi_uldivmod>
 8002f46:	4603      	mov	r3, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <UART_SetConfig+0x384>)
 8002f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2164      	movs	r1, #100	; 0x64
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	3332      	adds	r3, #50	; 0x32
 8002f60:	4a27      	ldr	r2, [pc, #156]	; (8003000 <UART_SetConfig+0x384>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f6e:	4498      	add	r8, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	461d      	mov	r5, r3
 8002f74:	f04f 0600 	mov.w	r6, #0
 8002f78:	46a9      	mov	r9, r5
 8002f7a:	46b2      	mov	sl, r6
 8002f7c:	eb19 0309 	adds.w	r3, r9, r9
 8002f80:	eb4a 040a 	adc.w	r4, sl, sl
 8002f84:	4699      	mov	r9, r3
 8002f86:	46a2      	mov	sl, r4
 8002f88:	eb19 0905 	adds.w	r9, r9, r5
 8002f8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fa4:	4689      	mov	r9, r1
 8002fa6:	4692      	mov	sl, r2
 8002fa8:	eb19 0005 	adds.w	r0, r9, r5
 8002fac:	eb4a 0106 	adc.w	r1, sl, r6
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	461d      	mov	r5, r3
 8002fb6:	f04f 0600 	mov.w	r6, #0
 8002fba:	196b      	adds	r3, r5, r5
 8002fbc:	eb46 0406 	adc.w	r4, r6, r6
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	f7fd f964 	bl	8000290 <__aeabi_uldivmod>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <UART_SetConfig+0x384>)
 8002fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	2164      	movs	r1, #100	; 0x64
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	3332      	adds	r3, #50	; 0x32
 8002fe2:	4a07      	ldr	r2, [pc, #28]	; (8003000 <UART_SetConfig+0x384>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	f003 0207 	and.w	r2, r3, #7
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4442      	add	r2, r8
 8002ff4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ff6:	e1b2      	b.n	800335e <UART_SetConfig+0x6e2>
 8002ff8:	40011000 	.word	0x40011000
 8002ffc:	40011400 	.word	0x40011400
 8003000:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4ad7      	ldr	r2, [pc, #860]	; (8003368 <UART_SetConfig+0x6ec>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d005      	beq.n	800301a <UART_SetConfig+0x39e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4ad6      	ldr	r2, [pc, #856]	; (800336c <UART_SetConfig+0x6f0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	f040 80d1 	bne.w	80031bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800301a:	f7fe fdeb 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 800301e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	469a      	mov	sl, r3
 8003024:	f04f 0b00 	mov.w	fp, #0
 8003028:	46d0      	mov	r8, sl
 800302a:	46d9      	mov	r9, fp
 800302c:	eb18 0308 	adds.w	r3, r8, r8
 8003030:	eb49 0409 	adc.w	r4, r9, r9
 8003034:	4698      	mov	r8, r3
 8003036:	46a1      	mov	r9, r4
 8003038:	eb18 080a 	adds.w	r8, r8, sl
 800303c:	eb49 090b 	adc.w	r9, r9, fp
 8003040:	f04f 0100 	mov.w	r1, #0
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800304c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003050:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003054:	4688      	mov	r8, r1
 8003056:	4691      	mov	r9, r2
 8003058:	eb1a 0508 	adds.w	r5, sl, r8
 800305c:	eb4b 0609 	adc.w	r6, fp, r9
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4619      	mov	r1, r3
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	f04f 0400 	mov.w	r4, #0
 8003072:	0094      	lsls	r4, r2, #2
 8003074:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003078:	008b      	lsls	r3, r1, #2
 800307a:	461a      	mov	r2, r3
 800307c:	4623      	mov	r3, r4
 800307e:	4628      	mov	r0, r5
 8003080:	4631      	mov	r1, r6
 8003082:	f7fd f905 	bl	8000290 <__aeabi_uldivmod>
 8003086:	4603      	mov	r3, r0
 8003088:	460c      	mov	r4, r1
 800308a:	461a      	mov	r2, r3
 800308c:	4bb8      	ldr	r3, [pc, #736]	; (8003370 <UART_SetConfig+0x6f4>)
 800308e:	fba3 2302 	umull	r2, r3, r3, r2
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	469b      	mov	fp, r3
 800309c:	f04f 0c00 	mov.w	ip, #0
 80030a0:	46d9      	mov	r9, fp
 80030a2:	46e2      	mov	sl, ip
 80030a4:	eb19 0309 	adds.w	r3, r9, r9
 80030a8:	eb4a 040a 	adc.w	r4, sl, sl
 80030ac:	4699      	mov	r9, r3
 80030ae:	46a2      	mov	sl, r4
 80030b0:	eb19 090b 	adds.w	r9, r9, fp
 80030b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030cc:	4689      	mov	r9, r1
 80030ce:	4692      	mov	sl, r2
 80030d0:	eb1b 0509 	adds.w	r5, fp, r9
 80030d4:	eb4c 060a 	adc.w	r6, ip, sl
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4619      	mov	r1, r3
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	f04f 0400 	mov.w	r4, #0
 80030ea:	0094      	lsls	r4, r2, #2
 80030ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030f0:	008b      	lsls	r3, r1, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	4623      	mov	r3, r4
 80030f6:	4628      	mov	r0, r5
 80030f8:	4631      	mov	r1, r6
 80030fa:	f7fd f8c9 	bl	8000290 <__aeabi_uldivmod>
 80030fe:	4603      	mov	r3, r0
 8003100:	460c      	mov	r4, r1
 8003102:	461a      	mov	r2, r3
 8003104:	4b9a      	ldr	r3, [pc, #616]	; (8003370 <UART_SetConfig+0x6f4>)
 8003106:	fba3 1302 	umull	r1, r3, r3, r2
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2164      	movs	r1, #100	; 0x64
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	3332      	adds	r3, #50	; 0x32
 8003118:	4a95      	ldr	r2, [pc, #596]	; (8003370 <UART_SetConfig+0x6f4>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003124:	4498      	add	r8, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	469b      	mov	fp, r3
 800312a:	f04f 0c00 	mov.w	ip, #0
 800312e:	46d9      	mov	r9, fp
 8003130:	46e2      	mov	sl, ip
 8003132:	eb19 0309 	adds.w	r3, r9, r9
 8003136:	eb4a 040a 	adc.w	r4, sl, sl
 800313a:	4699      	mov	r9, r3
 800313c:	46a2      	mov	sl, r4
 800313e:	eb19 090b 	adds.w	r9, r9, fp
 8003142:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003152:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003156:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800315a:	4689      	mov	r9, r1
 800315c:	4692      	mov	sl, r2
 800315e:	eb1b 0509 	adds.w	r5, fp, r9
 8003162:	eb4c 060a 	adc.w	r6, ip, sl
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4619      	mov	r1, r3
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	0094      	lsls	r4, r2, #2
 800317a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800317e:	008b      	lsls	r3, r1, #2
 8003180:	461a      	mov	r2, r3
 8003182:	4623      	mov	r3, r4
 8003184:	4628      	mov	r0, r5
 8003186:	4631      	mov	r1, r6
 8003188:	f7fd f882 	bl	8000290 <__aeabi_uldivmod>
 800318c:	4603      	mov	r3, r0
 800318e:	460c      	mov	r4, r1
 8003190:	461a      	mov	r2, r3
 8003192:	4b77      	ldr	r3, [pc, #476]	; (8003370 <UART_SetConfig+0x6f4>)
 8003194:	fba3 1302 	umull	r1, r3, r3, r2
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	2164      	movs	r1, #100	; 0x64
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	3332      	adds	r3, #50	; 0x32
 80031a6:	4a72      	ldr	r2, [pc, #456]	; (8003370 <UART_SetConfig+0x6f4>)
 80031a8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	f003 020f 	and.w	r2, r3, #15
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4442      	add	r2, r8
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	e0d0      	b.n	800335e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031bc:	f7fe fd06 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 80031c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	469a      	mov	sl, r3
 80031c6:	f04f 0b00 	mov.w	fp, #0
 80031ca:	46d0      	mov	r8, sl
 80031cc:	46d9      	mov	r9, fp
 80031ce:	eb18 0308 	adds.w	r3, r8, r8
 80031d2:	eb49 0409 	adc.w	r4, r9, r9
 80031d6:	4698      	mov	r8, r3
 80031d8:	46a1      	mov	r9, r4
 80031da:	eb18 080a 	adds.w	r8, r8, sl
 80031de:	eb49 090b 	adc.w	r9, r9, fp
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031f6:	4688      	mov	r8, r1
 80031f8:	4691      	mov	r9, r2
 80031fa:	eb1a 0508 	adds.w	r5, sl, r8
 80031fe:	eb4b 0609 	adc.w	r6, fp, r9
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4619      	mov	r1, r3
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	f04f 0400 	mov.w	r4, #0
 8003214:	0094      	lsls	r4, r2, #2
 8003216:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800321a:	008b      	lsls	r3, r1, #2
 800321c:	461a      	mov	r2, r3
 800321e:	4623      	mov	r3, r4
 8003220:	4628      	mov	r0, r5
 8003222:	4631      	mov	r1, r6
 8003224:	f7fd f834 	bl	8000290 <__aeabi_uldivmod>
 8003228:	4603      	mov	r3, r0
 800322a:	460c      	mov	r4, r1
 800322c:	461a      	mov	r2, r3
 800322e:	4b50      	ldr	r3, [pc, #320]	; (8003370 <UART_SetConfig+0x6f4>)
 8003230:	fba3 2302 	umull	r2, r3, r3, r2
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	469b      	mov	fp, r3
 800323e:	f04f 0c00 	mov.w	ip, #0
 8003242:	46d9      	mov	r9, fp
 8003244:	46e2      	mov	sl, ip
 8003246:	eb19 0309 	adds.w	r3, r9, r9
 800324a:	eb4a 040a 	adc.w	r4, sl, sl
 800324e:	4699      	mov	r9, r3
 8003250:	46a2      	mov	sl, r4
 8003252:	eb19 090b 	adds.w	r9, r9, fp
 8003256:	eb4a 0a0c 	adc.w	sl, sl, ip
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003266:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800326a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800326e:	4689      	mov	r9, r1
 8003270:	4692      	mov	sl, r2
 8003272:	eb1b 0509 	adds.w	r5, fp, r9
 8003276:	eb4c 060a 	adc.w	r6, ip, sl
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	f04f 0400 	mov.w	r4, #0
 800328c:	0094      	lsls	r4, r2, #2
 800328e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003292:	008b      	lsls	r3, r1, #2
 8003294:	461a      	mov	r2, r3
 8003296:	4623      	mov	r3, r4
 8003298:	4628      	mov	r0, r5
 800329a:	4631      	mov	r1, r6
 800329c:	f7fc fff8 	bl	8000290 <__aeabi_uldivmod>
 80032a0:	4603      	mov	r3, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b32      	ldr	r3, [pc, #200]	; (8003370 <UART_SetConfig+0x6f4>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	; 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	3332      	adds	r3, #50	; 0x32
 80032ba:	4a2d      	ldr	r2, [pc, #180]	; (8003370 <UART_SetConfig+0x6f4>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c6:	4498      	add	r8, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	469b      	mov	fp, r3
 80032cc:	f04f 0c00 	mov.w	ip, #0
 80032d0:	46d9      	mov	r9, fp
 80032d2:	46e2      	mov	sl, ip
 80032d4:	eb19 0309 	adds.w	r3, r9, r9
 80032d8:	eb4a 040a 	adc.w	r4, sl, sl
 80032dc:	4699      	mov	r9, r3
 80032de:	46a2      	mov	sl, r4
 80032e0:	eb19 090b 	adds.w	r9, r9, fp
 80032e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032fc:	4689      	mov	r9, r1
 80032fe:	4692      	mov	sl, r2
 8003300:	eb1b 0509 	adds.w	r5, fp, r9
 8003304:	eb4c 060a 	adc.w	r6, ip, sl
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4619      	mov	r1, r3
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f04f 0400 	mov.w	r4, #0
 800331a:	0094      	lsls	r4, r2, #2
 800331c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003320:	008b      	lsls	r3, r1, #2
 8003322:	461a      	mov	r2, r3
 8003324:	4623      	mov	r3, r4
 8003326:	4628      	mov	r0, r5
 8003328:	4631      	mov	r1, r6
 800332a:	f7fc ffb1 	bl	8000290 <__aeabi_uldivmod>
 800332e:	4603      	mov	r3, r0
 8003330:	460c      	mov	r4, r1
 8003332:	461a      	mov	r2, r3
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <UART_SetConfig+0x6f4>)
 8003336:	fba3 1302 	umull	r1, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2164      	movs	r1, #100	; 0x64
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	3332      	adds	r3, #50	; 0x32
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <UART_SetConfig+0x6f4>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4442      	add	r2, r8
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	e7ff      	b.n	800335e <UART_SetConfig+0x6e2>
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003368:	40011000 	.word	0x40011000
 800336c:	40011400 	.word	0x40011400
 8003370:	51eb851f 	.word	0x51eb851f

08003374 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800338a:	f3ef 8305 	mrs	r3, IPSR
 800338e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003390:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003396:	f3ef 8310 	mrs	r3, PRIMASK
 800339a:	607b      	str	r3, [r7, #4]
  return(result);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033a2:	f3ef 8311 	mrs	r3, BASEPRI
 80033a6:	603b      	str	r3, [r7, #0]
  return(result);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <osKernelInitialize+0x3a>
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <osKernelInitialize+0x64>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d103      	bne.n	80033be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80033b6:	f06f 0305 	mvn.w	r3, #5
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e00c      	b.n	80033d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <osKernelInitialize+0x64>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <osKernelInitialize+0x64>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e002      	b.n	80033d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033d8:	68fb      	ldr	r3, [r7, #12]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000094 	.word	0x20000094

080033ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033f2:	f3ef 8305 	mrs	r3, IPSR
 80033f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003402:	607b      	str	r3, [r7, #4]
  return(result);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800340a:	f3ef 8311 	mrs	r3, BASEPRI
 800340e:	603b      	str	r3, [r7, #0]
  return(result);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <osKernelStart+0x3a>
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <osKernelStart+0x68>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d103      	bne.n	8003426 <osKernelStart+0x3a>
    stat = osErrorISR;
 800341e:	f06f 0305 	mvn.w	r3, #5
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e010      	b.n	8003448 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <osKernelStart+0x68>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d109      	bne.n	8003442 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800342e:	f7ff ffa1 	bl	8003374 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <osKernelStart+0x68>)
 8003434:	2202      	movs	r2, #2
 8003436:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003438:	f001 f870 	bl	800451c <vTaskStartScheduler>
      stat = osOK;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e002      	b.n	8003448 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000094 	.word	0x20000094

08003458 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b090      	sub	sp, #64	; 0x40
 800345c:	af04      	add	r7, sp, #16
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003468:	f3ef 8305 	mrs	r3, IPSR
 800346c:	61fb      	str	r3, [r7, #28]
  return(result);
 800346e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 808f 	bne.w	8003594 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003476:	f3ef 8310 	mrs	r3, PRIMASK
 800347a:	61bb      	str	r3, [r7, #24]
  return(result);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003482:	f3ef 8311 	mrs	r3, BASEPRI
 8003486:	617b      	str	r3, [r7, #20]
  return(result);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <osThreadNew+0x3e>
 800348e:	4b44      	ldr	r3, [pc, #272]	; (80035a0 <osThreadNew+0x148>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d07e      	beq.n	8003594 <osThreadNew+0x13c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d07b      	beq.n	8003594 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80034a0:	2318      	movs	r3, #24
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d045      	beq.n	8003540 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <osThreadNew+0x6a>
        name = attr->name;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <osThreadNew+0x90>
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	2b38      	cmp	r3, #56	; 0x38
 80034da:	d805      	bhi.n	80034e8 <osThreadNew+0x90>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <osThreadNew+0x94>
        return (NULL);
 80034e8:	2300      	movs	r3, #0
 80034ea:	e054      	b.n	8003596 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <osThreadNew+0xca>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b5b      	cmp	r3, #91	; 0x5b
 800350a:	d90a      	bls.n	8003522 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <osThreadNew+0xca>
        mem = 1;
 800351c:	2301      	movs	r3, #1
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	e010      	b.n	8003544 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <osThreadNew+0xec>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <osThreadNew+0xec>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <osThreadNew+0xec>
          mem = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	623b      	str	r3, [r7, #32]
 800353e:	e001      	b.n	8003544 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d110      	bne.n	800356c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003552:	9202      	str	r2, [sp, #8]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fe09 	bl	8004178 <xTaskCreateStatic>
 8003566:	4603      	mov	r3, r0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	e013      	b.n	8003594 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d110      	bne.n	8003594 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	b29a      	uxth	r2, r3
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fe51 	bl	800422c <xTaskCreate>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d001      	beq.n	8003594 <osThreadNew+0x13c>
          hTask = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003594:	693b      	ldr	r3, [r7, #16]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3730      	adds	r7, #48	; 0x30
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000094 	.word	0x20000094

080035a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ac:	f3ef 8305 	mrs	r3, IPSR
 80035b0:	613b      	str	r3, [r7, #16]
  return(result);
 80035b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10f      	bne.n	80035d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b8:	f3ef 8310 	mrs	r3, PRIMASK
 80035bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035c4:	f3ef 8311 	mrs	r3, BASEPRI
 80035c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <osDelay+0x3c>
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <osDelay+0x58>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d103      	bne.n	80035e0 <osDelay+0x3c>
    stat = osErrorISR;
 80035d8:	f06f 0305 	mvn.w	r3, #5
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e007      	b.n	80035f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 ff62 	bl	80044b4 <vTaskDelay>
    }
  }

  return (stat);
 80035f0:	697b      	ldr	r3, [r7, #20]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000094 	.word	0x20000094

08003600 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <vApplicationGetIdleTaskMemory+0x2c>)
 8003610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <vApplicationGetIdleTaskMemory+0x30>)
 8003616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000098 	.word	0x20000098
 8003630:	200000f4 	.word	0x200000f4

08003634 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <vApplicationGetTimerTaskMemory+0x2c>)
 8003644:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4a06      	ldr	r2, [pc, #24]	; (8003664 <vApplicationGetTimerTaskMemory+0x30>)
 800364a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003652:	601a      	str	r2, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	200002f4 	.word	0x200002f4
 8003664:	20000350 	.word	0x20000350

08003668 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f103 0208 	add.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f103 0208 	add.w	r2, r3, #8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f103 0208 	add.w	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d103      	bne.n	800372a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e00c      	b.n	8003744 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3308      	adds	r3, #8
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e002      	b.n	8003738 <vListInsert+0x2e>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	d2f6      	bcs.n	8003732 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6852      	ldr	r2, [r2, #4]
 800379c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d103      	bne.n	80037b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1e5a      	subs	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	e7fe      	b.n	80037f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80037f8:	f002 f810 	bl	800581c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	3b01      	subs	r3, #1
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	441a      	add	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	22ff      	movs	r2, #255	; 0xff
 8003844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d114      	bne.n	8003878 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01a      	beq.n	800388c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3310      	adds	r3, #16
 800385a:	4618      	mov	r0, r3
 800385c:	f001 f8de 	bl	8004a1c <xTaskRemoveFromEventList>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <xQueueGenericReset+0xcc>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	e009      	b.n	800388c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3310      	adds	r3, #16
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fef3 	bl	8003668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3324      	adds	r3, #36	; 0x24
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff feee 	bl	8003668 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800388c:	f001 fff4 	bl	8005878 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003890:	2301      	movs	r3, #1
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <xQueueGenericCreateStatic+0x28>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c6:	e7fe      	b.n	80038c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <xQueueGenericCreateStatic+0x42>
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	e7fe      	b.n	80038e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <xQueueGenericCreateStatic+0x4e>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <xQueueGenericCreateStatic+0x52>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <xQueueGenericCreateStatic+0x54>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <xQueueGenericCreateStatic+0x6c>
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	e7fe      	b.n	800390a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <xQueueGenericCreateStatic+0x78>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <xQueueGenericCreateStatic+0x7c>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <xQueueGenericCreateStatic+0x7e>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <xQueueGenericCreateStatic+0x96>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e7fe      	b.n	8003934 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003936:	2350      	movs	r3, #80	; 0x50
 8003938:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b50      	cmp	r3, #80	; 0x50
 800393e:	d009      	beq.n	8003954 <xQueueGenericCreateStatic+0xb4>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e7fe      	b.n	8003952 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003954:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003968:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f805 	bl	8003986 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800397e:	4618      	mov	r0, r3
 8003980:	3730      	adds	r7, #48	; 0x30
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e002      	b.n	80039a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039b4:	2101      	movs	r1, #1
 80039b6:	69b8      	ldr	r0, [r7, #24]
 80039b8:	f7ff ff0a 	bl	80037d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08e      	sub	sp, #56	; 0x38
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039da:	2300      	movs	r3, #0
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <xQueueGenericSend+0x30>
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fa:	e7fe      	b.n	80039fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <xQueueGenericSend+0x3e>
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <xQueueGenericSend+0x42>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xQueueGenericSend+0x44>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <xQueueGenericSend+0x5c>
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
 8003a26:	e7fe      	b.n	8003a26 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d103      	bne.n	8003a36 <xQueueGenericSend+0x6a>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <xQueueGenericSend+0x6e>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <xQueueGenericSend+0x70>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <xQueueGenericSend+0x88>
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	623b      	str	r3, [r7, #32]
 8003a52:	e7fe      	b.n	8003a52 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a54:	f001 f998 	bl	8004d88 <xTaskGetSchedulerState>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <xQueueGenericSend+0x98>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <xQueueGenericSend+0x9c>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <xQueueGenericSend+0x9e>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <xQueueGenericSend+0xb6>
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e7fe      	b.n	8003a80 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a82:	f001 fecb 	bl	800581c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <xQueueGenericSend+0xcc>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d129      	bne.n	8003aec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a9e:	f000 f9ff 	bl	8003ea0 <prvCopyDataToQueue>
 8003aa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	3324      	adds	r3, #36	; 0x24
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 ffb3 	bl	8004a1c <xTaskRemoveFromEventList>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003abc:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <xQueueGenericSend+0x1f0>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	e00a      	b.n	8003ae4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ad4:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <xQueueGenericSend+0x1f0>)
 8003ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ae4:	f001 fec8 	bl	8005878 <vPortExitCritical>
				return pdPASS;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e063      	b.n	8003bb4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003af2:	f001 fec1 	bl	8005878 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e05c      	b.n	8003bb4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 ffeb 	bl	8004ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b0e:	f001 feb3 	bl	8005878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b12:	f000 fd67 	bl	80045e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b16:	f001 fe81 	bl	800581c <vPortEnterCritical>
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d103      	bne.n	8003b30 <xQueueGenericSend+0x164>
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d103      	bne.n	8003b46 <xQueueGenericSend+0x17a>
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b46:	f001 fe97 	bl	8005878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b4a:	1d3a      	adds	r2, r7, #4
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 ffda 	bl	8004b0c <xTaskCheckForTimeOut>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d124      	bne.n	8003ba8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b60:	f000 fa96 	bl	8004090 <prvIsQueueFull>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d018      	beq.n	8003b9c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 ff04 	bl	8004980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7a:	f000 fa21 	bl	8003fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b7e:	f000 fd3f 	bl	8004600 <xTaskResumeAll>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f47f af7c 	bne.w	8003a82 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <xQueueGenericSend+0x1f0>)
 8003b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	e772      	b.n	8003a82 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b9e:	f000 fa0f 	bl	8003fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ba2:	f000 fd2d 	bl	8004600 <xTaskResumeAll>
 8003ba6:	e76c      	b.n	8003a82 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003baa:	f000 fa09 	bl	8003fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bae:	f000 fd27 	bl	8004600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3738      	adds	r7, #56	; 0x38
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	e000ed04 	.word	0xe000ed04

08003bc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08e      	sub	sp, #56	; 0x38
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <xQueueGenericSendFromISR+0x2c>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	e7fe      	b.n	8003bea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <xQueueGenericSendFromISR+0x3a>
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <xQueueGenericSendFromISR+0x3e>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <xQueueGenericSendFromISR+0x40>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <xQueueGenericSendFromISR+0x58>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	623b      	str	r3, [r7, #32]
 8003c16:	e7fe      	b.n	8003c16 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d103      	bne.n	8003c26 <xQueueGenericSendFromISR+0x66>
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <xQueueGenericSendFromISR+0x6a>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <xQueueGenericSendFromISR+0x6c>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <xQueueGenericSendFromISR+0x84>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e7fe      	b.n	8003c42 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c44:	f001 fec6 	bl	80059d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c48:	f3ef 8211 	mrs	r2, BASEPRI
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	61ba      	str	r2, [r7, #24]
 8003c5e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d302      	bcc.n	8003c76 <xQueueGenericSendFromISR+0xb6>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d12c      	bne.n	8003cd0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c86:	f000 f90b 	bl	8003ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d112      	bne.n	8003cba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d016      	beq.n	8003cca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	3324      	adds	r3, #36	; 0x24
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 febb 	bl	8004a1c <xTaskRemoveFromEventList>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00e      	beq.n	8003cca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e007      	b.n	8003cca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	b25a      	sxtb	r2, r3
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003cce:	e001      	b.n	8003cd4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3738      	adds	r7, #56	; 0x38
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <xQueueReceive+0x2e>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	e7fe      	b.n	8003d14 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <xQueueReceive+0x3c>
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <xQueueReceive+0x40>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <xQueueReceive+0x42>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <xQueueReceive+0x5a>
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e7fe      	b.n	8003d40 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d42:	f001 f821 	bl	8004d88 <xTaskGetSchedulerState>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <xQueueReceive+0x6a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <xQueueReceive+0x6e>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <xQueueReceive+0x70>
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <xQueueReceive+0x88>
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e7fe      	b.n	8003d6e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d70:	f001 fd54 	bl	800581c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01f      	beq.n	8003dc0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d84:	f000 f8f6 	bl	8003f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00f      	beq.n	8003db8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	3310      	adds	r3, #16
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fe3d 	bl	8004a1c <xTaskRemoveFromEventList>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003da8:	4b3c      	ldr	r3, [pc, #240]	; (8003e9c <xQueueReceive+0x1b4>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003db8:	f001 fd5e 	bl	8005878 <vPortExitCritical>
				return pdPASS;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e069      	b.n	8003e94 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dc6:	f001 fd57 	bl	8005878 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e062      	b.n	8003e94 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dd4:	f107 0310 	add.w	r3, r7, #16
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fe81 	bl	8004ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dde:	2301      	movs	r3, #1
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003de2:	f001 fd49 	bl	8005878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003de6:	f000 fbfd 	bl	80045e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dea:	f001 fd17 	bl	800581c <vPortEnterCritical>
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df4:	b25b      	sxtb	r3, r3
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d103      	bne.n	8003e04 <xQueueReceive+0x11c>
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d103      	bne.n	8003e1a <xQueueReceive+0x132>
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e1a:	f001 fd2d 	bl	8005878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e1e:	1d3a      	adds	r2, r7, #4
 8003e20:	f107 0310 	add.w	r3, r7, #16
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fe70 	bl	8004b0c <xTaskCheckForTimeOut>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d123      	bne.n	8003e7a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e34:	f000 f916 	bl	8004064 <prvIsQueueEmpty>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d017      	beq.n	8003e6e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	3324      	adds	r3, #36	; 0x24
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fd9a 	bl	8004980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4e:	f000 f8b7 	bl	8003fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e52:	f000 fbd5 	bl	8004600 <xTaskResumeAll>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d189      	bne.n	8003d70 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <xQueueReceive+0x1b4>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	e780      	b.n	8003d70 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e70:	f000 f8a6 	bl	8003fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e74:	f000 fbc4 	bl	8004600 <xTaskResumeAll>
 8003e78:	e77a      	b.n	8003d70 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e7c:	f000 f8a0 	bl	8003fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e80:	f000 fbbe 	bl	8004600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e86:	f000 f8ed 	bl	8004064 <prvIsQueueEmpty>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f43f af6f 	beq.w	8003d70 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3730      	adds	r7, #48	; 0x30
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10d      	bne.n	8003eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d14d      	bne.n	8003f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 ff7a 	bl	8004dc4 <xTaskPriorityDisinherit>
 8003ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	e043      	b.n	8003f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d119      	bne.n	8003f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6858      	ldr	r0, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	f001 ffb0 	bl	8005e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	441a      	add	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d32b      	bcc.n	8003f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	e026      	b.n	8003f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68d8      	ldr	r0, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	f001 ff96 	bl	8005e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	425b      	negs	r3, r3
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d207      	bcs.n	8003f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	425b      	negs	r3, r3
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d105      	bne.n	8003f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f6a:	697b      	ldr	r3, [r7, #20]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d303      	bcc.n	8003fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f001 ff4c 	bl	8005e50 <memcpy>
	}
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fc8:	f001 fc28 	bl	800581c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fd4:	e011      	b.n	8003ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d012      	beq.n	8004004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3324      	adds	r3, #36	; 0x24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fd1a 	bl	8004a1c <xTaskRemoveFromEventList>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fee:	f000 fded 	bl	8004bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	dce9      	bgt.n	8003fd6 <prvUnlockQueue+0x16>
 8004002:	e000      	b.n	8004006 <prvUnlockQueue+0x46>
					break;
 8004004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800400e:	f001 fc33 	bl	8005878 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004012:	f001 fc03 	bl	800581c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800401c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800401e:	e011      	b.n	8004044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d012      	beq.n	800404e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3310      	adds	r3, #16
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fcf5 	bl	8004a1c <xTaskRemoveFromEventList>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004038:	f000 fdc8 	bl	8004bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800403c:	7bbb      	ldrb	r3, [r7, #14]
 800403e:	3b01      	subs	r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004048:	2b00      	cmp	r3, #0
 800404a:	dce9      	bgt.n	8004020 <prvUnlockQueue+0x60>
 800404c:	e000      	b.n	8004050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800404e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	22ff      	movs	r2, #255	; 0xff
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004058:	f001 fc0e 	bl	8005878 <vPortExitCritical>
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800406c:	f001 fbd6 	bl	800581c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e001      	b.n	8004082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004082:	f001 fbf9 	bl	8005878 <vPortExitCritical>

	return xReturn;
 8004086:	68fb      	ldr	r3, [r7, #12]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004098:	f001 fbc0 	bl	800581c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d102      	bne.n	80040ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e001      	b.n	80040b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040b2:	f001 fbe1 	bl	8005878 <vPortExitCritical>

	return xReturn;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e014      	b.n	80040fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <vQueueAddToRegistry+0x4c>)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040dc:	490b      	ldr	r1, [pc, #44]	; (800410c <vQueueAddToRegistry+0x4c>)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040e6:	4a09      	ldr	r2, [pc, #36]	; (800410c <vQueueAddToRegistry+0x4c>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040f2:	e005      	b.n	8004100 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d9e7      	bls.n	80040d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	20004abc 	.word	0x20004abc

08004110 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004120:	f001 fb7c 	bl	800581c <vPortEnterCritical>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800412a:	b25b      	sxtb	r3, r3
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d103      	bne.n	800413a <vQueueWaitForMessageRestricted+0x2a>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004140:	b25b      	sxtb	r3, r3
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d103      	bne.n	8004150 <vQueueWaitForMessageRestricted+0x40>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004150:	f001 fb92 	bl	8005878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3324      	adds	r3, #36	; 0x24
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fc2f 	bl	80049c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800416a:	6978      	ldr	r0, [r7, #20]
 800416c:	f7ff ff28 	bl	8003fc0 <prvUnlockQueue>
	}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af04      	add	r7, sp, #16
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <xTaskCreateStatic+0x28>
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	e7fe      	b.n	800419e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <xTaskCreateStatic+0x42>
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e7fe      	b.n	80041b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041ba:	235c      	movs	r3, #92	; 0x5c
 80041bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b5c      	cmp	r3, #92	; 0x5c
 80041c2:	d009      	beq.n	80041d8 <xTaskCreateStatic+0x60>
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e7fe      	b.n	80041d6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01e      	beq.n	800421e <xTaskCreateStatic+0xa6>
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01b      	beq.n	800421e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041f8:	2300      	movs	r3, #0
 80041fa:	9303      	str	r3, [sp, #12]
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	9302      	str	r3, [sp, #8]
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f850 	bl	80042b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004218:	f000 f8dc 	bl	80043d4 <prvAddNewTaskToReadyList>
 800421c:	e001      	b.n	8004222 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004222:	697b      	ldr	r3, [r7, #20]
	}
 8004224:	4618      	mov	r0, r3
 8004226:	3728      	adds	r7, #40	; 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af04      	add	r7, sp, #16
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fc05 	bl	8005a50 <pvPortMalloc>
 8004246:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00e      	beq.n	800426c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800424e:	205c      	movs	r0, #92	; 0x5c
 8004250:	f001 fbfe 	bl	8005a50 <pvPortMalloc>
 8004254:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
 8004262:	e005      	b.n	8004270 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004264:	6978      	ldr	r0, [r7, #20]
 8004266:	f001 fcb5 	bl	8005bd4 <vPortFree>
 800426a:	e001      	b.n	8004270 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d017      	beq.n	80042a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	2300      	movs	r3, #0
 8004282:	9303      	str	r3, [sp, #12]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f80e 	bl	80042b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800429a:	69f8      	ldr	r0, [r7, #28]
 800429c:	f000 f89a 	bl	80043d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042a0:	2301      	movs	r3, #1
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e002      	b.n	80042ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042ac:	69bb      	ldr	r3, [r7, #24]
	}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b088      	sub	sp, #32
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	461a      	mov	r2, r3
 80042ce:	21a5      	movs	r1, #165	; 0xa5
 80042d0:	f001 fdc9 	bl	8005e66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042de:	3b01      	subs	r3, #1
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f023 0307 	bic.w	r3, r3, #7
 80042ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <prvInitialiseNewTask+0x56>
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	e7fe      	b.n	800430a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01f      	beq.n	8004352 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e012      	b.n	800433e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	7819      	ldrb	r1, [r3, #0]
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	3334      	adds	r3, #52	; 0x34
 8004328:	460a      	mov	r2, r1
 800432a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b0f      	cmp	r3, #15
 8004342:	d9e9      	bls.n	8004318 <prvInitialiseNewTask+0x62>
 8004344:	e000      	b.n	8004348 <prvInitialiseNewTask+0x92>
			{
				break;
 8004346:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004350:	e003      	b.n	800435a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	2b37      	cmp	r3, #55	; 0x37
 800435e:	d901      	bls.n	8004364 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004360:	2337      	movs	r3, #55	; 0x37
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff f994 	bl	80036a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	3318      	adds	r3, #24
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff f98f 	bl	80036a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	2200      	movs	r2, #0
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	69b8      	ldr	r0, [r7, #24]
 80043b4:	f001 f90c 	bl	80055d0 <pxPortInitialiseStack>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ca:	bf00      	nop
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043dc:	f001 fa1e 	bl	800581c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ea:	4b2c      	ldr	r3, [pc, #176]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043f8:	4b27      	ldr	r3, [pc, #156]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d110      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004400:	f000 fc08 	bl	8004c14 <prvInitialiseTaskLists>
 8004404:	e00d      	b.n	8004422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <prvAddNewTaskToReadyList+0xcc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	429a      	cmp	r2, r3
 800441a:	d802      	bhi.n	8004422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 800442a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <prvAddNewTaskToReadyList+0xd4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d903      	bls.n	8004448 <prvAddNewTaskToReadyList+0x74>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <prvAddNewTaskToReadyList+0xd4>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <prvAddNewTaskToReadyList+0xd8>)
 8004456:	441a      	add	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7ff f92f 	bl	80036c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004464:	f001 fa08 	bl	8005878 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <prvAddNewTaskToReadyList+0xcc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00e      	beq.n	800448e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	429a      	cmp	r2, r3
 800447c:	d207      	bcs.n	800448e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <prvAddNewTaskToReadyList+0xdc>)
 8004480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000c24 	.word	0x20000c24
 800449c:	20000750 	.word	0x20000750
 80044a0:	20000c30 	.word	0x20000c30
 80044a4:	20000c40 	.word	0x20000c40
 80044a8:	20000c2c 	.word	0x20000c2c
 80044ac:	20000754 	.word	0x20000754
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <vTaskDelay+0x60>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <vTaskDelay+0x2e>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	e7fe      	b.n	80044e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80044e2:	f000 f87f 	bl	80045e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044e6:	2100      	movs	r1, #0
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fcd7 	bl	8004e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044ee:	f000 f887 	bl	8004600 <xTaskResumeAll>
 80044f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044fa:	4b07      	ldr	r3, [pc, #28]	; (8004518 <vTaskDelay+0x64>)
 80044fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000c4c 	.word	0x20000c4c
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800452a:	463a      	mov	r2, r7
 800452c:	1d39      	adds	r1, r7, #4
 800452e:	f107 0308 	add.w	r3, r7, #8
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f864 	bl	8003600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	9202      	str	r2, [sp, #8]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	2300      	movs	r3, #0
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2300      	movs	r3, #0
 8004548:	460a      	mov	r2, r1
 800454a:	4920      	ldr	r1, [pc, #128]	; (80045cc <vTaskStartScheduler+0xb0>)
 800454c:	4820      	ldr	r0, [pc, #128]	; (80045d0 <vTaskStartScheduler+0xb4>)
 800454e:	f7ff fe13 	bl	8004178 <xTaskCreateStatic>
 8004552:	4602      	mov	r2, r0
 8004554:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <vTaskStartScheduler+0xb8>)
 8004556:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <vTaskStartScheduler+0xb8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004560:	2301      	movs	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	e001      	b.n	800456a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d102      	bne.n	8004576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004570:	f000 fce8 	bl	8004f44 <xTimerCreateTimerTask>
 8004574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d115      	bne.n	80045a8 <vTaskStartScheduler+0x8c>
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <vTaskStartScheduler+0xbc>)
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <vTaskStartScheduler+0xc0>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <vTaskStartScheduler+0xc4>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045a2:	f001 f89d 	bl	80056e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045a6:	e00d      	b.n	80045c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d109      	bne.n	80045c4 <vTaskStartScheduler+0xa8>
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e7fe      	b.n	80045c2 <vTaskStartScheduler+0xa6>
}
 80045c4:	bf00      	nop
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	080066cc 	.word	0x080066cc
 80045d0:	08004be5 	.word	0x08004be5
 80045d4:	20000c48 	.word	0x20000c48
 80045d8:	20000c44 	.word	0x20000c44
 80045dc:	20000c30 	.word	0x20000c30
 80045e0:	20000c28 	.word	0x20000c28

080045e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <vTaskSuspendAll+0x18>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a03      	ldr	r2, [pc, #12]	; (80045fc <vTaskSuspendAll+0x18>)
 80045f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000c4c 	.word	0x20000c4c

08004600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <xTaskResumeAll+0x114>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <xTaskResumeAll+0x2a>
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	e7fe      	b.n	8004628 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800462a:	f001 f8f7 	bl	800581c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800462e:	4b39      	ldr	r3, [pc, #228]	; (8004714 <xTaskResumeAll+0x114>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3b01      	subs	r3, #1
 8004634:	4a37      	ldr	r2, [pc, #220]	; (8004714 <xTaskResumeAll+0x114>)
 8004636:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004638:	4b36      	ldr	r3, [pc, #216]	; (8004714 <xTaskResumeAll+0x114>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d162      	bne.n	8004706 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <xTaskResumeAll+0x118>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05e      	beq.n	8004706 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004648:	e02f      	b.n	80046aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464a:	4b34      	ldr	r3, [pc, #208]	; (800471c <xTaskResumeAll+0x11c>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3318      	adds	r3, #24
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f890 	bl	800377c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff f88b 	bl	800377c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <xTaskResumeAll+0x120>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d903      	bls.n	800467a <xTaskResumeAll+0x7a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <xTaskResumeAll+0x120>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a27      	ldr	r2, [pc, #156]	; (8004724 <xTaskResumeAll+0x124>)
 8004688:	441a      	add	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7ff f816 	bl	80036c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <xTaskResumeAll+0x128>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <xTaskResumeAll+0x12c>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <xTaskResumeAll+0x11c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1cb      	bne.n	800464a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046b8:	f000 fb46 	bl	8004d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046bc:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <xTaskResumeAll+0x130>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d010      	beq.n	80046ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046c8:	f000 f846 	bl	8004758 <xTaskIncrementTick>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <xTaskResumeAll+0x12c>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3b01      	subs	r3, #1
 80046dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f1      	bne.n	80046c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <xTaskResumeAll+0x130>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <xTaskResumeAll+0x12c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <xTaskResumeAll+0x134>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004706:	f001 f8b7 	bl	8005878 <vPortExitCritical>

	return xAlreadyYielded;
 800470a:	68bb      	ldr	r3, [r7, #8]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000c4c 	.word	0x20000c4c
 8004718:	20000c24 	.word	0x20000c24
 800471c:	20000be4 	.word	0x20000be4
 8004720:	20000c2c 	.word	0x20000c2c
 8004724:	20000754 	.word	0x20000754
 8004728:	20000750 	.word	0x20000750
 800472c:	20000c38 	.word	0x20000c38
 8004730:	20000c34 	.word	0x20000c34
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <xTaskGetTickCount+0x1c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004744:	687b      	ldr	r3, [r7, #4]
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000c28 	.word	0x20000c28

08004758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004762:	4b4e      	ldr	r3, [pc, #312]	; (800489c <xTaskIncrementTick+0x144>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 8088 	bne.w	800487c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800476c:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <xTaskIncrementTick+0x148>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004774:	4a4a      	ldr	r2, [pc, #296]	; (80048a0 <xTaskIncrementTick+0x148>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11f      	bne.n	80047c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004780:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <xTaskIncrementTick+0x14c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <xTaskIncrementTick+0x46>
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	e7fe      	b.n	800479c <xTaskIncrementTick+0x44>
 800479e:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	4b40      	ldr	r3, [pc, #256]	; (80048a8 <xTaskIncrementTick+0x150>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3e      	ldr	r2, [pc, #248]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4a3e      	ldr	r2, [pc, #248]	; (80048a8 <xTaskIncrementTick+0x150>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <xTaskIncrementTick+0x154>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3301      	adds	r3, #1
 80047b8:	4a3c      	ldr	r2, [pc, #240]	; (80048ac <xTaskIncrementTick+0x154>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	f000 fac4 	bl	8004d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d349      	bcc.n	800485e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ca:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	601a      	str	r2, [r3, #0]
					break;
 80047dc:	e03f      	b.n	800485e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <xTaskIncrementTick+0x14c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d203      	bcs.n	80047fe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047f6:	4a2e      	ldr	r2, [pc, #184]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047fc:	e02f      	b.n	800485e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe ffba 	bl	800377c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3318      	adds	r3, #24
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe ffb1 	bl	800377c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <xTaskIncrementTick+0x15c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d903      	bls.n	800482e <xTaskIncrementTick+0xd6>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <xTaskIncrementTick+0x15c>)
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <xTaskIncrementTick+0x160>)
 800483c:	441a      	add	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fe ff3c 	bl	80036c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <xTaskIncrementTick+0x164>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	429a      	cmp	r2, r3
 8004856:	d3b8      	bcc.n	80047ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485c:	e7b5      	b.n	80047ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800485e:	4b17      	ldr	r3, [pc, #92]	; (80048bc <xTaskIncrementTick+0x164>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4914      	ldr	r1, [pc, #80]	; (80048b8 <xTaskIncrementTick+0x160>)
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d907      	bls.n	8004886 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e004      	b.n	8004886 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <xTaskIncrementTick+0x168>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <xTaskIncrementTick+0x168>)
 8004884:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <xTaskIncrementTick+0x16c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800488e:	2301      	movs	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000c4c 	.word	0x20000c4c
 80048a0:	20000c28 	.word	0x20000c28
 80048a4:	20000bdc 	.word	0x20000bdc
 80048a8:	20000be0 	.word	0x20000be0
 80048ac:	20000c3c 	.word	0x20000c3c
 80048b0:	20000c44 	.word	0x20000c44
 80048b4:	20000c2c 	.word	0x20000c2c
 80048b8:	20000754 	.word	0x20000754
 80048bc:	20000750 	.word	0x20000750
 80048c0:	20000c34 	.word	0x20000c34
 80048c4:	20000c38 	.word	0x20000c38

080048c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048ce:	4b27      	ldr	r3, [pc, #156]	; (800496c <vTaskSwitchContext+0xa4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048d6:	4b26      	ldr	r3, [pc, #152]	; (8004970 <vTaskSwitchContext+0xa8>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048dc:	e040      	b.n	8004960 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <vTaskSwitchContext+0xa8>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <vTaskSwitchContext+0xac>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e00f      	b.n	800490c <vTaskSwitchContext+0x44>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <vTaskSwitchContext+0x3e>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	e7fe      	b.n	8004904 <vTaskSwitchContext+0x3c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b01      	subs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	491a      	ldr	r1, [pc, #104]	; (8004978 <vTaskSwitchContext+0xb0>)
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0e5      	beq.n	80048ec <vTaskSwitchContext+0x24>
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4a13      	ldr	r2, [pc, #76]	; (8004978 <vTaskSwitchContext+0xb0>)
 800492c:	4413      	add	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3308      	adds	r3, #8
 8004942:	429a      	cmp	r2, r3
 8004944:	d104      	bne.n	8004950 <vTaskSwitchContext+0x88>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4a09      	ldr	r2, [pc, #36]	; (800497c <vTaskSwitchContext+0xb4>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4a06      	ldr	r2, [pc, #24]	; (8004974 <vTaskSwitchContext+0xac>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6013      	str	r3, [r2, #0]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000c4c 	.word	0x20000c4c
 8004970:	20000c38 	.word	0x20000c38
 8004974:	20000c2c 	.word	0x20000c2c
 8004978:	20000754 	.word	0x20000754
 800497c:	20000750 	.word	0x20000750

08004980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <vTaskPlaceOnEventList+0x24>
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e7fe      	b.n	80049a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <vTaskPlaceOnEventList+0x44>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3318      	adds	r3, #24
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fe feac 	bl	800370a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049b2:	2101      	movs	r1, #1
 80049b4:	6838      	ldr	r0, [r7, #0]
 80049b6:	f000 fa71 	bl	8004e9c <prvAddCurrentTaskToDelayedList>
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000750 	.word	0x20000750

080049c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <vTaskPlaceOnEventListRestricted+0x26>
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e7fe      	b.n	80049ec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <vTaskPlaceOnEventListRestricted+0x50>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3318      	adds	r3, #24
 80049f4:	4619      	mov	r1, r3
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7fe fe63 	bl	80036c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f000 fa46 	bl	8004e9c <prvAddCurrentTaskToDelayedList>
	}
 8004a10:	bf00      	nop
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000750 	.word	0x20000750

08004a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <xTaskRemoveFromEventList+0x2a>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e7fe      	b.n	8004a44 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3318      	adds	r3, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fe96 	bl	800377c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <xTaskRemoveFromEventList+0xac>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fe8d 	bl	800377c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	4b19      	ldr	r3, [pc, #100]	; (8004acc <xTaskRemoveFromEventList+0xb0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d903      	bls.n	8004a76 <xTaskRemoveFromEventList+0x5a>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <xTaskRemoveFromEventList+0xb0>)
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <xTaskRemoveFromEventList+0xb4>)
 8004a84:	441a      	add	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7fe fe18 	bl	80036c2 <vListInsertEnd>
 8004a92:	e005      	b.n	8004aa0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3318      	adds	r3, #24
 8004a98:	4619      	mov	r1, r3
 8004a9a:	480e      	ldr	r0, [pc, #56]	; (8004ad4 <xTaskRemoveFromEventList+0xb8>)
 8004a9c:	f7fe fe11 	bl	80036c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <xTaskRemoveFromEventList+0xbc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d905      	bls.n	8004aba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <xTaskRemoveFromEventList+0xc0>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e001      	b.n	8004abe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004abe:	697b      	ldr	r3, [r7, #20]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000c4c 	.word	0x20000c4c
 8004acc:	20000c2c 	.word	0x20000c2c
 8004ad0:	20000754 	.word	0x20000754
 8004ad4:	20000be4 	.word	0x20000be4
 8004ad8:	20000750 	.word	0x20000750
 8004adc:	20000c38 	.word	0x20000c38

08004ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <vTaskInternalSetTimeOutState+0x24>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <vTaskInternalSetTimeOutState+0x28>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	20000c3c 	.word	0x20000c3c
 8004b08:	20000c28 	.word	0x20000c28

08004b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <xTaskCheckForTimeOut+0x24>
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e7fe      	b.n	8004b2e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <xTaskCheckForTimeOut+0x3e>
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e7fe      	b.n	8004b48 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b4a:	f000 fe67 	bl	800581c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <xTaskCheckForTimeOut+0xb8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d102      	bne.n	8004b6e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	e023      	b.n	8004bb6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <xTaskCheckForTimeOut+0xbc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d007      	beq.n	8004b8a <xTaskCheckForTimeOut+0x7e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e015      	b.n	8004bb6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d20b      	bcs.n	8004bac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff9d 	bl	8004ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	e004      	b.n	8004bb6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bb6:	f000 fe5f 	bl	8005878 <vPortExitCritical>

	return xReturn;
 8004bba:	69fb      	ldr	r3, [r7, #28]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000c28 	.word	0x20000c28
 8004bc8:	20000c3c 	.word	0x20000c3c

08004bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <vTaskMissedYield+0x14>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000c38 	.word	0x20000c38

08004be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bec:	f000 f852 	bl	8004c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <prvIdleTask+0x28>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d9f9      	bls.n	8004bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <prvIdleTask+0x2c>)
 8004bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c08:	e7f0      	b.n	8004bec <prvIdleTask+0x8>
 8004c0a:	bf00      	nop
 8004c0c:	20000754 	.word	0x20000754
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	e00c      	b.n	8004c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <prvInitialiseTaskLists+0x60>)
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fd1a 	bl	8003668 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3301      	adds	r3, #1
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b37      	cmp	r3, #55	; 0x37
 8004c3e:	d9ef      	bls.n	8004c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c40:	480d      	ldr	r0, [pc, #52]	; (8004c78 <prvInitialiseTaskLists+0x64>)
 8004c42:	f7fe fd11 	bl	8003668 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c46:	480d      	ldr	r0, [pc, #52]	; (8004c7c <prvInitialiseTaskLists+0x68>)
 8004c48:	f7fe fd0e 	bl	8003668 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c4c:	480c      	ldr	r0, [pc, #48]	; (8004c80 <prvInitialiseTaskLists+0x6c>)
 8004c4e:	f7fe fd0b 	bl	8003668 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c52:	480c      	ldr	r0, [pc, #48]	; (8004c84 <prvInitialiseTaskLists+0x70>)
 8004c54:	f7fe fd08 	bl	8003668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c58:	480b      	ldr	r0, [pc, #44]	; (8004c88 <prvInitialiseTaskLists+0x74>)
 8004c5a:	f7fe fd05 	bl	8003668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <prvInitialiseTaskLists+0x78>)
 8004c60:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <prvInitialiseTaskLists+0x64>)
 8004c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <prvInitialiseTaskLists+0x7c>)
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <prvInitialiseTaskLists+0x68>)
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000754 	.word	0x20000754
 8004c78:	20000bb4 	.word	0x20000bb4
 8004c7c:	20000bc8 	.word	0x20000bc8
 8004c80:	20000be4 	.word	0x20000be4
 8004c84:	20000bf8 	.word	0x20000bf8
 8004c88:	20000c10 	.word	0x20000c10
 8004c8c:	20000bdc 	.word	0x20000bdc
 8004c90:	20000be0 	.word	0x20000be0

08004c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c9a:	e019      	b.n	8004cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c9c:	f000 fdbe 	bl	800581c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <prvCheckTasksWaitingTermination+0x4c>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe fd65 	bl	800377c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <prvCheckTasksWaitingTermination+0x50>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <prvCheckTasksWaitingTermination+0x50>)
 8004cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cc6:	f000 fdd7 	bl	8005878 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f80e 	bl	8004cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e1      	bne.n	8004c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000bf8 	.word	0x20000bf8
 8004ce4:	20000c24 	.word	0x20000c24
 8004ce8:	20000c0c 	.word	0x20000c0c

08004cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 ff66 	bl	8005bd4 <vPortFree>
				vPortFree( pxTCB );
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 ff63 	bl	8005bd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d0e:	e017      	b.n	8004d40 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d103      	bne.n	8004d22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 ff5a 	bl	8005bd4 <vPortFree>
	}
 8004d20:	e00e      	b.n	8004d40 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d009      	beq.n	8004d40 <prvDeleteTCB+0x54>
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	e7fe      	b.n	8004d3e <prvDeleteTCB+0x52>
	}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <prvResetNextTaskUnblockTime+0x38>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <prvResetNextTaskUnblockTime+0x3c>)
 8004d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d60:	e008      	b.n	8004d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <prvResetNextTaskUnblockTime+0x38>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4a04      	ldr	r2, [pc, #16]	; (8004d84 <prvResetNextTaskUnblockTime+0x3c>)
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000bdc 	.word	0x20000bdc
 8004d84:	20000c44 	.word	0x20000c44

08004d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <xTaskGetSchedulerState+0x34>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d96:	2301      	movs	r3, #1
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	e008      	b.n	8004dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9c:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <xTaskGetSchedulerState+0x38>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004da4:	2302      	movs	r3, #2
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	e001      	b.n	8004dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004daa:	2300      	movs	r3, #0
 8004dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dae:	687b      	ldr	r3, [r7, #4]
	}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20000c30 	.word	0x20000c30
 8004dc0:	20000c4c 	.word	0x20000c4c

08004dc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d054      	beq.n	8004e84 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004dda:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <xTaskPriorityDisinherit+0xcc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d009      	beq.n	8004df8 <xTaskPriorityDisinherit+0x34>
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e7fe      	b.n	8004df6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <xTaskPriorityDisinherit+0x50>
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	e7fe      	b.n	8004e12 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	1e5a      	subs	r2, r3, #1
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d02c      	beq.n	8004e84 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d128      	bne.n	8004e84 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe fca0 	bl	800377c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <xTaskPriorityDisinherit+0xd0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d903      	bls.n	8004e64 <xTaskPriorityDisinherit+0xa0>
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	4a0c      	ldr	r2, [pc, #48]	; (8004e94 <xTaskPriorityDisinherit+0xd0>)
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <xTaskPriorityDisinherit+0xd4>)
 8004e72:	441a      	add	r2, r3
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	f7fe fc21 	bl	80036c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e84:	697b      	ldr	r3, [r7, #20]
	}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000750 	.word	0x20000750
 8004e94:	20000c2c 	.word	0x20000c2c
 8004e98:	20000754 	.word	0x20000754

08004e9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ea6:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fc62 	bl	800377c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d10a      	bne.n	8004ed6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4819      	ldr	r0, [pc, #100]	; (8004f34 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ed0:	f7fe fbf7 	bl	80036c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ed4:	e026      	b.n	8004f24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4413      	add	r3, r2
 8004edc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ede:	4b14      	ldr	r3, [pc, #80]	; (8004f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d209      	bcs.n	8004f02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f7fe fc05 	bl	800370a <vListInsert>
}
 8004f00:	e010      	b.n	8004f24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fe fbfb 	bl	800370a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d202      	bcs.n	8004f24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f1e:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6013      	str	r3, [r2, #0]
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000c28 	.word	0x20000c28
 8004f30:	20000750 	.word	0x20000750
 8004f34:	20000c10 	.word	0x20000c10
 8004f38:	20000be0 	.word	0x20000be0
 8004f3c:	20000bdc 	.word	0x20000bdc
 8004f40:	20000c44 	.word	0x20000c44

08004f44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f4e:	f000 faff 	bl	8005550 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f52:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <xTimerCreateTimerTask+0x80>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d021      	beq.n	8004f9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f62:	1d3a      	adds	r2, r7, #4
 8004f64:	f107 0108 	add.w	r1, r7, #8
 8004f68:	f107 030c 	add.w	r3, r7, #12
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fe fb61 	bl	8003634 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	9202      	str	r2, [sp, #8]
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	460a      	mov	r2, r1
 8004f84:	4910      	ldr	r1, [pc, #64]	; (8004fc8 <xTimerCreateTimerTask+0x84>)
 8004f86:	4811      	ldr	r0, [pc, #68]	; (8004fcc <xTimerCreateTimerTask+0x88>)
 8004f88:	f7ff f8f6 	bl	8004178 <xTaskCreateStatic>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <xTimerCreateTimerTask+0x8c>)
 8004f90:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f92:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <xTimerCreateTimerTask+0x8c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <xTimerCreateTimerTask+0x74>
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	e7fe      	b.n	8004fb6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004fb8:	697b      	ldr	r3, [r7, #20]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000c80 	.word	0x20000c80
 8004fc8:	080066d4 	.word	0x080066d4
 8004fcc:	08005105 	.word	0x08005105
 8004fd0:	20000c84 	.word	0x20000c84

08004fd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <xTimerGenericCommand+0x2c>
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	e7fe      	b.n	8004ffe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005000:	4b19      	ldr	r3, [pc, #100]	; (8005068 <xTimerGenericCommand+0x94>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02a      	beq.n	800505e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b05      	cmp	r3, #5
 8005018:	dc18      	bgt.n	800504c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800501a:	f7ff feb5 	bl	8004d88 <xTaskGetSchedulerState>
 800501e:	4603      	mov	r3, r0
 8005020:	2b02      	cmp	r3, #2
 8005022:	d109      	bne.n	8005038 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <xTimerGenericCommand+0x94>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	f107 0110 	add.w	r1, r7, #16
 800502c:	2300      	movs	r3, #0
 800502e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005030:	f7fe fccc 	bl	80039cc <xQueueGenericSend>
 8005034:	6278      	str	r0, [r7, #36]	; 0x24
 8005036:	e012      	b.n	800505e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <xTimerGenericCommand+0x94>)
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	f107 0110 	add.w	r1, r7, #16
 8005040:	2300      	movs	r3, #0
 8005042:	2200      	movs	r2, #0
 8005044:	f7fe fcc2 	bl	80039cc <xQueueGenericSend>
 8005048:	6278      	str	r0, [r7, #36]	; 0x24
 800504a:	e008      	b.n	800505e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <xTimerGenericCommand+0x94>)
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	f107 0110 	add.w	r1, r7, #16
 8005054:	2300      	movs	r3, #0
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	f7fe fdb2 	bl	8003bc0 <xQueueGenericSendFromISR>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005060:	4618      	mov	r0, r3
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000c80 	.word	0x20000c80

0800506c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <prvProcessExpiredTimer+0x94>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	3304      	adds	r3, #4
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe fb79 	bl	800377c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d021      	beq.n	80050dc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	18d1      	adds	r1, r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	6978      	ldr	r0, [r7, #20]
 80050a6:	f000 f8d1 	bl	800524c <prvInsertTimerInActiveList>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01e      	beq.n	80050ee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	2100      	movs	r1, #0
 80050ba:	6978      	ldr	r0, [r7, #20]
 80050bc:	f7ff ff8a 	bl	8004fd4 <xTimerGenericCommand>
 80050c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d112      	bne.n	80050ee <prvProcessExpiredTimer+0x82>
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e7fe      	b.n	80050da <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	4798      	blx	r3
}
 80050f6:	bf00      	nop
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000c78 	.word	0x20000c78

08005104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	4618      	mov	r0, r3
 8005112:	f000 f857 	bl	80051c4 <prvGetNextExpireTime>
 8005116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4619      	mov	r1, r3
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f803 	bl	8005128 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005122:	f000 f8d5 	bl	80052d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005126:	e7f1      	b.n	800510c <prvTimerTask+0x8>

08005128 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005132:	f7ff fa57 	bl	80045e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005136:	f107 0308 	add.w	r3, r7, #8
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f866 	bl	800520c <prvSampleTimeNow>
 8005140:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d130      	bne.n	80051aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <prvProcessTimerOrBlockTask+0x3c>
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	429a      	cmp	r2, r3
 8005154:	d806      	bhi.n	8005164 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005156:	f7ff fa53 	bl	8004600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff85 	bl	800506c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005162:	e024      	b.n	80051ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800516a:	4b13      	ldr	r3, [pc, #76]	; (80051b8 <prvProcessTimerOrBlockTask+0x90>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <prvProcessTimerOrBlockTask+0x50>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <prvProcessTimerOrBlockTask+0x52>
 8005178:	2300      	movs	r3, #0
 800517a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800517c:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <prvProcessTimerOrBlockTask+0x94>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	4619      	mov	r1, r3
 800518a:	f7fe ffc1 	bl	8004110 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800518e:	f7ff fa37 	bl	8004600 <xTaskResumeAll>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005198:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <prvProcessTimerOrBlockTask+0x98>)
 800519a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	f3bf 8f6f 	isb	sy
}
 80051a8:	e001      	b.n	80051ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051aa:	f7ff fa29 	bl	8004600 <xTaskResumeAll>
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000c7c 	.word	0x20000c7c
 80051bc:	20000c80 	.word	0x20000c80
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <prvGetNextExpireTime+0x44>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <prvGetNextExpireTime+0x16>
 80051d6:	2201      	movs	r2, #1
 80051d8:	e000      	b.n	80051dc <prvGetNextExpireTime+0x18>
 80051da:	2200      	movs	r2, #0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051e8:	4b07      	ldr	r3, [pc, #28]	; (8005208 <prvGetNextExpireTime+0x44>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e001      	b.n	80051f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000c78 	.word	0x20000c78

0800520c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005214:	f7ff fa90 	bl	8004738 <xTaskGetTickCount>
 8005218:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <prvSampleTimeNow+0x3c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	429a      	cmp	r2, r3
 8005222:	d205      	bcs.n	8005230 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005224:	f000 f930 	bl	8005488 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e002      	b.n	8005236 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <prvSampleTimeNow+0x3c>)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800523c:	68fb      	ldr	r3, [r7, #12]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000c88 	.word	0x20000c88

0800524c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d812      	bhi.n	8005298 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e01b      	b.n	80052be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005286:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <prvInsertTimerInActiveList+0x7c>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7fe fa3a 	bl	800370a <vListInsert>
 8005296:	e012      	b.n	80052be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d206      	bcs.n	80052ae <prvInsertTimerInActiveList+0x62>
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d302      	bcc.n	80052ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e007      	b.n	80052be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <prvInsertTimerInActiveList+0x80>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fe fa26 	bl	800370a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052be:	697b      	ldr	r3, [r7, #20]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000c7c 	.word	0x20000c7c
 80052cc:	20000c78 	.word	0x20000c78

080052d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08e      	sub	sp, #56	; 0x38
 80052d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052d6:	e0c6      	b.n	8005466 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	da17      	bge.n	800530e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	3304      	adds	r3, #4
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <prvProcessReceivedCommands+0x2e>
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e7fe      	b.n	80052fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005304:	6850      	ldr	r0, [r2, #4]
 8005306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005308:	6892      	ldr	r2, [r2, #8]
 800530a:	4611      	mov	r1, r2
 800530c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f2c0 80a7 	blt.w	8005464 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	3304      	adds	r3, #4
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fa28 	bl	800377c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800532c:	463b      	mov	r3, r7
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff6c 	bl	800520c <prvSampleTimeNow>
 8005334:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b09      	cmp	r3, #9
 800533a:	f200 8094 	bhi.w	8005466 <prvProcessReceivedCommands+0x196>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <prvProcessReceivedCommands+0x74>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	0800536d 	.word	0x0800536d
 8005348:	0800536d 	.word	0x0800536d
 800534c:	0800536d 	.word	0x0800536d
 8005350:	080053df 	.word	0x080053df
 8005354:	080053f3 	.word	0x080053f3
 8005358:	0800543b 	.word	0x0800543b
 800535c:	0800536d 	.word	0x0800536d
 8005360:	0800536d 	.word	0x0800536d
 8005364:	080053df 	.word	0x080053df
 8005368:	080053f3 	.word	0x080053f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	18d1      	adds	r1, r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538c:	f7ff ff5e 	bl	800524c <prvInsertTimerInActiveList>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d067      	beq.n	8005466 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800539c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05c      	beq.n	8005466 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	441a      	add	r2, r3
 80053b4:	2300      	movs	r3, #0
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	2300      	movs	r3, #0
 80053ba:	2100      	movs	r1, #0
 80053bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053be:	f7ff fe09 	bl	8004fd4 <xTimerGenericCommand>
 80053c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d14d      	bne.n	8005466 <prvProcessReceivedCommands+0x196>
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	e7fe      	b.n	80053dc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80053f0:	e039      	b.n	8005466 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <prvProcessReceivedCommands+0x156>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e7fe      	b.n	8005424 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	18d1      	adds	r1, r2, r3
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005434:	f7ff ff0a 	bl	800524c <prvInsertTimerInActiveList>
					break;
 8005438:	e015      	b.n	8005466 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d103      	bne.n	8005450 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800544a:	f000 fbc3 	bl	8005bd4 <vPortFree>
 800544e:	e00a      	b.n	8005466 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	b2da      	uxtb	r2, r3
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005462:	e000      	b.n	8005466 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005464:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005466:	4b07      	ldr	r3, [pc, #28]	; (8005484 <prvProcessReceivedCommands+0x1b4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1d39      	adds	r1, r7, #4
 800546c:	2200      	movs	r2, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fc3a 	bl	8003ce8 <xQueueReceive>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	f47f af2e 	bne.w	80052d8 <prvProcessReceivedCommands+0x8>
	}
}
 800547c:	bf00      	nop
 800547e:	3730      	adds	r7, #48	; 0x30
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000c80 	.word	0x20000c80

08005488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800548e:	e047      	b.n	8005520 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005490:	4b2d      	ldr	r3, [pc, #180]	; (8005548 <prvSwitchTimerLists+0xc0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549a:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <prvSwitchTimerLists+0xc0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe f967 	bl	800377c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02d      	beq.n	8005520 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4413      	add	r3, r2
 80054cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d90e      	bls.n	80054f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054e2:	4b19      	ldr	r3, [pc, #100]	; (8005548 <prvSwitchTimerLists+0xc0>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7fe f90c 	bl	800370a <vListInsert>
 80054f2:	e015      	b.n	8005520 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	2100      	movs	r1, #0
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fd68 	bl	8004fd4 <xTimerGenericCommand>
 8005504:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <prvSwitchTimerLists+0x98>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	e7fe      	b.n	800551e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <prvSwitchTimerLists+0xc0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1b2      	bne.n	8005490 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <prvSwitchTimerLists+0xc0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005530:	4b06      	ldr	r3, [pc, #24]	; (800554c <prvSwitchTimerLists+0xc4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a04      	ldr	r2, [pc, #16]	; (8005548 <prvSwitchTimerLists+0xc0>)
 8005536:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <prvSwitchTimerLists+0xc4>)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6013      	str	r3, [r2, #0]
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000c78 	.word	0x20000c78
 800554c:	20000c7c 	.word	0x20000c7c

08005550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005556:	f000 f961 	bl	800581c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800555a:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d120      	bne.n	80055a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005562:	4814      	ldr	r0, [pc, #80]	; (80055b4 <prvCheckForValidListAndQueue+0x64>)
 8005564:	f7fe f880 	bl	8003668 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005568:	4813      	ldr	r0, [pc, #76]	; (80055b8 <prvCheckForValidListAndQueue+0x68>)
 800556a:	f7fe f87d 	bl	8003668 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <prvCheckForValidListAndQueue+0x6c>)
 8005570:	4a10      	ldr	r2, [pc, #64]	; (80055b4 <prvCheckForValidListAndQueue+0x64>)
 8005572:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <prvCheckForValidListAndQueue+0x70>)
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <prvCheckForValidListAndQueue+0x68>)
 8005578:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800557a:	2300      	movs	r3, #0
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <prvCheckForValidListAndQueue+0x74>)
 8005580:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <prvCheckForValidListAndQueue+0x78>)
 8005582:	2110      	movs	r1, #16
 8005584:	200a      	movs	r0, #10
 8005586:	f7fe f98b 	bl	80038a0 <xQueueGenericCreateStatic>
 800558a:	4602      	mov	r2, r0
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800558e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <prvCheckForValidListAndQueue+0x60>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <prvCheckForValidListAndQueue+0x60>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	490b      	ldr	r1, [pc, #44]	; (80055cc <prvCheckForValidListAndQueue+0x7c>)
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fd8e 	bl	80040c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055a4:	f000 f968 	bl	8005878 <vPortExitCritical>
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000c80 	.word	0x20000c80
 80055b4:	20000c50 	.word	0x20000c50
 80055b8:	20000c64 	.word	0x20000c64
 80055bc:	20000c78 	.word	0x20000c78
 80055c0:	20000c7c 	.word	0x20000c7c
 80055c4:	20000d2c 	.word	0x20000d2c
 80055c8:	20000c8c 	.word	0x20000c8c
 80055cc:	080066dc 	.word	0x080066dc

080055d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b04      	subs	r3, #4
 80055e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 0201 	bic.w	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3b04      	subs	r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005600:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <pxPortInitialiseStack+0x64>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3b14      	subs	r3, #20
 800560a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3b04      	subs	r3, #4
 8005616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f06f 0202 	mvn.w	r2, #2
 800561e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b20      	subs	r3, #32
 8005624:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	08005639 	.word	0x08005639

08005638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <prvTaskExitError+0x50>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d009      	beq.n	8005660 <prvTaskExitError+0x28>
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e7fe      	b.n	800565e <prvTaskExitError+0x26>
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005672:	bf00      	nop
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0fc      	beq.n	8005674 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	2000000c 	.word	0x2000000c
 800568c:	00000000 	.word	0x00000000

08005690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <pxCurrentTCBConst2>)
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	f380 8809 	msr	PSP, r0
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	4770      	bx	lr
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst2>:
 80056b0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056b8:	4808      	ldr	r0, [pc, #32]	; (80056dc <prvPortStartFirstTask+0x24>)
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f380 8808 	msr	MSP, r0
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f380 8814 	msr	CONTROL, r0
 80056ca:	b662      	cpsie	i
 80056cc:	b661      	cpsie	f
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	df00      	svc	0
 80056d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056da:	bf00      	nop
 80056dc:	e000ed08 	.word	0xe000ed08

080056e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056e6:	4b44      	ldr	r3, [pc, #272]	; (80057f8 <xPortStartScheduler+0x118>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a44      	ldr	r2, [pc, #272]	; (80057fc <xPortStartScheduler+0x11c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d109      	bne.n	8005704 <xPortStartScheduler+0x24>
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	e7fe      	b.n	8005702 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005704:	4b3c      	ldr	r3, [pc, #240]	; (80057f8 <xPortStartScheduler+0x118>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <xPortStartScheduler+0x120>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d109      	bne.n	8005722 <xPortStartScheduler+0x42>
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e7fe      	b.n	8005720 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005722:	4b38      	ldr	r3, [pc, #224]	; (8005804 <xPortStartScheduler+0x124>)
 8005724:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005744:	b2da      	uxtb	r2, r3
 8005746:	4b30      	ldr	r3, [pc, #192]	; (8005808 <xPortStartScheduler+0x128>)
 8005748:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800574a:	4b30      	ldr	r3, [pc, #192]	; (800580c <xPortStartScheduler+0x12c>)
 800574c:	2207      	movs	r2, #7
 800574e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005750:	e009      	b.n	8005766 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005752:	4b2e      	ldr	r3, [pc, #184]	; (800580c <xPortStartScheduler+0x12c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3b01      	subs	r3, #1
 8005758:	4a2c      	ldr	r2, [pc, #176]	; (800580c <xPortStartScheduler+0x12c>)
 800575a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d0ef      	beq.n	8005752 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005772:	4b26      	ldr	r3, [pc, #152]	; (800580c <xPortStartScheduler+0x12c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1c3 0307 	rsb	r3, r3, #7
 800577a:	2b04      	cmp	r3, #4
 800577c:	d009      	beq.n	8005792 <xPortStartScheduler+0xb2>
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	e7fe      	b.n	8005790 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005792:	4b1e      	ldr	r3, [pc, #120]	; (800580c <xPortStartScheduler+0x12c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	4a1c      	ldr	r2, [pc, #112]	; (800580c <xPortStartScheduler+0x12c>)
 800579a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <xPortStartScheduler+0x12c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057a4:	4a19      	ldr	r2, [pc, #100]	; (800580c <xPortStartScheduler+0x12c>)
 80057a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057b0:	4b17      	ldr	r3, [pc, #92]	; (8005810 <xPortStartScheduler+0x130>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a16      	ldr	r2, [pc, #88]	; (8005810 <xPortStartScheduler+0x130>)
 80057b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <xPortStartScheduler+0x130>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a13      	ldr	r2, [pc, #76]	; (8005810 <xPortStartScheduler+0x130>)
 80057c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057c8:	f000 f8d6 	bl	8005978 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057cc:	4b11      	ldr	r3, [pc, #68]	; (8005814 <xPortStartScheduler+0x134>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057d2:	f000 f8f5 	bl	80059c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057d6:	4b10      	ldr	r3, [pc, #64]	; (8005818 <xPortStartScheduler+0x138>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a0f      	ldr	r2, [pc, #60]	; (8005818 <xPortStartScheduler+0x138>)
 80057dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057e2:	f7ff ff69 	bl	80056b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057e6:	f7ff f86f 	bl	80048c8 <vTaskSwitchContext>
	prvTaskExitError();
 80057ea:	f7ff ff25 	bl	8005638 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	e000ed00 	.word	0xe000ed00
 80057fc:	410fc271 	.word	0x410fc271
 8005800:	410fc270 	.word	0x410fc270
 8005804:	e000e400 	.word	0xe000e400
 8005808:	20000d7c 	.word	0x20000d7c
 800580c:	20000d80 	.word	0x20000d80
 8005810:	e000ed20 	.word	0xe000ed20
 8005814:	2000000c 	.word	0x2000000c
 8005818:	e000ef34 	.word	0xe000ef34

0800581c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005834:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <vPortEnterCritical+0x54>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3301      	adds	r3, #1
 800583a:	4a0d      	ldr	r2, [pc, #52]	; (8005870 <vPortEnterCritical+0x54>)
 800583c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800583e:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <vPortEnterCritical+0x54>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d10e      	bne.n	8005864 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <vPortEnterCritical+0x58>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <vPortEnterCritical+0x48>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	e7fe      	b.n	8005862 <vPortEnterCritical+0x46>
	}
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	2000000c 	.word	0x2000000c
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <vPortExitCritical+0x4c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <vPortExitCritical+0x22>
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	e7fe      	b.n	8005898 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <vPortExitCritical+0x4c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3b01      	subs	r3, #1
 80058a0:	4a08      	ldr	r2, [pc, #32]	; (80058c4 <vPortExitCritical+0x4c>)
 80058a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <vPortExitCritical+0x4c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <vPortExitCritical+0x3e>
 80058ac:	2300      	movs	r3, #0
 80058ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	2000000c 	.word	0x2000000c
	...

080058d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058d0:	f3ef 8009 	mrs	r0, PSP
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <pxCurrentTCBConst>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f01e 0f10 	tst.w	lr, #16
 80058e0:	bf08      	it	eq
 80058e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	6010      	str	r0, [r2, #0]
 80058ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058f4:	f380 8811 	msr	BASEPRI, r0
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f7fe ffe2 	bl	80048c8 <vTaskSwitchContext>
 8005904:	f04f 0000 	mov.w	r0, #0
 8005908:	f380 8811 	msr	BASEPRI, r0
 800590c:	bc09      	pop	{r0, r3}
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	6808      	ldr	r0, [r1, #0]
 8005912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005916:	f01e 0f10 	tst.w	lr, #16
 800591a:	bf08      	it	eq
 800591c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005920:	f380 8809 	msr	PSP, r0
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst>:
 8005930:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005950:	f7fe ff02 	bl	8004758 <xTaskIncrementTick>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <SysTick_Handler+0x3c>)
 800595c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	2300      	movs	r3, #0
 8005964:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <vPortSetupTimerInterrupt+0x34>)
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005982:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vPortSetupTimerInterrupt+0x38>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <vPortSetupTimerInterrupt+0x3c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <vPortSetupTimerInterrupt+0x40>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	099b      	lsrs	r3, r3, #6
 8005994:	4a09      	ldr	r2, [pc, #36]	; (80059bc <vPortSetupTimerInterrupt+0x44>)
 8005996:	3b01      	subs	r3, #1
 8005998:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800599a:	4b04      	ldr	r3, [pc, #16]	; (80059ac <vPortSetupTimerInterrupt+0x34>)
 800599c:	2207      	movs	r2, #7
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	e000e010 	.word	0xe000e010
 80059b0:	e000e018 	.word	0xe000e018
 80059b4:	20000000 	.word	0x20000000
 80059b8:	10624dd3 	.word	0x10624dd3
 80059bc:	e000e014 	.word	0xe000e014

080059c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059d0 <vPortEnableVFP+0x10>
 80059c4:	6801      	ldr	r1, [r0, #0]
 80059c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059ca:	6001      	str	r1, [r0, #0]
 80059cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059ce:	bf00      	nop
 80059d0:	e000ed88 	.word	0xe000ed88

080059d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059da:	f3ef 8305 	mrs	r3, IPSR
 80059de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b0f      	cmp	r3, #15
 80059e4:	d913      	bls.n	8005a0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059e6:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <vPortValidateInterruptPriority+0x6c>)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059f0:	4b14      	ldr	r3, [pc, #80]	; (8005a44 <vPortValidateInterruptPriority+0x70>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	7afa      	ldrb	r2, [r7, #11]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d209      	bcs.n	8005a0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	607b      	str	r3, [r7, #4]
 8005a0c:	e7fe      	b.n	8005a0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a0e:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <vPortValidateInterruptPriority+0x74>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a16:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <vPortValidateInterruptPriority+0x78>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d909      	bls.n	8005a32 <vPortValidateInterruptPriority+0x5e>
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	e7fe      	b.n	8005a30 <vPortValidateInterruptPriority+0x5c>
	}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	e000e3f0 	.word	0xe000e3f0
 8005a44:	20000d7c 	.word	0x20000d7c
 8005a48:	e000ed0c 	.word	0xe000ed0c
 8005a4c:	20000d80 	.word	0x20000d80

08005a50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a5c:	f7fe fdc2 	bl	80045e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a60:	4b57      	ldr	r3, [pc, #348]	; (8005bc0 <pvPortMalloc+0x170>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a68:	f000 f90c 	bl	8005c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a6c:	4b55      	ldr	r3, [pc, #340]	; (8005bc4 <pvPortMalloc+0x174>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 808c 	bne.w	8005b92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01c      	beq.n	8005aba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a80:	2208      	movs	r2, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d013      	beq.n	8005aba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f023 0307 	bic.w	r3, r3, #7
 8005a98:	3308      	adds	r3, #8
 8005a9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <pvPortMalloc+0x6a>
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e7fe      	b.n	8005ab8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d068      	beq.n	8005b92 <pvPortMalloc+0x142>
 8005ac0:	4b41      	ldr	r3, [pc, #260]	; (8005bc8 <pvPortMalloc+0x178>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d863      	bhi.n	8005b92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aca:	4b40      	ldr	r3, [pc, #256]	; (8005bcc <pvPortMalloc+0x17c>)
 8005acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ace:	4b3f      	ldr	r3, [pc, #252]	; (8005bcc <pvPortMalloc+0x17c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ad4:	e004      	b.n	8005ae0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d903      	bls.n	8005af2 <pvPortMalloc+0xa2>
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f1      	bne.n	8005ad6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005af2:	4b33      	ldr	r3, [pc, #204]	; (8005bc0 <pvPortMalloc+0x170>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d04a      	beq.n	8005b92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2208      	movs	r2, #8
 8005b02:	4413      	add	r3, r2
 8005b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	1ad2      	subs	r2, r2, r3
 8005b16:	2308      	movs	r3, #8
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d91e      	bls.n	8005b5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <pvPortMalloc+0xf4>
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e7fe      	b.n	8005b42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	1ad2      	subs	r2, r2, r3
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b56:	69b8      	ldr	r0, [r7, #24]
 8005b58:	f000 f8f6 	bl	8005d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <pvPortMalloc+0x178>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <pvPortMalloc+0x178>)
 8005b68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <pvPortMalloc+0x178>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <pvPortMalloc+0x180>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d203      	bcs.n	8005b7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <pvPortMalloc+0x178>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <pvPortMalloc+0x180>)
 8005b7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <pvPortMalloc+0x174>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b92:	f7fe fd35 	bl	8004600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <pvPortMalloc+0x164>
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e7fe      	b.n	8005bb2 <pvPortMalloc+0x162>
	return pvReturn;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3728      	adds	r7, #40	; 0x28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	2000498c 	.word	0x2000498c
 8005bc4:	20004998 	.word	0x20004998
 8005bc8:	20004990 	.word	0x20004990
 8005bcc:	20004984 	.word	0x20004984
 8005bd0:	20004994 	.word	0x20004994

08005bd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d046      	beq.n	8005c74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005be6:	2308      	movs	r3, #8
 8005be8:	425b      	negs	r3, r3
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4413      	add	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <vPortFree+0xa8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d109      	bne.n	8005c16 <vPortFree+0x42>
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e7fe      	b.n	8005c14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <vPortFree+0x5e>
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	e7fe      	b.n	8005c30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <vPortFree+0xa8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d019      	beq.n	8005c74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d115      	bne.n	8005c74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <vPortFree+0xa8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	43db      	mvns	r3, r3
 8005c52:	401a      	ands	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c58:	f7fe fcc4 	bl	80045e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <vPortFree+0xac>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4413      	add	r3, r2
 8005c66:	4a06      	ldr	r2, [pc, #24]	; (8005c80 <vPortFree+0xac>)
 8005c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c6a:	6938      	ldr	r0, [r7, #16]
 8005c6c:	f000 f86c 	bl	8005d48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c70:	f7fe fcc6 	bl	8004600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c74:	bf00      	nop
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20004998 	.word	0x20004998
 8005c80:	20004990 	.word	0x20004990

08005c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c90:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <prvHeapInit+0xac>)
 8005c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3307      	adds	r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <prvHeapInit+0xac>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <prvHeapInit+0xb0>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <prvHeapInit+0xb0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4413      	add	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <prvHeapInit+0xb4>)
 8005ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <prvHeapInit+0xb4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <prvHeapInit+0xb4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <prvHeapInit+0xb4>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <prvHeapInit+0xb8>)
 8005d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <prvHeapInit+0xbc>)
 8005d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <prvHeapInit+0xc0>)
 8005d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000d84 	.word	0x20000d84
 8005d34:	20004984 	.word	0x20004984
 8005d38:	2000498c 	.word	0x2000498c
 8005d3c:	20004994 	.word	0x20004994
 8005d40:	20004990 	.word	0x20004990
 8005d44:	20004998 	.word	0x20004998

08005d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d50:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <prvInsertBlockIntoFreeList+0xac>)
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e002      	b.n	8005d5c <prvInsertBlockIntoFreeList+0x14>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d8f7      	bhi.n	8005d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4413      	add	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d108      	bne.n	8005d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	441a      	add	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d118      	bne.n	8005dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <prvInsertBlockIntoFreeList+0xb0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d00d      	beq.n	8005dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e008      	b.n	8005dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e003      	b.n	8005dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d002      	beq.n	8005de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20004984 	.word	0x20004984
 8005df8:	2000498c 	.word	0x2000498c

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	; (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000010 	.word	0x20000010

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4e0d      	ldr	r6, [pc, #52]	; (8005e40 <__libc_init_array+0x38>)
 8005e0c:	4c0d      	ldr	r4, [pc, #52]	; (8005e44 <__libc_init_array+0x3c>)
 8005e0e:	1ba4      	subs	r4, r4, r6
 8005e10:	10a4      	asrs	r4, r4, #2
 8005e12:	2500      	movs	r5, #0
 8005e14:	42a5      	cmp	r5, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	4e0b      	ldr	r6, [pc, #44]	; (8005e48 <__libc_init_array+0x40>)
 8005e1a:	4c0c      	ldr	r4, [pc, #48]	; (8005e4c <__libc_init_array+0x44>)
 8005e1c:	f000 fc28 	bl	8006670 <_init>
 8005e20:	1ba4      	subs	r4, r4, r6
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	2500      	movs	r5, #0
 8005e26:	42a5      	cmp	r5, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e30:	4798      	blx	r3
 8005e32:	3501      	adds	r5, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e3a:	4798      	blx	r3
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	080067a4 	.word	0x080067a4
 8005e44:	080067a4 	.word	0x080067a4
 8005e48:	080067a4 	.word	0x080067a4
 8005e4c:	080067a8 	.word	0x080067a8

08005e50 <memcpy>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	1e43      	subs	r3, r0, #1
 8005e54:	440a      	add	r2, r1
 8005e56:	4291      	cmp	r1, r2
 8005e58:	d100      	bne.n	8005e5c <memcpy+0xc>
 8005e5a:	bd10      	pop	{r4, pc}
 8005e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e64:	e7f7      	b.n	8005e56 <memcpy+0x6>

08005e66 <memset>:
 8005e66:	4402      	add	r2, r0
 8005e68:	4603      	mov	r3, r0
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d100      	bne.n	8005e70 <memset+0xa>
 8005e6e:	4770      	bx	lr
 8005e70:	f803 1b01 	strb.w	r1, [r3], #1
 8005e74:	e7f9      	b.n	8005e6a <memset+0x4>
	...

08005e78 <siprintf>:
 8005e78:	b40e      	push	{r1, r2, r3}
 8005e7a:	b500      	push	{lr}
 8005e7c:	b09c      	sub	sp, #112	; 0x70
 8005e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e80:	9002      	str	r0, [sp, #8]
 8005e82:	9006      	str	r0, [sp, #24]
 8005e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e88:	4809      	ldr	r0, [pc, #36]	; (8005eb0 <siprintf+0x38>)
 8005e8a:	9107      	str	r1, [sp, #28]
 8005e8c:	9104      	str	r1, [sp, #16]
 8005e8e:	4909      	ldr	r1, [pc, #36]	; (8005eb4 <siprintf+0x3c>)
 8005e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e94:	9105      	str	r1, [sp, #20]
 8005e96:	6800      	ldr	r0, [r0, #0]
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	a902      	add	r1, sp, #8
 8005e9c:	f000 f866 	bl	8005f6c <_svfiprintf_r>
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	b01c      	add	sp, #112	; 0x70
 8005ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eac:	b003      	add	sp, #12
 8005eae:	4770      	bx	lr
 8005eb0:	20000010 	.word	0x20000010
 8005eb4:	ffff0208 	.word	0xffff0208

08005eb8 <__ssputs_r>:
 8005eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	688e      	ldr	r6, [r1, #8]
 8005ebe:	429e      	cmp	r6, r3
 8005ec0:	4682      	mov	sl, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	4690      	mov	r8, r2
 8005ec6:	4699      	mov	r9, r3
 8005ec8:	d837      	bhi.n	8005f3a <__ssputs_r+0x82>
 8005eca:	898a      	ldrh	r2, [r1, #12]
 8005ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ed0:	d031      	beq.n	8005f36 <__ssputs_r+0x7e>
 8005ed2:	6825      	ldr	r5, [r4, #0]
 8005ed4:	6909      	ldr	r1, [r1, #16]
 8005ed6:	1a6f      	subs	r7, r5, r1
 8005ed8:	6965      	ldr	r5, [r4, #20]
 8005eda:	2302      	movs	r3, #2
 8005edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ee0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ee4:	f109 0301 	add.w	r3, r9, #1
 8005ee8:	443b      	add	r3, r7
 8005eea:	429d      	cmp	r5, r3
 8005eec:	bf38      	it	cc
 8005eee:	461d      	movcc	r5, r3
 8005ef0:	0553      	lsls	r3, r2, #21
 8005ef2:	d530      	bpl.n	8005f56 <__ssputs_r+0x9e>
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f000 fb21 	bl	800653c <_malloc_r>
 8005efa:	4606      	mov	r6, r0
 8005efc:	b950      	cbnz	r0, 8005f14 <__ssputs_r+0x5c>
 8005efe:	230c      	movs	r3, #12
 8005f00:	f8ca 3000 	str.w	r3, [sl]
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f0a:	81a3      	strh	r3, [r4, #12]
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f14:	463a      	mov	r2, r7
 8005f16:	6921      	ldr	r1, [r4, #16]
 8005f18:	f7ff ff9a 	bl	8005e50 <memcpy>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	6126      	str	r6, [r4, #16]
 8005f2a:	6165      	str	r5, [r4, #20]
 8005f2c:	443e      	add	r6, r7
 8005f2e:	1bed      	subs	r5, r5, r7
 8005f30:	6026      	str	r6, [r4, #0]
 8005f32:	60a5      	str	r5, [r4, #8]
 8005f34:	464e      	mov	r6, r9
 8005f36:	454e      	cmp	r6, r9
 8005f38:	d900      	bls.n	8005f3c <__ssputs_r+0x84>
 8005f3a:	464e      	mov	r6, r9
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	4641      	mov	r1, r8
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	f000 fa93 	bl	800646c <memmove>
 8005f46:	68a3      	ldr	r3, [r4, #8]
 8005f48:	1b9b      	subs	r3, r3, r6
 8005f4a:	60a3      	str	r3, [r4, #8]
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	441e      	add	r6, r3
 8005f50:	6026      	str	r6, [r4, #0]
 8005f52:	2000      	movs	r0, #0
 8005f54:	e7dc      	b.n	8005f10 <__ssputs_r+0x58>
 8005f56:	462a      	mov	r2, r5
 8005f58:	f000 fb4a 	bl	80065f0 <_realloc_r>
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d1e2      	bne.n	8005f28 <__ssputs_r+0x70>
 8005f62:	6921      	ldr	r1, [r4, #16]
 8005f64:	4650      	mov	r0, sl
 8005f66:	f000 fa9b 	bl	80064a0 <_free_r>
 8005f6a:	e7c8      	b.n	8005efe <__ssputs_r+0x46>

08005f6c <_svfiprintf_r>:
 8005f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f70:	461d      	mov	r5, r3
 8005f72:	898b      	ldrh	r3, [r1, #12]
 8005f74:	061f      	lsls	r7, r3, #24
 8005f76:	b09d      	sub	sp, #116	; 0x74
 8005f78:	4680      	mov	r8, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4616      	mov	r6, r2
 8005f7e:	d50f      	bpl.n	8005fa0 <_svfiprintf_r+0x34>
 8005f80:	690b      	ldr	r3, [r1, #16]
 8005f82:	b96b      	cbnz	r3, 8005fa0 <_svfiprintf_r+0x34>
 8005f84:	2140      	movs	r1, #64	; 0x40
 8005f86:	f000 fad9 	bl	800653c <_malloc_r>
 8005f8a:	6020      	str	r0, [r4, #0]
 8005f8c:	6120      	str	r0, [r4, #16]
 8005f8e:	b928      	cbnz	r0, 8005f9c <_svfiprintf_r+0x30>
 8005f90:	230c      	movs	r3, #12
 8005f92:	f8c8 3000 	str.w	r3, [r8]
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9a:	e0c8      	b.n	800612e <_svfiprintf_r+0x1c2>
 8005f9c:	2340      	movs	r3, #64	; 0x40
 8005f9e:	6163      	str	r3, [r4, #20]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa4:	2320      	movs	r3, #32
 8005fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005faa:	2330      	movs	r3, #48	; 0x30
 8005fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fb0:	9503      	str	r5, [sp, #12]
 8005fb2:	f04f 0b01 	mov.w	fp, #1
 8005fb6:	4637      	mov	r7, r6
 8005fb8:	463d      	mov	r5, r7
 8005fba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005fbe:	b10b      	cbz	r3, 8005fc4 <_svfiprintf_r+0x58>
 8005fc0:	2b25      	cmp	r3, #37	; 0x25
 8005fc2:	d13e      	bne.n	8006042 <_svfiprintf_r+0xd6>
 8005fc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005fc8:	d00b      	beq.n	8005fe2 <_svfiprintf_r+0x76>
 8005fca:	4653      	mov	r3, sl
 8005fcc:	4632      	mov	r2, r6
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	f7ff ff71 	bl	8005eb8 <__ssputs_r>
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	f000 80a4 	beq.w	8006124 <_svfiprintf_r+0x1b8>
 8005fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fde:	4453      	add	r3, sl
 8005fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe2:	783b      	ldrb	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 809d 	beq.w	8006124 <_svfiprintf_r+0x1b8>
 8005fea:	2300      	movs	r3, #0
 8005fec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	9307      	str	r3, [sp, #28]
 8005ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8005ffe:	462f      	mov	r7, r5
 8006000:	2205      	movs	r2, #5
 8006002:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006006:	4850      	ldr	r0, [pc, #320]	; (8006148 <_svfiprintf_r+0x1dc>)
 8006008:	f7fa f8f2 	bl	80001f0 <memchr>
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	b9d0      	cbnz	r0, 8006046 <_svfiprintf_r+0xda>
 8006010:	06d9      	lsls	r1, r3, #27
 8006012:	bf44      	itt	mi
 8006014:	2220      	movmi	r2, #32
 8006016:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800601a:	071a      	lsls	r2, r3, #28
 800601c:	bf44      	itt	mi
 800601e:	222b      	movmi	r2, #43	; 0x2b
 8006020:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006024:	782a      	ldrb	r2, [r5, #0]
 8006026:	2a2a      	cmp	r2, #42	; 0x2a
 8006028:	d015      	beq.n	8006056 <_svfiprintf_r+0xea>
 800602a:	9a07      	ldr	r2, [sp, #28]
 800602c:	462f      	mov	r7, r5
 800602e:	2000      	movs	r0, #0
 8006030:	250a      	movs	r5, #10
 8006032:	4639      	mov	r1, r7
 8006034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006038:	3b30      	subs	r3, #48	; 0x30
 800603a:	2b09      	cmp	r3, #9
 800603c:	d94d      	bls.n	80060da <_svfiprintf_r+0x16e>
 800603e:	b1b8      	cbz	r0, 8006070 <_svfiprintf_r+0x104>
 8006040:	e00f      	b.n	8006062 <_svfiprintf_r+0xf6>
 8006042:	462f      	mov	r7, r5
 8006044:	e7b8      	b.n	8005fb8 <_svfiprintf_r+0x4c>
 8006046:	4a40      	ldr	r2, [pc, #256]	; (8006148 <_svfiprintf_r+0x1dc>)
 8006048:	1a80      	subs	r0, r0, r2
 800604a:	fa0b f000 	lsl.w	r0, fp, r0
 800604e:	4318      	orrs	r0, r3
 8006050:	9004      	str	r0, [sp, #16]
 8006052:	463d      	mov	r5, r7
 8006054:	e7d3      	b.n	8005ffe <_svfiprintf_r+0x92>
 8006056:	9a03      	ldr	r2, [sp, #12]
 8006058:	1d11      	adds	r1, r2, #4
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	9103      	str	r1, [sp, #12]
 800605e:	2a00      	cmp	r2, #0
 8006060:	db01      	blt.n	8006066 <_svfiprintf_r+0xfa>
 8006062:	9207      	str	r2, [sp, #28]
 8006064:	e004      	b.n	8006070 <_svfiprintf_r+0x104>
 8006066:	4252      	negs	r2, r2
 8006068:	f043 0302 	orr.w	r3, r3, #2
 800606c:	9207      	str	r2, [sp, #28]
 800606e:	9304      	str	r3, [sp, #16]
 8006070:	783b      	ldrb	r3, [r7, #0]
 8006072:	2b2e      	cmp	r3, #46	; 0x2e
 8006074:	d10c      	bne.n	8006090 <_svfiprintf_r+0x124>
 8006076:	787b      	ldrb	r3, [r7, #1]
 8006078:	2b2a      	cmp	r3, #42	; 0x2a
 800607a:	d133      	bne.n	80060e4 <_svfiprintf_r+0x178>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	1d1a      	adds	r2, r3, #4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	9203      	str	r2, [sp, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	bfb8      	it	lt
 8006088:	f04f 33ff 	movlt.w	r3, #4294967295
 800608c:	3702      	adds	r7, #2
 800608e:	9305      	str	r3, [sp, #20]
 8006090:	4d2e      	ldr	r5, [pc, #184]	; (800614c <_svfiprintf_r+0x1e0>)
 8006092:	7839      	ldrb	r1, [r7, #0]
 8006094:	2203      	movs	r2, #3
 8006096:	4628      	mov	r0, r5
 8006098:	f7fa f8aa 	bl	80001f0 <memchr>
 800609c:	b138      	cbz	r0, 80060ae <_svfiprintf_r+0x142>
 800609e:	2340      	movs	r3, #64	; 0x40
 80060a0:	1b40      	subs	r0, r0, r5
 80060a2:	fa03 f000 	lsl.w	r0, r3, r0
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	4303      	orrs	r3, r0
 80060aa:	3701      	adds	r7, #1
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	7839      	ldrb	r1, [r7, #0]
 80060b0:	4827      	ldr	r0, [pc, #156]	; (8006150 <_svfiprintf_r+0x1e4>)
 80060b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060b6:	2206      	movs	r2, #6
 80060b8:	1c7e      	adds	r6, r7, #1
 80060ba:	f7fa f899 	bl	80001f0 <memchr>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d038      	beq.n	8006134 <_svfiprintf_r+0x1c8>
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <_svfiprintf_r+0x1e8>)
 80060c4:	bb13      	cbnz	r3, 800610c <_svfiprintf_r+0x1a0>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	3307      	adds	r3, #7
 80060ca:	f023 0307 	bic.w	r3, r3, #7
 80060ce:	3308      	adds	r3, #8
 80060d0:	9303      	str	r3, [sp, #12]
 80060d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d4:	444b      	add	r3, r9
 80060d6:	9309      	str	r3, [sp, #36]	; 0x24
 80060d8:	e76d      	b.n	8005fb6 <_svfiprintf_r+0x4a>
 80060da:	fb05 3202 	mla	r2, r5, r2, r3
 80060de:	2001      	movs	r0, #1
 80060e0:	460f      	mov	r7, r1
 80060e2:	e7a6      	b.n	8006032 <_svfiprintf_r+0xc6>
 80060e4:	2300      	movs	r3, #0
 80060e6:	3701      	adds	r7, #1
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	4619      	mov	r1, r3
 80060ec:	250a      	movs	r5, #10
 80060ee:	4638      	mov	r0, r7
 80060f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060f4:	3a30      	subs	r2, #48	; 0x30
 80060f6:	2a09      	cmp	r2, #9
 80060f8:	d903      	bls.n	8006102 <_svfiprintf_r+0x196>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0c8      	beq.n	8006090 <_svfiprintf_r+0x124>
 80060fe:	9105      	str	r1, [sp, #20]
 8006100:	e7c6      	b.n	8006090 <_svfiprintf_r+0x124>
 8006102:	fb05 2101 	mla	r1, r5, r1, r2
 8006106:	2301      	movs	r3, #1
 8006108:	4607      	mov	r7, r0
 800610a:	e7f0      	b.n	80060ee <_svfiprintf_r+0x182>
 800610c:	ab03      	add	r3, sp, #12
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4622      	mov	r2, r4
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <_svfiprintf_r+0x1ec>)
 8006114:	a904      	add	r1, sp, #16
 8006116:	4640      	mov	r0, r8
 8006118:	f3af 8000 	nop.w
 800611c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006120:	4681      	mov	r9, r0
 8006122:	d1d6      	bne.n	80060d2 <_svfiprintf_r+0x166>
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	065b      	lsls	r3, r3, #25
 8006128:	f53f af35 	bmi.w	8005f96 <_svfiprintf_r+0x2a>
 800612c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800612e:	b01d      	add	sp, #116	; 0x74
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006134:	ab03      	add	r3, sp, #12
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	4622      	mov	r2, r4
 800613a:	4b07      	ldr	r3, [pc, #28]	; (8006158 <_svfiprintf_r+0x1ec>)
 800613c:	a904      	add	r1, sp, #16
 800613e:	4640      	mov	r0, r8
 8006140:	f000 f882 	bl	8006248 <_printf_i>
 8006144:	e7ea      	b.n	800611c <_svfiprintf_r+0x1b0>
 8006146:	bf00      	nop
 8006148:	08006768 	.word	0x08006768
 800614c:	0800676e 	.word	0x0800676e
 8006150:	08006772 	.word	0x08006772
 8006154:	00000000 	.word	0x00000000
 8006158:	08005eb9 	.word	0x08005eb9

0800615c <_printf_common>:
 800615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	4691      	mov	r9, r2
 8006162:	461f      	mov	r7, r3
 8006164:	688a      	ldr	r2, [r1, #8]
 8006166:	690b      	ldr	r3, [r1, #16]
 8006168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800616c:	4293      	cmp	r3, r2
 800616e:	bfb8      	it	lt
 8006170:	4613      	movlt	r3, r2
 8006172:	f8c9 3000 	str.w	r3, [r9]
 8006176:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800617a:	4606      	mov	r6, r0
 800617c:	460c      	mov	r4, r1
 800617e:	b112      	cbz	r2, 8006186 <_printf_common+0x2a>
 8006180:	3301      	adds	r3, #1
 8006182:	f8c9 3000 	str.w	r3, [r9]
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	0699      	lsls	r1, r3, #26
 800618a:	bf42      	ittt	mi
 800618c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006190:	3302      	addmi	r3, #2
 8006192:	f8c9 3000 	strmi.w	r3, [r9]
 8006196:	6825      	ldr	r5, [r4, #0]
 8006198:	f015 0506 	ands.w	r5, r5, #6
 800619c:	d107      	bne.n	80061ae <_printf_common+0x52>
 800619e:	f104 0a19 	add.w	sl, r4, #25
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	f8d9 2000 	ldr.w	r2, [r9]
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	42ab      	cmp	r3, r5
 80061ac:	dc28      	bgt.n	8006200 <_printf_common+0xa4>
 80061ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	3300      	adds	r3, #0
 80061b6:	bf18      	it	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	0692      	lsls	r2, r2, #26
 80061bc:	d42d      	bmi.n	800621a <_printf_common+0xbe>
 80061be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c2:	4639      	mov	r1, r7
 80061c4:	4630      	mov	r0, r6
 80061c6:	47c0      	blx	r8
 80061c8:	3001      	adds	r0, #1
 80061ca:	d020      	beq.n	800620e <_printf_common+0xb2>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	68e5      	ldr	r5, [r4, #12]
 80061d0:	f8d9 2000 	ldr.w	r2, [r9]
 80061d4:	f003 0306 	and.w	r3, r3, #6
 80061d8:	2b04      	cmp	r3, #4
 80061da:	bf08      	it	eq
 80061dc:	1aad      	subeq	r5, r5, r2
 80061de:	68a3      	ldr	r3, [r4, #8]
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	bf0c      	ite	eq
 80061e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e8:	2500      	movne	r5, #0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	bfc4      	itt	gt
 80061ee:	1a9b      	subgt	r3, r3, r2
 80061f0:	18ed      	addgt	r5, r5, r3
 80061f2:	f04f 0900 	mov.w	r9, #0
 80061f6:	341a      	adds	r4, #26
 80061f8:	454d      	cmp	r5, r9
 80061fa:	d11a      	bne.n	8006232 <_printf_common+0xd6>
 80061fc:	2000      	movs	r0, #0
 80061fe:	e008      	b.n	8006212 <_printf_common+0xb6>
 8006200:	2301      	movs	r3, #1
 8006202:	4652      	mov	r2, sl
 8006204:	4639      	mov	r1, r7
 8006206:	4630      	mov	r0, r6
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d103      	bne.n	8006216 <_printf_common+0xba>
 800620e:	f04f 30ff 	mov.w	r0, #4294967295
 8006212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006216:	3501      	adds	r5, #1
 8006218:	e7c3      	b.n	80061a2 <_printf_common+0x46>
 800621a:	18e1      	adds	r1, r4, r3
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	2030      	movs	r0, #48	; 0x30
 8006220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006224:	4422      	add	r2, r4
 8006226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800622a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800622e:	3302      	adds	r3, #2
 8006230:	e7c5      	b.n	80061be <_printf_common+0x62>
 8006232:	2301      	movs	r3, #1
 8006234:	4622      	mov	r2, r4
 8006236:	4639      	mov	r1, r7
 8006238:	4630      	mov	r0, r6
 800623a:	47c0      	blx	r8
 800623c:	3001      	adds	r0, #1
 800623e:	d0e6      	beq.n	800620e <_printf_common+0xb2>
 8006240:	f109 0901 	add.w	r9, r9, #1
 8006244:	e7d8      	b.n	80061f8 <_printf_common+0x9c>
	...

08006248 <_printf_i>:
 8006248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800624c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006250:	460c      	mov	r4, r1
 8006252:	7e09      	ldrb	r1, [r1, #24]
 8006254:	b085      	sub	sp, #20
 8006256:	296e      	cmp	r1, #110	; 0x6e
 8006258:	4617      	mov	r7, r2
 800625a:	4606      	mov	r6, r0
 800625c:	4698      	mov	r8, r3
 800625e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006260:	f000 80b3 	beq.w	80063ca <_printf_i+0x182>
 8006264:	d822      	bhi.n	80062ac <_printf_i+0x64>
 8006266:	2963      	cmp	r1, #99	; 0x63
 8006268:	d036      	beq.n	80062d8 <_printf_i+0x90>
 800626a:	d80a      	bhi.n	8006282 <_printf_i+0x3a>
 800626c:	2900      	cmp	r1, #0
 800626e:	f000 80b9 	beq.w	80063e4 <_printf_i+0x19c>
 8006272:	2958      	cmp	r1, #88	; 0x58
 8006274:	f000 8083 	beq.w	800637e <_printf_i+0x136>
 8006278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800627c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006280:	e032      	b.n	80062e8 <_printf_i+0xa0>
 8006282:	2964      	cmp	r1, #100	; 0x64
 8006284:	d001      	beq.n	800628a <_printf_i+0x42>
 8006286:	2969      	cmp	r1, #105	; 0x69
 8006288:	d1f6      	bne.n	8006278 <_printf_i+0x30>
 800628a:	6820      	ldr	r0, [r4, #0]
 800628c:	6813      	ldr	r3, [r2, #0]
 800628e:	0605      	lsls	r5, r0, #24
 8006290:	f103 0104 	add.w	r1, r3, #4
 8006294:	d52a      	bpl.n	80062ec <_printf_i+0xa4>
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6011      	str	r1, [r2, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	da03      	bge.n	80062a6 <_printf_i+0x5e>
 800629e:	222d      	movs	r2, #45	; 0x2d
 80062a0:	425b      	negs	r3, r3
 80062a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062a6:	486f      	ldr	r0, [pc, #444]	; (8006464 <_printf_i+0x21c>)
 80062a8:	220a      	movs	r2, #10
 80062aa:	e039      	b.n	8006320 <_printf_i+0xd8>
 80062ac:	2973      	cmp	r1, #115	; 0x73
 80062ae:	f000 809d 	beq.w	80063ec <_printf_i+0x1a4>
 80062b2:	d808      	bhi.n	80062c6 <_printf_i+0x7e>
 80062b4:	296f      	cmp	r1, #111	; 0x6f
 80062b6:	d020      	beq.n	80062fa <_printf_i+0xb2>
 80062b8:	2970      	cmp	r1, #112	; 0x70
 80062ba:	d1dd      	bne.n	8006278 <_printf_i+0x30>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	f043 0320 	orr.w	r3, r3, #32
 80062c2:	6023      	str	r3, [r4, #0]
 80062c4:	e003      	b.n	80062ce <_printf_i+0x86>
 80062c6:	2975      	cmp	r1, #117	; 0x75
 80062c8:	d017      	beq.n	80062fa <_printf_i+0xb2>
 80062ca:	2978      	cmp	r1, #120	; 0x78
 80062cc:	d1d4      	bne.n	8006278 <_printf_i+0x30>
 80062ce:	2378      	movs	r3, #120	; 0x78
 80062d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062d4:	4864      	ldr	r0, [pc, #400]	; (8006468 <_printf_i+0x220>)
 80062d6:	e055      	b.n	8006384 <_printf_i+0x13c>
 80062d8:	6813      	ldr	r3, [r2, #0]
 80062da:	1d19      	adds	r1, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6011      	str	r1, [r2, #0]
 80062e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e8:	2301      	movs	r3, #1
 80062ea:	e08c      	b.n	8006406 <_printf_i+0x1be>
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6011      	str	r1, [r2, #0]
 80062f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062f4:	bf18      	it	ne
 80062f6:	b21b      	sxthne	r3, r3
 80062f8:	e7cf      	b.n	800629a <_printf_i+0x52>
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	6825      	ldr	r5, [r4, #0]
 80062fe:	1d18      	adds	r0, r3, #4
 8006300:	6010      	str	r0, [r2, #0]
 8006302:	0628      	lsls	r0, r5, #24
 8006304:	d501      	bpl.n	800630a <_printf_i+0xc2>
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	e002      	b.n	8006310 <_printf_i+0xc8>
 800630a:	0668      	lsls	r0, r5, #25
 800630c:	d5fb      	bpl.n	8006306 <_printf_i+0xbe>
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	4854      	ldr	r0, [pc, #336]	; (8006464 <_printf_i+0x21c>)
 8006312:	296f      	cmp	r1, #111	; 0x6f
 8006314:	bf14      	ite	ne
 8006316:	220a      	movne	r2, #10
 8006318:	2208      	moveq	r2, #8
 800631a:	2100      	movs	r1, #0
 800631c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006320:	6865      	ldr	r5, [r4, #4]
 8006322:	60a5      	str	r5, [r4, #8]
 8006324:	2d00      	cmp	r5, #0
 8006326:	f2c0 8095 	blt.w	8006454 <_printf_i+0x20c>
 800632a:	6821      	ldr	r1, [r4, #0]
 800632c:	f021 0104 	bic.w	r1, r1, #4
 8006330:	6021      	str	r1, [r4, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d13d      	bne.n	80063b2 <_printf_i+0x16a>
 8006336:	2d00      	cmp	r5, #0
 8006338:	f040 808e 	bne.w	8006458 <_printf_i+0x210>
 800633c:	4665      	mov	r5, ip
 800633e:	2a08      	cmp	r2, #8
 8006340:	d10b      	bne.n	800635a <_printf_i+0x112>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	07db      	lsls	r3, r3, #31
 8006346:	d508      	bpl.n	800635a <_printf_i+0x112>
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	bfde      	ittt	le
 8006350:	2330      	movle	r3, #48	; 0x30
 8006352:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006356:	f105 35ff 	addle.w	r5, r5, #4294967295
 800635a:	ebac 0305 	sub.w	r3, ip, r5
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	f8cd 8000 	str.w	r8, [sp]
 8006364:	463b      	mov	r3, r7
 8006366:	aa03      	add	r2, sp, #12
 8006368:	4621      	mov	r1, r4
 800636a:	4630      	mov	r0, r6
 800636c:	f7ff fef6 	bl	800615c <_printf_common>
 8006370:	3001      	adds	r0, #1
 8006372:	d14d      	bne.n	8006410 <_printf_i+0x1c8>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	b005      	add	sp, #20
 800637a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800637e:	4839      	ldr	r0, [pc, #228]	; (8006464 <_printf_i+0x21c>)
 8006380:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006384:	6813      	ldr	r3, [r2, #0]
 8006386:	6821      	ldr	r1, [r4, #0]
 8006388:	1d1d      	adds	r5, r3, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6015      	str	r5, [r2, #0]
 800638e:	060a      	lsls	r2, r1, #24
 8006390:	d50b      	bpl.n	80063aa <_printf_i+0x162>
 8006392:	07ca      	lsls	r2, r1, #31
 8006394:	bf44      	itt	mi
 8006396:	f041 0120 	orrmi.w	r1, r1, #32
 800639a:	6021      	strmi	r1, [r4, #0]
 800639c:	b91b      	cbnz	r3, 80063a6 <_printf_i+0x15e>
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	f022 0220 	bic.w	r2, r2, #32
 80063a4:	6022      	str	r2, [r4, #0]
 80063a6:	2210      	movs	r2, #16
 80063a8:	e7b7      	b.n	800631a <_printf_i+0xd2>
 80063aa:	064d      	lsls	r5, r1, #25
 80063ac:	bf48      	it	mi
 80063ae:	b29b      	uxthmi	r3, r3
 80063b0:	e7ef      	b.n	8006392 <_printf_i+0x14a>
 80063b2:	4665      	mov	r5, ip
 80063b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80063b8:	fb02 3311 	mls	r3, r2, r1, r3
 80063bc:	5cc3      	ldrb	r3, [r0, r3]
 80063be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063c2:	460b      	mov	r3, r1
 80063c4:	2900      	cmp	r1, #0
 80063c6:	d1f5      	bne.n	80063b4 <_printf_i+0x16c>
 80063c8:	e7b9      	b.n	800633e <_printf_i+0xf6>
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	6825      	ldr	r5, [r4, #0]
 80063ce:	6961      	ldr	r1, [r4, #20]
 80063d0:	1d18      	adds	r0, r3, #4
 80063d2:	6010      	str	r0, [r2, #0]
 80063d4:	0628      	lsls	r0, r5, #24
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	d501      	bpl.n	80063de <_printf_i+0x196>
 80063da:	6019      	str	r1, [r3, #0]
 80063dc:	e002      	b.n	80063e4 <_printf_i+0x19c>
 80063de:	066a      	lsls	r2, r5, #25
 80063e0:	d5fb      	bpl.n	80063da <_printf_i+0x192>
 80063e2:	8019      	strh	r1, [r3, #0]
 80063e4:	2300      	movs	r3, #0
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	4665      	mov	r5, ip
 80063ea:	e7b9      	b.n	8006360 <_printf_i+0x118>
 80063ec:	6813      	ldr	r3, [r2, #0]
 80063ee:	1d19      	adds	r1, r3, #4
 80063f0:	6011      	str	r1, [r2, #0]
 80063f2:	681d      	ldr	r5, [r3, #0]
 80063f4:	6862      	ldr	r2, [r4, #4]
 80063f6:	2100      	movs	r1, #0
 80063f8:	4628      	mov	r0, r5
 80063fa:	f7f9 fef9 	bl	80001f0 <memchr>
 80063fe:	b108      	cbz	r0, 8006404 <_printf_i+0x1bc>
 8006400:	1b40      	subs	r0, r0, r5
 8006402:	6060      	str	r0, [r4, #4]
 8006404:	6863      	ldr	r3, [r4, #4]
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	2300      	movs	r3, #0
 800640a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640e:	e7a7      	b.n	8006360 <_printf_i+0x118>
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	462a      	mov	r2, r5
 8006414:	4639      	mov	r1, r7
 8006416:	4630      	mov	r0, r6
 8006418:	47c0      	blx	r8
 800641a:	3001      	adds	r0, #1
 800641c:	d0aa      	beq.n	8006374 <_printf_i+0x12c>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	079b      	lsls	r3, r3, #30
 8006422:	d413      	bmi.n	800644c <_printf_i+0x204>
 8006424:	68e0      	ldr	r0, [r4, #12]
 8006426:	9b03      	ldr	r3, [sp, #12]
 8006428:	4298      	cmp	r0, r3
 800642a:	bfb8      	it	lt
 800642c:	4618      	movlt	r0, r3
 800642e:	e7a3      	b.n	8006378 <_printf_i+0x130>
 8006430:	2301      	movs	r3, #1
 8006432:	464a      	mov	r2, r9
 8006434:	4639      	mov	r1, r7
 8006436:	4630      	mov	r0, r6
 8006438:	47c0      	blx	r8
 800643a:	3001      	adds	r0, #1
 800643c:	d09a      	beq.n	8006374 <_printf_i+0x12c>
 800643e:	3501      	adds	r5, #1
 8006440:	68e3      	ldr	r3, [r4, #12]
 8006442:	9a03      	ldr	r2, [sp, #12]
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	42ab      	cmp	r3, r5
 8006448:	dcf2      	bgt.n	8006430 <_printf_i+0x1e8>
 800644a:	e7eb      	b.n	8006424 <_printf_i+0x1dc>
 800644c:	2500      	movs	r5, #0
 800644e:	f104 0919 	add.w	r9, r4, #25
 8006452:	e7f5      	b.n	8006440 <_printf_i+0x1f8>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ac      	bne.n	80063b2 <_printf_i+0x16a>
 8006458:	7803      	ldrb	r3, [r0, #0]
 800645a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006462:	e76c      	b.n	800633e <_printf_i+0xf6>
 8006464:	08006779 	.word	0x08006779
 8006468:	0800678a 	.word	0x0800678a

0800646c <memmove>:
 800646c:	4288      	cmp	r0, r1
 800646e:	b510      	push	{r4, lr}
 8006470:	eb01 0302 	add.w	r3, r1, r2
 8006474:	d807      	bhi.n	8006486 <memmove+0x1a>
 8006476:	1e42      	subs	r2, r0, #1
 8006478:	4299      	cmp	r1, r3
 800647a:	d00a      	beq.n	8006492 <memmove+0x26>
 800647c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006480:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006484:	e7f8      	b.n	8006478 <memmove+0xc>
 8006486:	4283      	cmp	r3, r0
 8006488:	d9f5      	bls.n	8006476 <memmove+0xa>
 800648a:	1881      	adds	r1, r0, r2
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	42d3      	cmn	r3, r2
 8006490:	d100      	bne.n	8006494 <memmove+0x28>
 8006492:	bd10      	pop	{r4, pc}
 8006494:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006498:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800649c:	e7f7      	b.n	800648e <memmove+0x22>
	...

080064a0 <_free_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4605      	mov	r5, r0
 80064a4:	2900      	cmp	r1, #0
 80064a6:	d045      	beq.n	8006534 <_free_r+0x94>
 80064a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ac:	1f0c      	subs	r4, r1, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bfb8      	it	lt
 80064b2:	18e4      	addlt	r4, r4, r3
 80064b4:	f000 f8d2 	bl	800665c <__malloc_lock>
 80064b8:	4a1f      	ldr	r2, [pc, #124]	; (8006538 <_free_r+0x98>)
 80064ba:	6813      	ldr	r3, [r2, #0]
 80064bc:	4610      	mov	r0, r2
 80064be:	b933      	cbnz	r3, 80064ce <_free_r+0x2e>
 80064c0:	6063      	str	r3, [r4, #4]
 80064c2:	6014      	str	r4, [r2, #0]
 80064c4:	4628      	mov	r0, r5
 80064c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064ca:	f000 b8c8 	b.w	800665e <__malloc_unlock>
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	d90c      	bls.n	80064ec <_free_r+0x4c>
 80064d2:	6821      	ldr	r1, [r4, #0]
 80064d4:	1862      	adds	r2, r4, r1
 80064d6:	4293      	cmp	r3, r2
 80064d8:	bf04      	itt	eq
 80064da:	681a      	ldreq	r2, [r3, #0]
 80064dc:	685b      	ldreq	r3, [r3, #4]
 80064de:	6063      	str	r3, [r4, #4]
 80064e0:	bf04      	itt	eq
 80064e2:	1852      	addeq	r2, r2, r1
 80064e4:	6022      	streq	r2, [r4, #0]
 80064e6:	6004      	str	r4, [r0, #0]
 80064e8:	e7ec      	b.n	80064c4 <_free_r+0x24>
 80064ea:	4613      	mov	r3, r2
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	b10a      	cbz	r2, 80064f4 <_free_r+0x54>
 80064f0:	42a2      	cmp	r2, r4
 80064f2:	d9fa      	bls.n	80064ea <_free_r+0x4a>
 80064f4:	6819      	ldr	r1, [r3, #0]
 80064f6:	1858      	adds	r0, r3, r1
 80064f8:	42a0      	cmp	r0, r4
 80064fa:	d10b      	bne.n	8006514 <_free_r+0x74>
 80064fc:	6820      	ldr	r0, [r4, #0]
 80064fe:	4401      	add	r1, r0
 8006500:	1858      	adds	r0, r3, r1
 8006502:	4282      	cmp	r2, r0
 8006504:	6019      	str	r1, [r3, #0]
 8006506:	d1dd      	bne.n	80064c4 <_free_r+0x24>
 8006508:	6810      	ldr	r0, [r2, #0]
 800650a:	6852      	ldr	r2, [r2, #4]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	4401      	add	r1, r0
 8006510:	6019      	str	r1, [r3, #0]
 8006512:	e7d7      	b.n	80064c4 <_free_r+0x24>
 8006514:	d902      	bls.n	800651c <_free_r+0x7c>
 8006516:	230c      	movs	r3, #12
 8006518:	602b      	str	r3, [r5, #0]
 800651a:	e7d3      	b.n	80064c4 <_free_r+0x24>
 800651c:	6820      	ldr	r0, [r4, #0]
 800651e:	1821      	adds	r1, r4, r0
 8006520:	428a      	cmp	r2, r1
 8006522:	bf04      	itt	eq
 8006524:	6811      	ldreq	r1, [r2, #0]
 8006526:	6852      	ldreq	r2, [r2, #4]
 8006528:	6062      	str	r2, [r4, #4]
 800652a:	bf04      	itt	eq
 800652c:	1809      	addeq	r1, r1, r0
 800652e:	6021      	streq	r1, [r4, #0]
 8006530:	605c      	str	r4, [r3, #4]
 8006532:	e7c7      	b.n	80064c4 <_free_r+0x24>
 8006534:	bd38      	pop	{r3, r4, r5, pc}
 8006536:	bf00      	nop
 8006538:	2000499c 	.word	0x2000499c

0800653c <_malloc_r>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	1ccd      	adds	r5, r1, #3
 8006540:	f025 0503 	bic.w	r5, r5, #3
 8006544:	3508      	adds	r5, #8
 8006546:	2d0c      	cmp	r5, #12
 8006548:	bf38      	it	cc
 800654a:	250c      	movcc	r5, #12
 800654c:	2d00      	cmp	r5, #0
 800654e:	4606      	mov	r6, r0
 8006550:	db01      	blt.n	8006556 <_malloc_r+0x1a>
 8006552:	42a9      	cmp	r1, r5
 8006554:	d903      	bls.n	800655e <_malloc_r+0x22>
 8006556:	230c      	movs	r3, #12
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	2000      	movs	r0, #0
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	f000 f87d 	bl	800665c <__malloc_lock>
 8006562:	4a21      	ldr	r2, [pc, #132]	; (80065e8 <_malloc_r+0xac>)
 8006564:	6814      	ldr	r4, [r2, #0]
 8006566:	4621      	mov	r1, r4
 8006568:	b991      	cbnz	r1, 8006590 <_malloc_r+0x54>
 800656a:	4c20      	ldr	r4, [pc, #128]	; (80065ec <_malloc_r+0xb0>)
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	b91b      	cbnz	r3, 8006578 <_malloc_r+0x3c>
 8006570:	4630      	mov	r0, r6
 8006572:	f000 f863 	bl	800663c <_sbrk_r>
 8006576:	6020      	str	r0, [r4, #0]
 8006578:	4629      	mov	r1, r5
 800657a:	4630      	mov	r0, r6
 800657c:	f000 f85e 	bl	800663c <_sbrk_r>
 8006580:	1c43      	adds	r3, r0, #1
 8006582:	d124      	bne.n	80065ce <_malloc_r+0x92>
 8006584:	230c      	movs	r3, #12
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f868 	bl	800665e <__malloc_unlock>
 800658e:	e7e4      	b.n	800655a <_malloc_r+0x1e>
 8006590:	680b      	ldr	r3, [r1, #0]
 8006592:	1b5b      	subs	r3, r3, r5
 8006594:	d418      	bmi.n	80065c8 <_malloc_r+0x8c>
 8006596:	2b0b      	cmp	r3, #11
 8006598:	d90f      	bls.n	80065ba <_malloc_r+0x7e>
 800659a:	600b      	str	r3, [r1, #0]
 800659c:	50cd      	str	r5, [r1, r3]
 800659e:	18cc      	adds	r4, r1, r3
 80065a0:	4630      	mov	r0, r6
 80065a2:	f000 f85c 	bl	800665e <__malloc_unlock>
 80065a6:	f104 000b 	add.w	r0, r4, #11
 80065aa:	1d23      	adds	r3, r4, #4
 80065ac:	f020 0007 	bic.w	r0, r0, #7
 80065b0:	1ac3      	subs	r3, r0, r3
 80065b2:	d0d3      	beq.n	800655c <_malloc_r+0x20>
 80065b4:	425a      	negs	r2, r3
 80065b6:	50e2      	str	r2, [r4, r3]
 80065b8:	e7d0      	b.n	800655c <_malloc_r+0x20>
 80065ba:	428c      	cmp	r4, r1
 80065bc:	684b      	ldr	r3, [r1, #4]
 80065be:	bf16      	itet	ne
 80065c0:	6063      	strne	r3, [r4, #4]
 80065c2:	6013      	streq	r3, [r2, #0]
 80065c4:	460c      	movne	r4, r1
 80065c6:	e7eb      	b.n	80065a0 <_malloc_r+0x64>
 80065c8:	460c      	mov	r4, r1
 80065ca:	6849      	ldr	r1, [r1, #4]
 80065cc:	e7cc      	b.n	8006568 <_malloc_r+0x2c>
 80065ce:	1cc4      	adds	r4, r0, #3
 80065d0:	f024 0403 	bic.w	r4, r4, #3
 80065d4:	42a0      	cmp	r0, r4
 80065d6:	d005      	beq.n	80065e4 <_malloc_r+0xa8>
 80065d8:	1a21      	subs	r1, r4, r0
 80065da:	4630      	mov	r0, r6
 80065dc:	f000 f82e 	bl	800663c <_sbrk_r>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d0cf      	beq.n	8006584 <_malloc_r+0x48>
 80065e4:	6025      	str	r5, [r4, #0]
 80065e6:	e7db      	b.n	80065a0 <_malloc_r+0x64>
 80065e8:	2000499c 	.word	0x2000499c
 80065ec:	200049a0 	.word	0x200049a0

080065f0 <_realloc_r>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	4607      	mov	r7, r0
 80065f4:	4614      	mov	r4, r2
 80065f6:	460e      	mov	r6, r1
 80065f8:	b921      	cbnz	r1, 8006604 <_realloc_r+0x14>
 80065fa:	4611      	mov	r1, r2
 80065fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006600:	f7ff bf9c 	b.w	800653c <_malloc_r>
 8006604:	b922      	cbnz	r2, 8006610 <_realloc_r+0x20>
 8006606:	f7ff ff4b 	bl	80064a0 <_free_r>
 800660a:	4625      	mov	r5, r4
 800660c:	4628      	mov	r0, r5
 800660e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006610:	f000 f826 	bl	8006660 <_malloc_usable_size_r>
 8006614:	42a0      	cmp	r0, r4
 8006616:	d20f      	bcs.n	8006638 <_realloc_r+0x48>
 8006618:	4621      	mov	r1, r4
 800661a:	4638      	mov	r0, r7
 800661c:	f7ff ff8e 	bl	800653c <_malloc_r>
 8006620:	4605      	mov	r5, r0
 8006622:	2800      	cmp	r0, #0
 8006624:	d0f2      	beq.n	800660c <_realloc_r+0x1c>
 8006626:	4631      	mov	r1, r6
 8006628:	4622      	mov	r2, r4
 800662a:	f7ff fc11 	bl	8005e50 <memcpy>
 800662e:	4631      	mov	r1, r6
 8006630:	4638      	mov	r0, r7
 8006632:	f7ff ff35 	bl	80064a0 <_free_r>
 8006636:	e7e9      	b.n	800660c <_realloc_r+0x1c>
 8006638:	4635      	mov	r5, r6
 800663a:	e7e7      	b.n	800660c <_realloc_r+0x1c>

0800663c <_sbrk_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4c06      	ldr	r4, [pc, #24]	; (8006658 <_sbrk_r+0x1c>)
 8006640:	2300      	movs	r3, #0
 8006642:	4605      	mov	r5, r0
 8006644:	4608      	mov	r0, r1
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	f7fa facc 	bl	8000be4 <_sbrk>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_sbrk_r+0x1a>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	b103      	cbz	r3, 8006656 <_sbrk_r+0x1a>
 8006654:	602b      	str	r3, [r5, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	20004afc 	.word	0x20004afc

0800665c <__malloc_lock>:
 800665c:	4770      	bx	lr

0800665e <__malloc_unlock>:
 800665e:	4770      	bx	lr

08006660 <_malloc_usable_size_r>:
 8006660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006664:	1f18      	subs	r0, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfbc      	itt	lt
 800666a:	580b      	ldrlt	r3, [r1, r0]
 800666c:	18c0      	addlt	r0, r0, r3
 800666e:	4770      	bx	lr

08006670 <_init>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr

0800667c <_fini>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr
